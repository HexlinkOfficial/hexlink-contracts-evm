{
  "address": "0x150dC1A070AD40292b991b372C1C585E918c78de",
  "abi": [
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotTransitiveOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receipt",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "GasPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "receipt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct Op",
          "name": "op",
          "type": "tuple"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct Op[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "execBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseGas",
              "type": "uint256"
            }
          ],
          "internalType": "struct GasPayer.GasPayment",
          "name": "gas",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateAndCallWithGasRefund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x06d921a708b04ad3987ec24240bbfaff65b03b800a32e02567290892be4e02df",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0x150dC1A070AD40292b991b372C1C585E918c78de",
    "transactionIndex": 83,
    "gasUsed": "2522876",
    "logsBloom": "0x
    "blockHash": "0x7fd8b06a2ca11c422fe82135167fe732f1e5e04a5990e59a0affc376f40ab72a",
    "transactionHash": "0x06d921a708b04ad3987ec24240bbfaff65b03b800a32e02567290892be4e02df",
    "logs": [],
    "blockNumber": 8535057,
    "cumulativeGasUsed": "10697433",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "74330437c7831874851478e333eda15b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"GasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Op\",\"name\":\"op\",\"type\":\"tuple\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Op[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"execBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"}],\"internalType\":\"struct GasPayer.GasPayment\",\"name\":\"gas\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateAndCallWithGasRefund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/account/AccountSimple.sol\":\"AccountSimple\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\",\"keccak256\":\"0xd2d21c507ed587cd5de6cc016d4b9c7e956e468108b784455a400301707031c1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe16b09090c1251f8cc97fb2cc10c86675e0d0d9f0fc0032b417c37c8dba2db5f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x0185d24250a5e6fbafce443b9ba19bba761803e3e5d91ba423bfb1f5f0bbdbf9\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7385e2020de914f75cabdc83c6adf88ed21e9de14669a89b3832b80f4f8c7b73\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/account/AccountBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\n/* solhint-disable avoid-low-level-calls */\\n\\nimport \\\"@solidstate/contracts/access/ownable/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IAccount.sol\\\";\\n\\nabstract contract AccountBase is IERC1271, IAccount, Ownable {\\n    using Address for address;\\n    using ECDSA for bytes32;\\n\\n    event Deposit(\\n        bytes32 indexed ref,\\n        address indexed receipt,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    receive() external payable { }\\n\\n    fallback(bytes calldata) external returns (bytes memory) {\\n        // for ERC1155 and ERC3525\\n        return abi.encode(msg.sig);\\n    }\\n\\n    function isValidSignature(\\n        bytes32 message,\\n        bytes calldata signature\\n    ) external override view returns(bytes4) {\\n        _validateSignature(message, signature);\\n        return IERC1271.isValidSignature.selector;\\n    }\\n\\n    function deposit(\\n        bytes32 ref,\\n        address receipt,\\n        address token,\\n        uint256 amount\\n    ) external {\\n         _validateCaller();\\n        if (token == address(0)) {\\n            Address.sendValue(payable(receipt), amount);\\n        } else {\\n            IERC20(token).transfer(receipt, amount);\\n        }\\n        emit Deposit(ref, receipt, token, amount);\\n    }\\n\\n    function execBatch(Op[] calldata ops) external payable override {\\n        _validateCaller();\\n        uint256 opsLen = ops.length;\\n        for (uint256 i = 0; i < opsLen; i++) {\\n            _exec(ops[i]);\\n        }\\n    }\\n\\n    function exec(Op calldata op) external payable override {\\n        _validateCaller();\\n        _exec(op);\\n    }\\n\\n    function _exec(Op calldata op) internal {\\n        (\\n            bool success,\\n            bytes memory data\\n        ) = op.to.call{\\n            value: op.value,\\n            gas: op.callGasLimit == 0 ? gasleft() : op.callGasLimit\\n        }(op.callData);\\n        Address.verifyCallResult(success, data, \\\"HEXLA001\\\");\\n    }\\n\\n    function _validateSignature(bytes32 message, bytes calldata signature) internal view {\\n        address signer = owner();\\n        bytes32 reqHash = message.toEthSignedMessageHash();\\n        if (signer.isContract()) {\\n            try IERC1271(signer).isValidSignature(reqHash, signature) returns (bytes4 returnvalue) {\\n                require(returnvalue == IERC1271.isValidSignature.selector, \\\"HEXLA002\\\");\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"HEXLA003\\\");\\n            }\\n        } else {\\n            require(signer == reqHash.recover(signature), \\\"HEXLA004\\\");\\n        }\\n    }\\n\\n    function _validateCaller() internal virtual;\\n}\\n\",\"keccak256\":\"0x6d1bce3cce83c8122a73600fd7ee16230f32e62f864f91512a1802c1e43423f2\",\"license\":\"Unlicense\"},\"contracts/account/AccountSimple.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./AccountBase.sol\\\";\\nimport \\\"../utils/GasPayer.sol\\\";\\nimport \\\"../utils/ISwap.sol\\\";\\n\\ncontract AccountSimple is AccountBase, GasPayer {\\n    using Address for address;\\n\\n    uint256 private nonce_;\\n\\n    function init(address owner, bytes memory data) external {\\n        require(_owner() == address(0) && owner != address(0), \\\"HEXL015\\\");\\n        _transferOwnership(owner);\\n        address(this).functionCall(data, \\\"HEXL013\\\");\\n    }\\n\\n    function nonce() external view returns(uint256) {\\n        return nonce_;\\n    }\\n\\n    function validateAndCall(\\n        bytes calldata txData,\\n        uint256 _nonce,\\n        bytes calldata signature\\n    ) public payable {\\n        bytes32 requestId = keccak256(abi.encode(txData, nonce_));\\n        _validateAndRun(requestId, txData, _nonce, signature);\\n    }\\n\\n    function validateAndCallWithGasRefund(\\n        bytes calldata txData,\\n        uint256 _nonce,\\n        GasPayment calldata gas,\\n        bytes calldata signature\\n    ) external payable {\\n        uint256 gasUsed = gasleft();\\n        bytes32 requestId = keccak256(abi.encode(txData, nonce_, gas));\\n        _validateAndRun(requestId, txData, _nonce, signature);\\n        _refundGas(gas, gasUsed - gasleft());\\n    }\\n\\n    function _validateAndRun(\\n        bytes32 requestId,\\n        bytes calldata txData,\\n        uint256 _nonce,\\n        bytes calldata signature\\n    ) internal {\\n        require(nonce_++ == _nonce, \\\"HEXLA008\\\");\\n        _validateSignature(requestId, signature);\\n        (bool success, bytes memory data) = address(this).call(txData);\\n        Address.verifyCallResult(success, data, \\\"HEXLA009\\\");\\n    }\\n\\n    function _validateCaller() internal view override {\\n        require(msg.sender == owner() || msg.sender == address(this), \\\"HEXLA011\\\");\\n    }\\n}\",\"keccak256\":\"0x18bc47dd6f98b37bbc719adeaecbe9f494a5e801c3c85b728f3c3ea559e57572\",\"license\":\"Unlicense\"},\"contracts/account/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Hexlink Contracts\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"../utils/Op.sol\\\";\\n\\ninterface IAccount {\\n    function execBatch(Op[] calldata ops) external payable;\\n\\n    function exec(Op calldata op) external payable;\\n}\\n\",\"keccak256\":\"0x57e2c2135274391767ad1dd81562628d1aa9a86e78b7400c9f14ed639ad75329\",\"license\":\"MIT\"},\"contracts/utils/GasPayer.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../utils/ISwap.sol\\\";\\n\\ncontract GasPayer {\\n    event GasPaid(uint256 payment);\\n\\n    struct GasPayment {\\n        address swapper;\\n        address token;\\n        address receiver;\\n        uint256 baseGas;\\n    }\\n\\n    function _refundGas(\\n        GasPayment calldata gas,\\n        uint256 gasUsed\\n    ) internal returns (uint256 payment) {\\n        if (gas.token != address(0)) {\\n            gasUsed = gasUsed + gas.baseGas + 80000; \\n            payment = gasUsed * tx.gasprice;\\n            uint256 price = ISwap(gas.swapper).priceOf(gas.token);\\n            uint256 amountIn = payment * price / 1000000000000000000 + 1;\\n            IERC20(gas.token).approve(gas.swapper, amountIn);\\n            ISwap(gas.swapper).swapExactOutputAndCall(gas.token, payment, gas.receiver, \\\"\\\");\\n        } else {\\n            gasUsed = gasUsed + gas.baseGas + 50000; // From 69369 to 76624 \\n            payment = gasUsed * tx.gasprice;\\n            Address.sendValue(payable(gas.receiver), payment);\\n        }\\n        emit GasPaid(payment);\\n    }\\n}\",\"keccak256\":\"0xbd371d13e8f0d619421b34b6044f38ed090ad095d31bd1f24a4399056dce724c\",\"license\":\"Unlicense\"},\"contracts/utils/ISwap.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\ninterface ISwap {\\n    event Swap(address indexed from, address indexed token, uint256 amountIn, uint256 amountOut);\\n\\n    function priceOf(address token) external view returns(uint256);\\n\\n    function swap(\\n        address token,\\n        uint256 amountIn\\n    ) external returns(uint256 amountOut);\\n\\n    function swapExactOutput(\\n        address token,\\n        uint256 amountOutput\\n    ) external returns(uint256 amountIn);\\n\\n    function swapAndCall(\\n        address token,\\n        uint256 amountIn,\\n        address to,\\n        bytes memory data\\n    ) external returns(uint256 amountOut);\\n\\n    function swapExactOutputAndCall(\\n        address token,\\n        uint256 amountOutput,\\n        address to,\\n        bytes memory data\\n    ) external returns(uint256 amountIn);\\n}\",\"keccak256\":\"0x8f10e3e1384bcef5711a09a63a012580d84daac179c9c22069b48ef82809b852\",\"license\":\"Unlicense\"},\"contracts/utils/Op.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nstruct Op {\\n    address to;\\n    uint256 value;\\n    bytes callData;\\n    uint256 callGasLimit;\\n}\",\"keccak256\":\"0x617c2c95a472e66c72088c6604db404dbf499f138941baf4bb5694f6b65330d0\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ce3806100206000396000f3fe6080604052600436106100955760003560e01c8063affed0e011610059578063affed0e0146101bb578063c0d91eaf146101e6578063cff834fe1461020f578063e5eb95841461022b578063f2fde38b146102545761009c565b80631626ba7e146100ff5780638479cc0f1461013c5780638c88d380146101585780638da5cb5b14610174578063a8c943461461019f5761009c565b3661009c57005b3480156100a857600080fd5b5060003660606000357fffffffff00000000000000000000000000000000000000000000000000000000166040516020016100e391906116d0565b6040516020818303038152906040529050915050805190602001f35b34801561010b57600080fd5b506101266004803603810190610121919061179a565b61027d565b60405161013391906116d0565b60405180910390f35b61015660048036038101906101519190611850565b61029b565b005b610172600480360381019061016d91906118d3565b6102fc565b005b34801561018057600080fd5b50610189610343565b60405161019691906119a9565b60405180910390f35b6101b960048036038101906101b491906119e8565b610352565b005b3480156101c757600080fd5b506101d0610366565b6040516101dd9190611a40565b60405180910390f35b3480156101f257600080fd5b5061020d60048036038101906102089190611bc8565b61036f565b005b61022960048036038101906102249190611c43565b61048c565b005b34801561023757600080fd5b50610252600480360381019061024d9190611cea565b6104f2565b005b34801561026057600080fd5b5061027b60048036038101906102769190611d51565b610624565b005b600061028a84848461069c565b631626ba7e60e01b90509392505050565b6102a361095e565b600082829050905060005b818110156102f6576102e38484838181106102cc576102cb611d7e565b5b90506020028101906102de9190611dbc565b610a0b565b80806102ee90611e13565b9150506102ae565b50505050565b6000858560005460405160200161031593929190611e9a565b60405160208183030381529060405280519060200120905061033b818787878787610b01565b505050505050565b600061034d610c1f565b905090565b61035a61095e565b61036381610a0b565b50565b60008054905090565b600073ffffffffffffffffffffffffffffffffffffffff1661038f610c1f565b73ffffffffffffffffffffffffffffffffffffffff161480156103df5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b61041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590611f29565b60405180910390fd5b61042782610c52565b610487816040518060400160405280600781526020017f4845584c303133000000000000000000000000000000000000000000000000008152503073ffffffffffffffffffffffffffffffffffffffff16610c5e9092919063ffffffff16565b505050565b60005a905060008787600054876040516020016104ac949392919061200a565b6040516020818303038152906040528051906020012090506104d2818989898888610b01565b6104e7855a846104e2919061204a565b610c76565b505050505050505050565b6104fa61095e565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561053e576105398382610fd1565b6105cd565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161057992919061207e565b602060405180830381600087803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb91906120df565b505b8273ffffffffffffffffffffffffffffffffffffffff16847fc95ddcaddf83340b68d0d44c01b1703f5d28d0611a3fd87e69d79ba7e2ac21d3848460405161061692919061207e565b60405180910390a350505050565b61062c610c1f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610690576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61069981610c52565b50565b60006106a6610343565b905060006106b3856110c5565b90506106d48273ffffffffffffffffffffffffffffffffffffffff166110f5565b15610892578173ffffffffffffffffffffffffffffffffffffffff16631626ba7e8286866040518463ffffffff1660e01b81526004016107169392919061211b565b60206040518083038186803b15801561072e57600080fd5b505afa92505050801561075f57506040513d601f19601f8201168201806040525081019061075c9190612179565b60015b6108055761076b6121b3565b806308c379a014156107c857506107806121d5565b8061078b57506107ca565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bf91906122e2565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90612350565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461088c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610883906123bc565b60405180910390fd5b50610957565b6108e984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508261111890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d90612428565b60405180910390fd5b5b5050505050565b610966610343565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109ca57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0090612494565b60405180910390fd5b565b600080826000016020810190610a219190611d51565b73ffffffffffffffffffffffffffffffffffffffff1683602001356000856060013514610a52578460600135610a54565b5a5b90858060400190610a6591906124b4565b604051610a73929190612547565b600060405180830381858888f193505050503d8060008114610ab1576040519150601f19603f3d011682016040523d82523d6000602084013e610ab6565b606091505b5091509150610afb82826040518060400160405280600881526020017f4845584c4130303100000000000000000000000000000000000000000000000081525061113f565b50505050565b82600080815480929190610b1490611e13565b9190505514610b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4f906125ac565b60405180910390fd5b610b6386838361069c565b6000803073ffffffffffffffffffffffffffffffffffffffff168787604051610b8d929190612547565b6000604051808303816000865af19150503d8060008114610bca576040519150601f19603f3d011682016040523d82523d6000602084013e610bcf565b606091505b5091509150610c1482826040518060400160405280600881526020017f4845584c4130303900000000000000000000000000000000000000000000000081525061113f565b505050505050505050565b6000610c29611161565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c5b8161118e565b50565b6060610c6d848460008561125f565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16836020016020810190610ca29190611d51565b73ffffffffffffffffffffffffffffffffffffffff1614610f4a5762013880836060013583610cd191906125cc565b610cdb91906125cc565b91503a82610ce99190612622565b90506000836000016020810190610d009190611d51565b73ffffffffffffffffffffffffffffffffffffffff1663b95ed06f856020016020810190610d2e9190611d51565b6040518263ffffffff1660e01b8152600401610d4a91906119a9565b60206040518083038186803b158015610d6257600080fd5b505afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190612691565b905060006001670de0b6b3a76400008385610db59190612622565b610dbf91906126ed565b610dc991906125cc565b9050846020016020810190610dde9190611d51565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3866000016020810190610e0c9190611d51565b836040518363ffffffff1660e01b8152600401610e2a92919061207e565b602060405180830381600087803b158015610e4457600080fd5b505af1158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c91906120df565b50846000016020810190610e909190611d51565b73ffffffffffffffffffffffffffffffffffffffff16632b23c4d0866020016020810190610ebe9190611d51565b85886040016020810190610ed29190611d51565b6040518463ffffffff1660e01b8152600401610ef093929190612744565b602060405180830381600087803b158015610f0a57600080fd5b505af1158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190612691565b505050610f94565b61c350836060013583610f5d91906125cc565b610f6791906125cc565b91503a82610f759190612622565b9050610f93836040016020810190610f8d9190611d51565b82610fd1565b5b7fafa36a02a5681da91c622c07a6beef894428bbeaa07e97a875d711afca4aced181604051610fc39190611a40565b60405180910390a192915050565b80471015611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b906127da565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161103a9061281d565b60006040518083038185875af1925050503d8060008114611077576040519150601f19603f3d011682016040523d82523d6000602084013e61107c565b606091505b50509050806110c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b7906128a4565b60405180910390fd5b505050565b6000816040516020016110d8919061293c565b604051602081830303815290604052805190602001209050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000806000611127858561132c565b915091506111348161137e565b819250505092915050565b6060831561114f5782905061115a565b61115983836114ec565b5b9392505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000611198611161565b90508173ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6060824710156112a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129b906129d4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112cd9190612a30565b60006040518083038185875af1925050503d806000811461130a576040519150601f19603f3d011682016040523d82523d6000602084013e61130f565b606091505b50915091506113208783838761153c565b92505050949350505050565b60008060418351141561136e5760008060006020860151925060408601519150606086015160001a9050611362878285856115b2565b94509450505050611377565b60006002915091505b9250929050565b6000600481111561139257611391612a47565b5b8160048111156113a5576113a4612a47565b5b14156113b0576114e9565b600160048111156113c4576113c3612a47565b5b8160048111156113d7576113d6612a47565b5b1415611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f90612ac2565b60405180910390fd5b6002600481111561142c5761142b612a47565b5b81600481111561143f5761143e612a47565b5b1415611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147790612b2e565b60405180910390fd5b6003600481111561149457611493612a47565b5b8160048111156114a7576114a6612a47565b5b14156114e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df90612bc0565b60405180910390fd5b5b50565b6000825111156114ff5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153391906122e2565b60405180910390fd5b6060831561159f5760008351141561159757611557856110f5565b611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158d90612c2c565b60405180910390fd5b5b8290506115aa565b6115a983836114ec565b5b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156115ed57600060039150915061168c565b6000600187878787604051600081526020016040526040516116129493929190612c68565b6020604051602081039080840390855afa158015611634573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116835760006001925092505061168c565b80600092509250505b94509492505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116ca81611695565b82525050565b60006020820190506116e560008301846116c1565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611712816116ff565b811461171d57600080fd5b50565b60008135905061172f81611709565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261175a57611759611735565b5b8235905067ffffffffffffffff8111156117775761177661173a565b5b6020830191508360018202830111156117935761179261173f565b5b9250929050565b6000806000604084860312156117b3576117b26116f5565b5b60006117c186828701611720565b935050602084013567ffffffffffffffff8111156117e2576117e16116fa565b5b6117ee86828701611744565b92509250509250925092565b60008083601f8401126118105761180f611735565b5b8235905067ffffffffffffffff81111561182d5761182c61173a565b5b6020830191508360208202830111156118495761184861173f565b5b9250929050565b60008060208385031215611867576118666116f5565b5b600083013567ffffffffffffffff811115611885576118846116fa565b5b611891858286016117fa565b92509250509250929050565b6000819050919050565b6118b08161189d565b81146118bb57600080fd5b50565b6000813590506118cd816118a7565b92915050565b6000806000806000606086880312156118ef576118ee6116f5565b5b600086013567ffffffffffffffff81111561190d5761190c6116fa565b5b61191988828901611744565b9550955050602061192c888289016118be565b935050604086013567ffffffffffffffff81111561194d5761194c6116fa565b5b61195988828901611744565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061199382611968565b9050919050565b6119a381611988565b82525050565b60006020820190506119be600083018461199a565b92915050565b600080fd5b6000608082840312156119df576119de6119c4565b5b81905092915050565b6000602082840312156119fe576119fd6116f5565b5b600082013567ffffffffffffffff811115611a1c57611a1b6116fa565b5b611a28848285016119c9565b91505092915050565b611a3a8161189d565b82525050565b6000602082019050611a556000830184611a31565b92915050565b611a6481611988565b8114611a6f57600080fd5b50565b600081359050611a8181611a5b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ad582611a8c565b810181811067ffffffffffffffff82111715611af457611af3611a9d565b5b80604052505050565b6000611b076116eb565b9050611b138282611acc565b919050565b600067ffffffffffffffff821115611b3357611b32611a9d565b5b611b3c82611a8c565b9050602081019050919050565b82818337600083830152505050565b6000611b6b611b6684611b18565b611afd565b905082815260208101848484011115611b8757611b86611a87565b5b611b92848285611b49565b509392505050565b600082601f830112611baf57611bae611735565b5b8135611bbf848260208601611b58565b91505092915050565b60008060408385031215611bdf57611bde6116f5565b5b6000611bed85828601611a72565b925050602083013567ffffffffffffffff811115611c0e57611c0d6116fa565b5b611c1a85828601611b9a565b9150509250929050565b600060808284031215611c3a57611c396119c4565b5b81905092915050565b60008060008060008060e08789031215611c6057611c5f6116f5565b5b600087013567ffffffffffffffff811115611c7e57611c7d6116fa565b5b611c8a89828a01611744565b96509650506020611c9d89828a016118be565b9450506040611cae89828a01611c24565b93505060c087013567ffffffffffffffff811115611ccf57611cce6116fa565b5b611cdb89828a01611744565b92509250509295509295509295565b60008060008060808587031215611d0457611d036116f5565b5b6000611d1287828801611720565b9450506020611d2387828801611a72565b9350506040611d3487828801611a72565b9250506060611d45878288016118be565b91505092959194509250565b600060208284031215611d6757611d666116f5565b5b6000611d7584828501611a72565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001608003833603038112611dd857611dd7611dad565b5b80830191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e1e8261189d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e5157611e50611de4565b5b600182019050919050565b600082825260208201905092915050565b6000611e798385611e5c565b9350611e86838584611b49565b611e8f83611a8c565b840190509392505050565b60006040820190508181036000830152611eb5818587611e6d565b9050611ec46020830184611a31565b949350505050565b600082825260208201905092915050565b7f4845584c30313500000000000000000000000000000000000000000000000000600082015250565b6000611f13600783611ecc565b9150611f1e82611edd565b602082019050919050565b60006020820190508181036000830152611f4281611f06565b9050919050565b6000611f586020840184611a72565b905092915050565b611f6981611988565b82525050565b6000611f7e60208401846118be565b905092915050565b611f8f8161189d565b82525050565b60808201611fa66000830183611f49565b611fb36000850182611f60565b50611fc16020830183611f49565b611fce6020850182611f60565b50611fdc6040830183611f49565b611fe96040850182611f60565b50611ff76060830183611f6f565b6120046060850182611f86565b50505050565b600060c0820190508181036000830152612025818688611e6d565b90506120346020830185611a31565b6120416040830184611f95565b95945050505050565b60006120558261189d565b91506120608361189d565b92508282101561207357612072611de4565b5b828203905092915050565b6000604082019050612093600083018561199a565b6120a06020830184611a31565b9392505050565b60008115159050919050565b6120bc816120a7565b81146120c757600080fd5b50565b6000815190506120d9816120b3565b92915050565b6000602082840312156120f5576120f46116f5565b5b6000612103848285016120ca565b91505092915050565b612115816116ff565b82525050565b6000604082019050612130600083018661210c565b8181036020830152612143818486611e6d565b9050949350505050565b61215681611695565b811461216157600080fd5b50565b6000815190506121738161214d565b92915050565b60006020828403121561218f5761218e6116f5565b5b600061219d84828501612164565b91505092915050565b60008160e01c9050919050565b600060033d11156121d25760046000803e6121cf6000516121a6565b90505b90565b600060443d10156121e557612268565b6121ed6116eb565b60043d036004823e80513d602482011167ffffffffffffffff82111715612215575050612268565b808201805167ffffffffffffffff8111156122335750505050612268565b80602083010160043d038501811115612250575050505050612268565b61225f82602001850186611acc565b82955050505050505b90565b600081519050919050565b60005b83811015612294578082015181840152602081019050612279565b838111156122a3576000848401525b50505050565b60006122b48261226b565b6122be8185611ecc565b93506122ce818560208601612276565b6122d781611a8c565b840191505092915050565b600060208201905081810360008301526122fc81846122a9565b905092915050565b7f4845584c41303033000000000000000000000000000000000000000000000000600082015250565b600061233a600883611ecc565b915061234582612304565b602082019050919050565b600060208201905081810360008301526123698161232d565b9050919050565b7f4845584c41303032000000000000000000000000000000000000000000000000600082015250565b60006123a6600883611ecc565b91506123b182612370565b602082019050919050565b600060208201905081810360008301526123d581612399565b9050919050565b7f4845584c41303034000000000000000000000000000000000000000000000000600082015250565b6000612412600883611ecc565b915061241d826123dc565b602082019050919050565b6000602082019050818103600083015261244181612405565b9050919050565b7f4845584c41303131000000000000000000000000000000000000000000000000600082015250565b600061247e600883611ecc565b915061248982612448565b602082019050919050565b600060208201905081810360008301526124ad81612471565b9050919050565b600080833560016020038436030381126124d1576124d0611dad565b5b80840192508235915067ffffffffffffffff8211156124f3576124f2611db2565b5b60208301925060018202360383131561250f5761250e611db7565b5b509250929050565b600081905092915050565b600061252e8385612517565b935061253b838584611b49565b82840190509392505050565b6000612554828486612522565b91508190509392505050565b7f4845584c41303038000000000000000000000000000000000000000000000000600082015250565b6000612596600883611ecc565b91506125a182612560565b602082019050919050565b600060208201905081810360008301526125c581612589565b9050919050565b60006125d78261189d565b91506125e28361189d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561261757612616611de4565b5b828201905092915050565b600061262d8261189d565b91506126388361189d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561267157612670611de4565b5b828202905092915050565b60008151905061268b816118a7565b92915050565b6000602082840312156126a7576126a66116f5565b5b60006126b58482850161267c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126f88261189d565b91506127038361189d565b925082612713576127126126be565b5b828204905092915050565b50565b600061272e600083611e5c565b91506127398261271e565b600082019050919050565b6000608082019050612759600083018661199a565b6127666020830185611a31565b612773604083018461199a565b818103606083015261278481612721565b9050949350505050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006127c4601d83611ecc565b91506127cf8261278e565b602082019050919050565b600060208201905081810360008301526127f3816127b7565b9050919050565b6000612807600083612517565b91506128128261271e565b600082019050919050565b6000612828826127fa565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061288e603a83611ecc565b915061289982612832565b604082019050919050565b600060208201905081810360008301526128bd81612881565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612905601c836128c4565b9150612910826128cf565b601c82019050919050565b6000819050919050565b612936612931826116ff565b61291b565b82525050565b6000612947826128f8565b91506129538284612925565b60208201915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006129be602683611ecc565b91506129c982612962565b604082019050919050565b600060208201905081810360008301526129ed816129b1565b9050919050565b600081519050919050565b6000612a0a826129f4565b612a148185612517565b9350612a24818560208601612276565b80840191505092915050565b6000612a3c82846129ff565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612aac601883611ecc565b9150612ab782612a76565b602082019050919050565b60006020820190508181036000830152612adb81612a9f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612b18601f83611ecc565b9150612b2382612ae2565b602082019050919050565b60006020820190508181036000830152612b4781612b0b565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612baa602283611ecc565b9150612bb582612b4e565b604082019050919050565b60006020820190508181036000830152612bd981612b9d565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c16601d83611ecc565b9150612c2182612be0565b602082019050919050565b60006020820190508181036000830152612c4581612c09565b9050919050565b600060ff82169050919050565b612c6281612c4c565b82525050565b6000608082019050612c7d600083018761210c565b612c8a6020830186612c59565b612c97604083018561210c565b612ca4606083018461210c565b9594505050505056fea2646970667358221220d9b70c30aad5ec765068898291d33beab0cc961b21ad636ff082f363c746b84664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063affed0e011610059578063affed0e0146101bb578063c0d91eaf146101e6578063cff834fe1461020f578063e5eb95841461022b578063f2fde38b146102545761009c565b80631626ba7e146100ff5780638479cc0f1461013c5780638c88d380146101585780638da5cb5b14610174578063a8c943461461019f5761009c565b3661009c57005b3480156100a857600080fd5b5060003660606000357fffffffff00000000000000000000000000000000000000000000000000000000166040516020016100e391906116d0565b6040516020818303038152906040529050915050805190602001f35b34801561010b57600080fd5b506101266004803603810190610121919061179a565b61027d565b60405161013391906116d0565b60405180910390f35b61015660048036038101906101519190611850565b61029b565b005b610172600480360381019061016d91906118d3565b6102fc565b005b34801561018057600080fd5b50610189610343565b60405161019691906119a9565b60405180910390f35b6101b960048036038101906101b491906119e8565b610352565b005b3480156101c757600080fd5b506101d0610366565b6040516101dd9190611a40565b60405180910390f35b3480156101f257600080fd5b5061020d60048036038101906102089190611bc8565b61036f565b005b61022960048036038101906102249190611c43565b61048c565b005b34801561023757600080fd5b50610252600480360381019061024d9190611cea565b6104f2565b005b34801561026057600080fd5b5061027b60048036038101906102769190611d51565b610624565b005b600061028a84848461069c565b631626ba7e60e01b90509392505050565b6102a361095e565b600082829050905060005b818110156102f6576102e38484838181106102cc576102cb611d7e565b5b90506020028101906102de9190611dbc565b610a0b565b80806102ee90611e13565b9150506102ae565b50505050565b6000858560005460405160200161031593929190611e9a565b60405160208183030381529060405280519060200120905061033b818787878787610b01565b505050505050565b600061034d610c1f565b905090565b61035a61095e565b61036381610a0b565b50565b60008054905090565b600073ffffffffffffffffffffffffffffffffffffffff1661038f610c1f565b73ffffffffffffffffffffffffffffffffffffffff161480156103df5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b61041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590611f29565b60405180910390fd5b61042782610c52565b610487816040518060400160405280600781526020017f4845584c303133000000000000000000000000000000000000000000000000008152503073ffffffffffffffffffffffffffffffffffffffff16610c5e9092919063ffffffff16565b505050565b60005a905060008787600054876040516020016104ac949392919061200a565b6040516020818303038152906040528051906020012090506104d2818989898888610b01565b6104e7855a846104e2919061204a565b610c76565b505050505050505050565b6104fa61095e565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561053e576105398382610fd1565b6105cd565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161057992919061207e565b602060405180830381600087803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb91906120df565b505b8273ffffffffffffffffffffffffffffffffffffffff16847fc95ddcaddf83340b68d0d44c01b1703f5d28d0611a3fd87e69d79ba7e2ac21d3848460405161061692919061207e565b60405180910390a350505050565b61062c610c1f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610690576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61069981610c52565b50565b60006106a6610343565b905060006106b3856110c5565b90506106d48273ffffffffffffffffffffffffffffffffffffffff166110f5565b15610892578173ffffffffffffffffffffffffffffffffffffffff16631626ba7e8286866040518463ffffffff1660e01b81526004016107169392919061211b565b60206040518083038186803b15801561072e57600080fd5b505afa92505050801561075f57506040513d601f19601f8201168201806040525081019061075c9190612179565b60015b6108055761076b6121b3565b806308c379a014156107c857506107806121d5565b8061078b57506107ca565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bf91906122e2565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90612350565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461088c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610883906123bc565b60405180910390fd5b50610957565b6108e984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508261111890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d90612428565b60405180910390fd5b5b5050505050565b610966610343565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109ca57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0090612494565b60405180910390fd5b565b600080826000016020810190610a219190611d51565b73ffffffffffffffffffffffffffffffffffffffff1683602001356000856060013514610a52578460600135610a54565b5a5b90858060400190610a6591906124b4565b604051610a73929190612547565b600060405180830381858888f193505050503d8060008114610ab1576040519150601f19603f3d011682016040523d82523d6000602084013e610ab6565b606091505b5091509150610afb82826040518060400160405280600881526020017f4845584c4130303100000000000000000000000000000000000000000000000081525061113f565b50505050565b82600080815480929190610b1490611e13565b9190505514610b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4f906125ac565b60405180910390fd5b610b6386838361069c565b6000803073ffffffffffffffffffffffffffffffffffffffff168787604051610b8d929190612547565b6000604051808303816000865af19150503d8060008114610bca576040519150601f19603f3d011682016040523d82523d6000602084013e610bcf565b606091505b5091509150610c1482826040518060400160405280600881526020017f4845584c4130303900000000000000000000000000000000000000000000000081525061113f565b505050505050505050565b6000610c29611161565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c5b8161118e565b50565b6060610c6d848460008561125f565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16836020016020810190610ca29190611d51565b73ffffffffffffffffffffffffffffffffffffffff1614610f4a5762013880836060013583610cd191906125cc565b610cdb91906125cc565b91503a82610ce99190612622565b90506000836000016020810190610d009190611d51565b73ffffffffffffffffffffffffffffffffffffffff1663b95ed06f856020016020810190610d2e9190611d51565b6040518263ffffffff1660e01b8152600401610d4a91906119a9565b60206040518083038186803b158015610d6257600080fd5b505afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190612691565b905060006001670de0b6b3a76400008385610db59190612622565b610dbf91906126ed565b610dc991906125cc565b9050846020016020810190610dde9190611d51565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3866000016020810190610e0c9190611d51565b836040518363ffffffff1660e01b8152600401610e2a92919061207e565b602060405180830381600087803b158015610e4457600080fd5b505af1158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c91906120df565b50846000016020810190610e909190611d51565b73ffffffffffffffffffffffffffffffffffffffff16632b23c4d0866020016020810190610ebe9190611d51565b85886040016020810190610ed29190611d51565b6040518463ffffffff1660e01b8152600401610ef093929190612744565b602060405180830381600087803b158015610f0a57600080fd5b505af1158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190612691565b505050610f94565b61c350836060013583610f5d91906125cc565b610f6791906125cc565b91503a82610f759190612622565b9050610f93836040016020810190610f8d9190611d51565b82610fd1565b5b7fafa36a02a5681da91c622c07a6beef894428bbeaa07e97a875d711afca4aced181604051610fc39190611a40565b60405180910390a192915050565b80471015611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b906127da565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161103a9061281d565b60006040518083038185875af1925050503d8060008114611077576040519150601f19603f3d011682016040523d82523d6000602084013e61107c565b606091505b50509050806110c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b7906128a4565b60405180910390fd5b505050565b6000816040516020016110d8919061293c565b604051602081830303815290604052805190602001209050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000806000611127858561132c565b915091506111348161137e565b819250505092915050565b6060831561114f5782905061115a565b61115983836114ec565b5b9392505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000611198611161565b90508173ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6060824710156112a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129b906129d4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112cd9190612a30565b60006040518083038185875af1925050503d806000811461130a576040519150601f19603f3d011682016040523d82523d6000602084013e61130f565b606091505b50915091506113208783838761153c565b92505050949350505050565b60008060418351141561136e5760008060006020860151925060408601519150606086015160001a9050611362878285856115b2565b94509450505050611377565b60006002915091505b9250929050565b6000600481111561139257611391612a47565b5b8160048111156113a5576113a4612a47565b5b14156113b0576114e9565b600160048111156113c4576113c3612a47565b5b8160048111156113d7576113d6612a47565b5b1415611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f90612ac2565b60405180910390fd5b6002600481111561142c5761142b612a47565b5b81600481111561143f5761143e612a47565b5b1415611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147790612b2e565b60405180910390fd5b6003600481111561149457611493612a47565b5b8160048111156114a7576114a6612a47565b5b14156114e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df90612bc0565b60405180910390fd5b5b50565b6000825111156114ff5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153391906122e2565b60405180910390fd5b6060831561159f5760008351141561159757611557856110f5565b611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158d90612c2c565b60405180910390fd5b5b8290506115aa565b6115a983836114ec565b5b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156115ed57600060039150915061168c565b6000600187878787604051600081526020016040526040516116129493929190612c68565b6020604051602081039080840390855afa158015611634573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116835760006001925092505061168c565b80600092509250505b94509492505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116ca81611695565b82525050565b60006020820190506116e560008301846116c1565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611712816116ff565b811461171d57600080fd5b50565b60008135905061172f81611709565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261175a57611759611735565b5b8235905067ffffffffffffffff8111156117775761177661173a565b5b6020830191508360018202830111156117935761179261173f565b5b9250929050565b6000806000604084860312156117b3576117b26116f5565b5b60006117c186828701611720565b935050602084013567ffffffffffffffff8111156117e2576117e16116fa565b5b6117ee86828701611744565b92509250509250925092565b60008083601f8401126118105761180f611735565b5b8235905067ffffffffffffffff81111561182d5761182c61173a565b5b6020830191508360208202830111156118495761184861173f565b5b9250929050565b60008060208385031215611867576118666116f5565b5b600083013567ffffffffffffffff811115611885576118846116fa565b5b611891858286016117fa565b92509250509250929050565b6000819050919050565b6118b08161189d565b81146118bb57600080fd5b50565b6000813590506118cd816118a7565b92915050565b6000806000806000606086880312156118ef576118ee6116f5565b5b600086013567ffffffffffffffff81111561190d5761190c6116fa565b5b61191988828901611744565b9550955050602061192c888289016118be565b935050604086013567ffffffffffffffff81111561194d5761194c6116fa565b5b61195988828901611744565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061199382611968565b9050919050565b6119a381611988565b82525050565b60006020820190506119be600083018461199a565b92915050565b600080fd5b6000608082840312156119df576119de6119c4565b5b81905092915050565b6000602082840312156119fe576119fd6116f5565b5b600082013567ffffffffffffffff811115611a1c57611a1b6116fa565b5b611a28848285016119c9565b91505092915050565b611a3a8161189d565b82525050565b6000602082019050611a556000830184611a31565b92915050565b611a6481611988565b8114611a6f57600080fd5b50565b600081359050611a8181611a5b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ad582611a8c565b810181811067ffffffffffffffff82111715611af457611af3611a9d565b5b80604052505050565b6000611b076116eb565b9050611b138282611acc565b919050565b600067ffffffffffffffff821115611b3357611b32611a9d565b5b611b3c82611a8c565b9050602081019050919050565b82818337600083830152505050565b6000611b6b611b6684611b18565b611afd565b905082815260208101848484011115611b8757611b86611a87565b5b611b92848285611b49565b509392505050565b600082601f830112611baf57611bae611735565b5b8135611bbf848260208601611b58565b91505092915050565b60008060408385031215611bdf57611bde6116f5565b5b6000611bed85828601611a72565b925050602083013567ffffffffffffffff811115611c0e57611c0d6116fa565b5b611c1a85828601611b9a565b9150509250929050565b600060808284031215611c3a57611c396119c4565b5b81905092915050565b60008060008060008060e08789031215611c6057611c5f6116f5565b5b600087013567ffffffffffffffff811115611c7e57611c7d6116fa565b5b611c8a89828a01611744565b96509650506020611c9d89828a016118be565b9450506040611cae89828a01611c24565b93505060c087013567ffffffffffffffff811115611ccf57611cce6116fa565b5b611cdb89828a01611744565b92509250509295509295509295565b60008060008060808587031215611d0457611d036116f5565b5b6000611d1287828801611720565b9450506020611d2387828801611a72565b9350506040611d3487828801611a72565b9250506060611d45878288016118be565b91505092959194509250565b600060208284031215611d6757611d666116f5565b5b6000611d7584828501611a72565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001608003833603038112611dd857611dd7611dad565b5b80830191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e1e8261189d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e5157611e50611de4565b5b600182019050919050565b600082825260208201905092915050565b6000611e798385611e5c565b9350611e86838584611b49565b611e8f83611a8c565b840190509392505050565b60006040820190508181036000830152611eb5818587611e6d565b9050611ec46020830184611a31565b949350505050565b600082825260208201905092915050565b7f4845584c30313500000000000000000000000000000000000000000000000000600082015250565b6000611f13600783611ecc565b9150611f1e82611edd565b602082019050919050565b60006020820190508181036000830152611f4281611f06565b9050919050565b6000611f586020840184611a72565b905092915050565b611f6981611988565b82525050565b6000611f7e60208401846118be565b905092915050565b611f8f8161189d565b82525050565b60808201611fa66000830183611f49565b611fb36000850182611f60565b50611fc16020830183611f49565b611fce6020850182611f60565b50611fdc6040830183611f49565b611fe96040850182611f60565b50611ff76060830183611f6f565b6120046060850182611f86565b50505050565b600060c0820190508181036000830152612025818688611e6d565b90506120346020830185611a31565b6120416040830184611f95565b95945050505050565b60006120558261189d565b91506120608361189d565b92508282101561207357612072611de4565b5b828203905092915050565b6000604082019050612093600083018561199a565b6120a06020830184611a31565b9392505050565b60008115159050919050565b6120bc816120a7565b81146120c757600080fd5b50565b6000815190506120d9816120b3565b92915050565b6000602082840312156120f5576120f46116f5565b5b6000612103848285016120ca565b91505092915050565b612115816116ff565b82525050565b6000604082019050612130600083018661210c565b8181036020830152612143818486611e6d565b9050949350505050565b61215681611695565b811461216157600080fd5b50565b6000815190506121738161214d565b92915050565b60006020828403121561218f5761218e6116f5565b5b600061219d84828501612164565b91505092915050565b60008160e01c9050919050565b600060033d11156121d25760046000803e6121cf6000516121a6565b90505b90565b600060443d10156121e557612268565b6121ed6116eb565b60043d036004823e80513d602482011167ffffffffffffffff82111715612215575050612268565b808201805167ffffffffffffffff8111156122335750505050612268565b80602083010160043d038501811115612250575050505050612268565b61225f82602001850186611acc565b82955050505050505b90565b600081519050919050565b60005b83811015612294578082015181840152602081019050612279565b838111156122a3576000848401525b50505050565b60006122b48261226b565b6122be8185611ecc565b93506122ce818560208601612276565b6122d781611a8c565b840191505092915050565b600060208201905081810360008301526122fc81846122a9565b905092915050565b7f4845584c41303033000000000000000000000000000000000000000000000000600082015250565b600061233a600883611ecc565b915061234582612304565b602082019050919050565b600060208201905081810360008301526123698161232d565b9050919050565b7f4845584c41303032000000000000000000000000000000000000000000000000600082015250565b60006123a6600883611ecc565b91506123b182612370565b602082019050919050565b600060208201905081810360008301526123d581612399565b9050919050565b7f4845584c41303034000000000000000000000000000000000000000000000000600082015250565b6000612412600883611ecc565b915061241d826123dc565b602082019050919050565b6000602082019050818103600083015261244181612405565b9050919050565b7f4845584c41303131000000000000000000000000000000000000000000000000600082015250565b600061247e600883611ecc565b915061248982612448565b602082019050919050565b600060208201905081810360008301526124ad81612471565b9050919050565b600080833560016020038436030381126124d1576124d0611dad565b5b80840192508235915067ffffffffffffffff8211156124f3576124f2611db2565b5b60208301925060018202360383131561250f5761250e611db7565b5b509250929050565b600081905092915050565b600061252e8385612517565b935061253b838584611b49565b82840190509392505050565b6000612554828486612522565b91508190509392505050565b7f4845584c41303038000000000000000000000000000000000000000000000000600082015250565b6000612596600883611ecc565b91506125a182612560565b602082019050919050565b600060208201905081810360008301526125c581612589565b9050919050565b60006125d78261189d565b91506125e28361189d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561261757612616611de4565b5b828201905092915050565b600061262d8261189d565b91506126388361189d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561267157612670611de4565b5b828202905092915050565b60008151905061268b816118a7565b92915050565b6000602082840312156126a7576126a66116f5565b5b60006126b58482850161267c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126f88261189d565b91506127038361189d565b925082612713576127126126be565b5b828204905092915050565b50565b600061272e600083611e5c565b91506127398261271e565b600082019050919050565b6000608082019050612759600083018661199a565b6127666020830185611a31565b612773604083018461199a565b818103606083015261278481612721565b9050949350505050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006127c4601d83611ecc565b91506127cf8261278e565b602082019050919050565b600060208201905081810360008301526127f3816127b7565b9050919050565b6000612807600083612517565b91506128128261271e565b600082019050919050565b6000612828826127fa565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061288e603a83611ecc565b915061289982612832565b604082019050919050565b600060208201905081810360008301526128bd81612881565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612905601c836128c4565b9150612910826128cf565b601c82019050919050565b6000819050919050565b612936612931826116ff565b61291b565b82525050565b6000612947826128f8565b91506129538284612925565b60208201915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006129be602683611ecc565b91506129c982612962565b604082019050919050565b600060208201905081810360008301526129ed816129b1565b9050919050565b600081519050919050565b6000612a0a826129f4565b612a148185612517565b9350612a24818560208601612276565b80840191505092915050565b6000612a3c82846129ff565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612aac601883611ecc565b9150612ab782612a76565b602082019050919050565b60006020820190508181036000830152612adb81612a9f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612b18601f83611ecc565b9150612b2382612ae2565b602082019050919050565b60006020820190508181036000830152612b4781612b0b565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612baa602283611ecc565b9150612bb582612b4e565b604082019050919050565b60006020820190508181036000830152612bd981612b9d565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c16601d83611ecc565b9150612c2182612be0565b602082019050919050565b60006020820190508181036000830152612c4581612c09565b9050919050565b600060ff82169050919050565b612c6281612c4c565b82525050565b6000608082019050612c7d600083018761210c565b612c8a6020830186612c59565b612c97604083018561210c565b612ca4606083018461210c565b9594505050505056fea2646970667358221220d9b70c30aad5ec765068898291d33beab0cc961b21ad636ff082f363c746b84664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2844,
        "contract": "contracts/account/AccountSimple.sol:AccountSimple",
        "label": "nonce_",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}