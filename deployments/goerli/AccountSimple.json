{
  "address": "0x550f0B044b5FeB2370dC549fB73C76c7189fD8F0",
  "abi": [
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotTransitiveOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "request",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "GasPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct BasicUserOp",
          "name": "op",
          "type": "tuple"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct BasicUserOp[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "execBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "core",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "refundReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct AccountSimple.GasObject",
          "name": "gas",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateAndCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3c96bee71d697261cfd558d5389e8b735cf4e07d6c169a38202c1f40a7013d25",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0x550f0B044b5FeB2370dC549fB73C76c7189fD8F0",
    "transactionIndex": 45,
    "gasUsed": "2122733",
    "logsBloom": "0x
    "blockHash": "0x971ea52d53017a696eee034f78b29d854fd48b8dacea6c3f5816ab463eaeb24f",
    "transactionHash": "0x3c96bee71d697261cfd558d5389e8b735cf4e07d6c169a38202c1f40a7013d25",
    "logs": [],
    "blockNumber": 8218162,
    "cumulativeGasUsed": "10057890",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4330f978c8bef561affc504ecb159e90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"GasPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct BasicUserOp\",\"name\":\"op\",\"type\":\"tuple\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct BasicUserOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"execBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"core\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"}],\"internalType\":\"struct AccountSimple.GasObject\",\"name\":\"gas\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/account/AccountSimple.sol\":\"AccountSimple\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\",\"keccak256\":\"0xd2d21c507ed587cd5de6cc016d4b9c7e956e468108b784455a400301707031c1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe16b09090c1251f8cc97fb2cc10c86675e0d0d9f0fc0032b417c37c8dba2db5f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x0185d24250a5e6fbafce443b9ba19bba761803e3e5d91ba423bfb1f5f0bbdbf9\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7385e2020de914f75cabdc83c6adf88ed21e9de14669a89b3832b80f4f8c7b73\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/account/AccountBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\n/* solhint-disable avoid-low-level-calls */\\n\\nimport \\\"@solidstate/contracts/access/ownable/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IAccount.sol\\\";\\n\\nabstract contract AccountBase is IERC1271, IAccount, Ownable {\\n    using Address for address;\\n    using ECDSA for bytes32;\\n\\n    receive() external payable { }\\n\\n    fallback(bytes calldata) external returns (bytes memory) {\\n        // for ERC1155 and ERC3525\\n        return abi.encode(msg.sig);\\n    }\\n\\n    function isValidSignature(\\n        bytes32 message,\\n        bytes calldata signature\\n    ) external override view returns(bytes4) {\\n        _validateSignature(message, signature);\\n        return IERC1271.isValidSignature.selector;\\n    }\\n\\n    function execBatch(BasicUserOp[] calldata ops) external override {\\n        _validateCaller();\\n        uint256 opsLen = ops.length;\\n        for (uint256 i = 0; i < opsLen; i++) {\\n            _exec(ops[i]);\\n        }\\n    }\\n\\n    function exec(BasicUserOp calldata op) external override {\\n        _validateCaller();\\n        _exec(op);\\n    }\\n\\n    function _exec(BasicUserOp calldata op) internal {\\n        (\\n            bool success,\\n            bytes memory data\\n        ) = op.to.call{\\n            value: op.value,\\n            gas: op.callGasLimit == 0 ? gasleft() : op.callGasLimit\\n        }(op.callData);\\n        Address.verifyCallResult(success, data, \\\"HEXLA001\\\");\\n    }\\n\\n    function _validateSignature(bytes32 message, bytes calldata signature) internal view {\\n        address signer = owner();\\n        bytes32 reqHash = message.toEthSignedMessageHash();\\n        if (signer.isContract()) {\\n            try IERC1271(signer).isValidSignature(reqHash, signature) returns (bytes4 returnvalue) {\\n                require(returnvalue == IERC1271.isValidSignature.selector, \\\"HEXLA002\\\");\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"HEXLA003\\\");\\n            }\\n        } else {\\n            require(signer == reqHash.recover(signature), \\\"HEXLA004\\\");\\n        }\\n    }\\n\\n    function _validateCaller() internal virtual;\\n}\\n\",\"keccak256\":\"0x300f1b99b1d596799c391e548194afb8ec68452cabd0f00ae183c9108f5bdece\",\"license\":\"Unlicense\"},\"contracts/account/AccountSimple.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./AccountBase.sol\\\";\\n\\ncontract AccountSimple is AccountBase {\\n    using Address for address;\\n\\n    event GasPayment(bytes32 indexed request, uint256 payment);\\n\\n    struct GasObject {\\n        address token;\\n        uint256 price;\\n        uint256 core;\\n        uint256 base;\\n        address payable refundReceiver;\\n    }\\n    uint256 private nonce_;\\n    \\n    function init(address owner) external {\\n        require(_owner() == address(0), \\\"HEXL015\\\");\\n        require(owner != address(0), \\\"HEXL019\\\");\\n        _transferOwnership(owner);\\n    }\\n\\n    function nonce() external view returns(uint256) {\\n        return nonce_;\\n    }\\n\\n    function validateAndCall(\\n        bytes calldata txData,\\n        GasObject calldata gas, // gas settings\\n        uint256 _nonce,\\n        bytes calldata signature\\n    ) external {\\n        uint256 gasUsed = gasleft();\\n        bytes32 requestId = keccak256(abi.encode(txData, gas, nonce_));\\n        require(nonce_++ == _nonce, \\\"HEXLA008\\\");\\n        _validateSignature(requestId, signature);\\n        uint256 gaslimit = gas.core == 0 ? gasleft() : gas.core;\\n        (bool success,) = address(this).call{gas: gaslimit}(txData);\\n        require(success, \\\"HEXLA009\\\");\\n        uint256 payment = handlePayment(gasUsed - gasleft() + gas.base, gas);\\n        emit GasPayment(requestId, payment);\\n    }\\n\\n    function _validateCaller() internal view override {\\n        require(msg.sender == owner() || msg.sender == address(this), \\\"HEXLA011\\\");\\n    }\\n\\n    function handlePayment(\\n        uint256 gasUsed,\\n        GasObject calldata gas\\n    ) private returns (uint256 payment) {\\n        address payable receiver = gas.refundReceiver == address(0)\\n            ? payable(tx.origin)\\n            : gas.refundReceiver;\\n        if (gas.token == address(0)) {\\n            uint256 price = gas.price == 0 ? tx.gasprice : gas.price;\\n            payment = (gasUsed + gas.base) * price;\\n            Address.sendValue(receiver, payment);\\n        } else {\\n            payment = (gasUsed + gas.base) * gas.price;\\n            require(transferToken(gas.token, receiver, payment), \\\"HEXLA013\\\");\\n        }\\n    }\\n\\n    /// @dev Transfers a token and returns if it was a success\\n    /// @param token Token that should be transferred\\n    /// @param receiver Receiver to whom the token should be transferred\\n    /// @param amount The amount of tokens that should be transferred\\n    function transferToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n                case 0 {\\n                    transferred := success\\n                }\\n                case 0x20 {\\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\\n                }\\n                default {\\n                    transferred := 0\\n                }\\n        }\\n    }\\n}\",\"keccak256\":\"0x9c3a7d0e72524b286b1b22b2fec6933d1b8fb850ce2aa868eb67480258b5728f\",\"license\":\"Unlicense\"},\"contracts/account/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Hexlink Contracts\\n\\npragma solidity ^0.8.8;\\n\\nstruct BasicUserOp {\\n    address to;\\n    uint256 value;\\n    bytes callData;\\n    uint256 callGasLimit;\\n}\\n\\ninterface IAccount {\\n    function execBatch(BasicUserOp[] calldata ops) external;\\n\\n    function exec(BasicUserOp calldata op) external;\\n}\",\"keccak256\":\"0xd05487ee1f6a32980f4ff9aa86fea106ddbfdc7c5d25d064de2e2d82e3060130\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506125a6806100206000396000f3fe60806040526004361061007f5760003560e01c80638da5cb5b1161004e5780638da5cb5b146101a1578063a8c94346146101cc578063affed0e0146101f5578063f2fde38b1461022057610086565b80631626ba7e146100e957806319ab453c14610126578063729fcf101461014f5780638479cc0f1461017857610086565b3661008657005b34801561009257600080fd5b5060003660606000357fffffffff00000000000000000000000000000000000000000000000000000000166040516020016100cd91906112b2565b6040516020818303038152906040529050915050805190602001f35b3480156100f557600080fd5b50610110600480360381019061010b919061137c565b610249565b60405161011d91906112b2565b60405180910390f35b34801561013257600080fd5b5061014d6004803603810190610148919061143a565b610267565b005b34801561015b57600080fd5b50610176600480360381019061017191906114c1565b610359565b005b34801561018457600080fd5b5061019f600480360381019061019a91906115bf565b61052c565b005b3480156101ad57600080fd5b506101b661058d565b6040516101c3919061161b565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190611655565b61059c565b005b34801561020157600080fd5b5061020a6105b0565b60405161021791906116ad565b60405180910390f35b34801561022c57600080fd5b506102476004803603810190610242919061143a565b6105b9565b005b6000610256848484610631565b631626ba7e60e01b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff166102876108f3565b73ffffffffffffffffffffffffffffffffffffffff16146102dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d490611725565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561034d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034490611791565b60405180910390fd5b61035681610926565b50565b60005a90506000878787600054604051602001610379949392919061194f565b604051602081830303815290604052805190602001209050846000808154809291906103a4906119be565b91905055146103e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103df90611a53565b60405180910390fd5b6103f3818585610631565b60008087604001351461040a57866040013561040c565b5a5b905060003073ffffffffffffffffffffffffffffffffffffffff16828b8b604051610438929190611aa3565b60006040518083038160008787f1925050503d8060008114610476576040519150601f19603f3d011682016040523d82523d6000602084013e61047b565b606091505b50509050806104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b690611b08565b60405180910390fd5b60006104e589606001355a876104d59190611b28565b6104df9190611b5c565b8a610932565b9050837fae67a4e3ea510ffe267d62d57fec56200beee24da2201c340cc81eea49fbd2da8260405161051791906116ad565b60405180910390a25050505050505050505050565b610534610aab565b600082829050905060005b818110156105875761057484848381811061055d5761055c611bb2565b5b905060200281019061056f9190611bf0565b610b58565b808061057f906119be565b91505061053f565b50505050565b60006105976108f3565b905090565b6105a4610aab565b6105ad81610b58565b50565b60008054905090565b6105c16108f3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610625576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61062e81610926565b50565b600061063b61058d565b9050600061064885610c4e565b90506106698273ffffffffffffffffffffffffffffffffffffffff16610c7e565b15610827578173ffffffffffffffffffffffffffffffffffffffff16631626ba7e8286866040518463ffffffff1660e01b81526004016106ab93929190611c27565b60206040518083038186803b1580156106c357600080fd5b505afa9250505080156106f457506040513d601f19601f820116820180604052508101906106f19190611c85565b60015b61079a57610700611cbf565b806308c379a0141561075d5750610715611d41565b80610720575061075f565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107549190611e4e565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190611ebc565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890611f28565b60405180910390fd5b506108ec565b61087e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610ca190919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e290611f94565b60405180910390fd5b5b5050505050565b60006108fd610cc8565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61092f81610cf5565b50565b600080600073ffffffffffffffffffffffffffffffffffffffff168360800160208101906109609190611fb4565b73ffffffffffffffffffffffffffffffffffffffff16146109935782608001602081019061098e9190611fb4565b610995565b325b9050600073ffffffffffffffffffffffffffffffffffffffff168360000160208101906109c2919061143a565b73ffffffffffffffffffffffffffffffffffffffff161415610a26576000808460200135146109f55783602001356109f7565b3a5b905080846060013586610a0a9190611b5c565b610a149190611fe1565b9250610a208284610dc6565b50610aa4565b8260200135836060013585610a3b9190611b5c565b610a459190611fe1565b9150610a64836000016020810190610a5d919061143a565b8284610eba565b610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90612087565b60405180910390fd5b5b5092915050565b610ab361058d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b1757503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d906120f3565b60405180910390fd5b565b600080826000016020810190610b6e919061143a565b73ffffffffffffffffffffffffffffffffffffffff1683602001356000856060013514610b9f578460600135610ba1565b5a5b90858060400190610bb29190612113565b604051610bc0929190611aa3565b600060405180830381858888f193505050503d8060008114610bfe576040519150601f19603f3d011682016040523d82523d6000602084013e610c03565b606091505b5091509150610c4882826040518060400160405280600881526020017f4845584c41303031000000000000000000000000000000000000000000000000815250610f62565b50505050565b600081604051602001610c6191906121ee565b604051602081830303815290604052805190602001209050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000806000610cb08585610f84565b91509150610cbd81610fd6565b819250505092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000610cff610cc8565b90508173ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b80471015610e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0090612260565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610e2f906122a6565b60006040518083038185875af1925050503d8060008114610e6c576040519150601f19603f3d011682016040523d82523d6000602084013e610e71565b606091505b5050905080610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac9061232d565b60405180910390fd5b505050565b60008063a9059cbb8484604051602401610ed592919061234d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602060008251602084016000896127105a03f13d60008114610f455760208114610f4d5760009350610f58565b819350610f58565b600051158215171593505b5050509392505050565b60608315610f7257829050610f7d565b610f7c8383611144565b5b9392505050565b600080604183511415610fc65760008060006020860151925060408601519150606086015160001a9050610fba87828585611194565b94509450505050610fcf565b60006002915091505b9250929050565b60006004811115610fea57610fe9612376565b5b816004811115610ffd57610ffc612376565b5b141561100857611141565b6001600481111561101c5761101b612376565b5b81600481111561102f5761102e612376565b5b1415611070576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611067906123f1565b60405180910390fd5b6002600481111561108457611083612376565b5b81600481111561109757611096612376565b5b14156110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf9061245d565b60405180910390fd5b600360048111156110ec576110eb612376565b5b8160048111156110ff576110fe612376565b5b1415611140576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611137906124ef565b60405180910390fd5b5b50565b6000825111156111575781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118b9190611e4e565b60405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111cf57600060039150915061126e565b6000600187878787604051600081526020016040526040516111f4949392919061252b565b6020604051602081039080840390855afa158015611216573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112655760006001925092505061126e565b80600092509250505b94509492505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6112ac81611277565b82525050565b60006020820190506112c760008301846112a3565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112f4816112e1565b81146112ff57600080fd5b50565b600081359050611311816112eb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261133c5761133b611317565b5b8235905067ffffffffffffffff8111156113595761135861131c565b5b60208301915083600182028301111561137557611374611321565b5b9250929050565b600080600060408486031215611395576113946112d7565b5b60006113a386828701611302565b935050602084013567ffffffffffffffff8111156113c4576113c36112dc565b5b6113d086828701611326565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611407826113dc565b9050919050565b611417816113fc565b811461142257600080fd5b50565b6000813590506114348161140e565b92915050565b6000602082840312156114505761144f6112d7565b5b600061145e84828501611425565b91505092915050565b600080fd5b600060a0828403121561148257611481611467565b5b81905092915050565b6000819050919050565b61149e8161148b565b81146114a957600080fd5b50565b6000813590506114bb81611495565b92915050565b60008060008060008061010087890312156114df576114de6112d7565b5b600087013567ffffffffffffffff8111156114fd576114fc6112dc565b5b61150989828a01611326565b9650965050602061151c89828a0161146c565b94505060c061152d89828a016114ac565b93505060e087013567ffffffffffffffff81111561154e5761154d6112dc565b5b61155a89828a01611326565b92509250509295509295509295565b60008083601f84011261157f5761157e611317565b5b8235905067ffffffffffffffff81111561159c5761159b61131c565b5b6020830191508360208202830111156115b8576115b7611321565b5b9250929050565b600080602083850312156115d6576115d56112d7565b5b600083013567ffffffffffffffff8111156115f4576115f36112dc565b5b61160085828601611569565b92509250509250929050565b611615816113fc565b82525050565b6000602082019050611630600083018461160c565b92915050565b60006080828403121561164c5761164b611467565b5b81905092915050565b60006020828403121561166b5761166a6112d7565b5b600082013567ffffffffffffffff811115611689576116886112dc565b5b61169584828501611636565b91505092915050565b6116a78161148b565b82525050565b60006020820190506116c2600083018461169e565b92915050565b600082825260208201905092915050565b7f4845584c30313500000000000000000000000000000000000000000000000000600082015250565b600061170f6007836116c8565b915061171a826116d9565b602082019050919050565b6000602082019050818103600083015261173e81611702565b9050919050565b7f4845584c30313900000000000000000000000000000000000000000000000000600082015250565b600061177b6007836116c8565b915061178682611745565b602082019050919050565b600060208201905081810360008301526117aa8161176e565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006117ee83856117b1565b93506117fb8385846117c2565b611804836117d1565b840190509392505050565b600061181e6020840184611425565b905092915050565b61182f816113fc565b82525050565b600061184460208401846114ac565b905092915050565b6118558161148b565b82525050565b6000611866826113dc565b9050919050565b6118768161185b565b811461188157600080fd5b50565b6000813590506118938161186d565b92915050565b60006118a86020840184611884565b905092915050565b6118b98161185b565b82525050565b60a082016118d0600083018361180f565b6118dd6000850182611826565b506118eb6020830183611835565b6118f8602085018261184c565b506119066040830183611835565b611913604085018261184c565b506119216060830183611835565b61192e606085018261184c565b5061193c6080830183611899565b61194960808501826118b0565b50505050565b600060e082019050818103600083015261196a8186886117e2565b905061197960208301856118bf565b61198660c083018461169e565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119c98261148b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119fc576119fb61198f565b5b600182019050919050565b7f4845584c41303038000000000000000000000000000000000000000000000000600082015250565b6000611a3d6008836116c8565b9150611a4882611a07565b602082019050919050565b60006020820190508181036000830152611a6c81611a30565b9050919050565b600081905092915050565b6000611a8a8385611a73565b9350611a978385846117c2565b82840190509392505050565b6000611ab0828486611a7e565b91508190509392505050565b7f4845584c41303039000000000000000000000000000000000000000000000000600082015250565b6000611af26008836116c8565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b6000611b338261148b565b9150611b3e8361148b565b925082821015611b5157611b5061198f565b5b828203905092915050565b6000611b678261148b565b9150611b728361148b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ba757611ba661198f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001608003833603038112611c0c57611c0b611be1565b5b80830191505092915050565b611c21816112e1565b82525050565b6000604082019050611c3c6000830186611c18565b8181036020830152611c4f8184866117e2565b9050949350505050565b611c6281611277565b8114611c6d57600080fd5b50565b600081519050611c7f81611c59565b92915050565b600060208284031215611c9b57611c9a6112d7565b5b6000611ca984828501611c70565b91505092915050565b60008160e01c9050919050565b600060033d1115611cde5760046000803e611cdb600051611cb2565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d19826117d1565b810181811067ffffffffffffffff82111715611d3857611d37611ce1565b5b80604052505050565b600060443d1015611d5157611dd4565b611d596112cd565b60043d036004823e80513d602482011167ffffffffffffffff82111715611d81575050611dd4565b808201805167ffffffffffffffff811115611d9f5750505050611dd4565b80602083010160043d038501811115611dbc575050505050611dd4565b611dcb82602001850186611d10565b82955050505050505b90565b600081519050919050565b60005b83811015611e00578082015181840152602081019050611de5565b83811115611e0f576000848401525b50505050565b6000611e2082611dd7565b611e2a81856116c8565b9350611e3a818560208601611de2565b611e43816117d1565b840191505092915050565b60006020820190508181036000830152611e688184611e15565b905092915050565b7f4845584c41303033000000000000000000000000000000000000000000000000600082015250565b6000611ea66008836116c8565b9150611eb182611e70565b602082019050919050565b60006020820190508181036000830152611ed581611e99565b9050919050565b7f4845584c41303032000000000000000000000000000000000000000000000000600082015250565b6000611f126008836116c8565b9150611f1d82611edc565b602082019050919050565b60006020820190508181036000830152611f4181611f05565b9050919050565b7f4845584c41303034000000000000000000000000000000000000000000000000600082015250565b6000611f7e6008836116c8565b9150611f8982611f48565b602082019050919050565b60006020820190508181036000830152611fad81611f71565b9050919050565b600060208284031215611fca57611fc96112d7565b5b6000611fd884828501611884565b91505092915050565b6000611fec8261148b565b9150611ff78361148b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120305761202f61198f565b5b828202905092915050565b7f4845584c41303133000000000000000000000000000000000000000000000000600082015250565b60006120716008836116c8565b915061207c8261203b565b602082019050919050565b600060208201905081810360008301526120a081612064565b9050919050565b7f4845584c41303131000000000000000000000000000000000000000000000000600082015250565b60006120dd6008836116c8565b91506120e8826120a7565b602082019050919050565b6000602082019050818103600083015261210c816120d0565b9050919050565b600080833560016020038436030381126121305761212f611be1565b5b80840192508235915067ffffffffffffffff82111561215257612151611be6565b5b60208301925060018202360383131561216e5761216d611beb565b5b509250929050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006121b7601c83612176565b91506121c282612181565b601c82019050919050565b6000819050919050565b6121e86121e3826112e1565b6121cd565b82525050565b60006121f9826121aa565b915061220582846121d7565b60208201915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b600061224a601d836116c8565b915061225582612214565b602082019050919050565b600060208201905081810360008301526122798161223d565b9050919050565b50565b6000612290600083611a73565b915061229b82612280565b600082019050919050565b60006122b182612283565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000612317603a836116c8565b9150612322826122bb565b604082019050919050565b600060208201905081810360008301526123468161230a565b9050919050565b6000604082019050612362600083018561160c565b61236f602083018461169e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006123db6018836116c8565b91506123e6826123a5565b602082019050919050565b6000602082019050818103600083015261240a816123ce565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612447601f836116c8565b915061245282612411565b602082019050919050565b600060208201905081810360008301526124768161243a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006124d96022836116c8565b91506124e48261247d565b604082019050919050565b60006020820190508181036000830152612508816124cc565b9050919050565b600060ff82169050919050565b6125258161250f565b82525050565b60006080820190506125406000830187611c18565b61254d602083018661251c565b61255a6040830185611c18565b6125676060830184611c18565b9594505050505056fea26469706673582212206b30bbee5d959b518dcd1bb75a269ac671bf799601445f50bd7ac78cab18223d64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80638da5cb5b1161004e5780638da5cb5b146101a1578063a8c94346146101cc578063affed0e0146101f5578063f2fde38b1461022057610086565b80631626ba7e146100e957806319ab453c14610126578063729fcf101461014f5780638479cc0f1461017857610086565b3661008657005b34801561009257600080fd5b5060003660606000357fffffffff00000000000000000000000000000000000000000000000000000000166040516020016100cd91906112b2565b6040516020818303038152906040529050915050805190602001f35b3480156100f557600080fd5b50610110600480360381019061010b919061137c565b610249565b60405161011d91906112b2565b60405180910390f35b34801561013257600080fd5b5061014d6004803603810190610148919061143a565b610267565b005b34801561015b57600080fd5b50610176600480360381019061017191906114c1565b610359565b005b34801561018457600080fd5b5061019f600480360381019061019a91906115bf565b61052c565b005b3480156101ad57600080fd5b506101b661058d565b6040516101c3919061161b565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190611655565b61059c565b005b34801561020157600080fd5b5061020a6105b0565b60405161021791906116ad565b60405180910390f35b34801561022c57600080fd5b506102476004803603810190610242919061143a565b6105b9565b005b6000610256848484610631565b631626ba7e60e01b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff166102876108f3565b73ffffffffffffffffffffffffffffffffffffffff16146102dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d490611725565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561034d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034490611791565b60405180910390fd5b61035681610926565b50565b60005a90506000878787600054604051602001610379949392919061194f565b604051602081830303815290604052805190602001209050846000808154809291906103a4906119be565b91905055146103e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103df90611a53565b60405180910390fd5b6103f3818585610631565b60008087604001351461040a57866040013561040c565b5a5b905060003073ffffffffffffffffffffffffffffffffffffffff16828b8b604051610438929190611aa3565b60006040518083038160008787f1925050503d8060008114610476576040519150601f19603f3d011682016040523d82523d6000602084013e61047b565b606091505b50509050806104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b690611b08565b60405180910390fd5b60006104e589606001355a876104d59190611b28565b6104df9190611b5c565b8a610932565b9050837fae67a4e3ea510ffe267d62d57fec56200beee24da2201c340cc81eea49fbd2da8260405161051791906116ad565b60405180910390a25050505050505050505050565b610534610aab565b600082829050905060005b818110156105875761057484848381811061055d5761055c611bb2565b5b905060200281019061056f9190611bf0565b610b58565b808061057f906119be565b91505061053f565b50505050565b60006105976108f3565b905090565b6105a4610aab565b6105ad81610b58565b50565b60008054905090565b6105c16108f3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610625576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61062e81610926565b50565b600061063b61058d565b9050600061064885610c4e565b90506106698273ffffffffffffffffffffffffffffffffffffffff16610c7e565b15610827578173ffffffffffffffffffffffffffffffffffffffff16631626ba7e8286866040518463ffffffff1660e01b81526004016106ab93929190611c27565b60206040518083038186803b1580156106c357600080fd5b505afa9250505080156106f457506040513d601f19601f820116820180604052508101906106f19190611c85565b60015b61079a57610700611cbf565b806308c379a0141561075d5750610715611d41565b80610720575061075f565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107549190611e4e565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190611ebc565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890611f28565b60405180910390fd5b506108ec565b61087e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610ca190919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e290611f94565b60405180910390fd5b5b5050505050565b60006108fd610cc8565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61092f81610cf5565b50565b600080600073ffffffffffffffffffffffffffffffffffffffff168360800160208101906109609190611fb4565b73ffffffffffffffffffffffffffffffffffffffff16146109935782608001602081019061098e9190611fb4565b610995565b325b9050600073ffffffffffffffffffffffffffffffffffffffff168360000160208101906109c2919061143a565b73ffffffffffffffffffffffffffffffffffffffff161415610a26576000808460200135146109f55783602001356109f7565b3a5b905080846060013586610a0a9190611b5c565b610a149190611fe1565b9250610a208284610dc6565b50610aa4565b8260200135836060013585610a3b9190611b5c565b610a459190611fe1565b9150610a64836000016020810190610a5d919061143a565b8284610eba565b610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90612087565b60405180910390fd5b5b5092915050565b610ab361058d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b1757503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d906120f3565b60405180910390fd5b565b600080826000016020810190610b6e919061143a565b73ffffffffffffffffffffffffffffffffffffffff1683602001356000856060013514610b9f578460600135610ba1565b5a5b90858060400190610bb29190612113565b604051610bc0929190611aa3565b600060405180830381858888f193505050503d8060008114610bfe576040519150601f19603f3d011682016040523d82523d6000602084013e610c03565b606091505b5091509150610c4882826040518060400160405280600881526020017f4845584c41303031000000000000000000000000000000000000000000000000815250610f62565b50505050565b600081604051602001610c6191906121ee565b604051602081830303815290604052805190602001209050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000806000610cb08585610f84565b91509150610cbd81610fd6565b819250505092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000610cff610cc8565b90508173ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b80471015610e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0090612260565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610e2f906122a6565b60006040518083038185875af1925050503d8060008114610e6c576040519150601f19603f3d011682016040523d82523d6000602084013e610e71565b606091505b5050905080610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac9061232d565b60405180910390fd5b505050565b60008063a9059cbb8484604051602401610ed592919061234d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602060008251602084016000896127105a03f13d60008114610f455760208114610f4d5760009350610f58565b819350610f58565b600051158215171593505b5050509392505050565b60608315610f7257829050610f7d565b610f7c8383611144565b5b9392505050565b600080604183511415610fc65760008060006020860151925060408601519150606086015160001a9050610fba87828585611194565b94509450505050610fcf565b60006002915091505b9250929050565b60006004811115610fea57610fe9612376565b5b816004811115610ffd57610ffc612376565b5b141561100857611141565b6001600481111561101c5761101b612376565b5b81600481111561102f5761102e612376565b5b1415611070576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611067906123f1565b60405180910390fd5b6002600481111561108457611083612376565b5b81600481111561109757611096612376565b5b14156110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf9061245d565b60405180910390fd5b600360048111156110ec576110eb612376565b5b8160048111156110ff576110fe612376565b5b1415611140576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611137906124ef565b60405180910390fd5b5b50565b6000825111156111575781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118b9190611e4e565b60405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111cf57600060039150915061126e565b6000600187878787604051600081526020016040526040516111f4949392919061252b565b6020604051602081039080840390855afa158015611216573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112655760006001925092505061126e565b80600092509250505b94509492505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6112ac81611277565b82525050565b60006020820190506112c760008301846112a3565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112f4816112e1565b81146112ff57600080fd5b50565b600081359050611311816112eb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261133c5761133b611317565b5b8235905067ffffffffffffffff8111156113595761135861131c565b5b60208301915083600182028301111561137557611374611321565b5b9250929050565b600080600060408486031215611395576113946112d7565b5b60006113a386828701611302565b935050602084013567ffffffffffffffff8111156113c4576113c36112dc565b5b6113d086828701611326565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611407826113dc565b9050919050565b611417816113fc565b811461142257600080fd5b50565b6000813590506114348161140e565b92915050565b6000602082840312156114505761144f6112d7565b5b600061145e84828501611425565b91505092915050565b600080fd5b600060a0828403121561148257611481611467565b5b81905092915050565b6000819050919050565b61149e8161148b565b81146114a957600080fd5b50565b6000813590506114bb81611495565b92915050565b60008060008060008061010087890312156114df576114de6112d7565b5b600087013567ffffffffffffffff8111156114fd576114fc6112dc565b5b61150989828a01611326565b9650965050602061151c89828a0161146c565b94505060c061152d89828a016114ac565b93505060e087013567ffffffffffffffff81111561154e5761154d6112dc565b5b61155a89828a01611326565b92509250509295509295509295565b60008083601f84011261157f5761157e611317565b5b8235905067ffffffffffffffff81111561159c5761159b61131c565b5b6020830191508360208202830111156115b8576115b7611321565b5b9250929050565b600080602083850312156115d6576115d56112d7565b5b600083013567ffffffffffffffff8111156115f4576115f36112dc565b5b61160085828601611569565b92509250509250929050565b611615816113fc565b82525050565b6000602082019050611630600083018461160c565b92915050565b60006080828403121561164c5761164b611467565b5b81905092915050565b60006020828403121561166b5761166a6112d7565b5b600082013567ffffffffffffffff811115611689576116886112dc565b5b61169584828501611636565b91505092915050565b6116a78161148b565b82525050565b60006020820190506116c2600083018461169e565b92915050565b600082825260208201905092915050565b7f4845584c30313500000000000000000000000000000000000000000000000000600082015250565b600061170f6007836116c8565b915061171a826116d9565b602082019050919050565b6000602082019050818103600083015261173e81611702565b9050919050565b7f4845584c30313900000000000000000000000000000000000000000000000000600082015250565b600061177b6007836116c8565b915061178682611745565b602082019050919050565b600060208201905081810360008301526117aa8161176e565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006117ee83856117b1565b93506117fb8385846117c2565b611804836117d1565b840190509392505050565b600061181e6020840184611425565b905092915050565b61182f816113fc565b82525050565b600061184460208401846114ac565b905092915050565b6118558161148b565b82525050565b6000611866826113dc565b9050919050565b6118768161185b565b811461188157600080fd5b50565b6000813590506118938161186d565b92915050565b60006118a86020840184611884565b905092915050565b6118b98161185b565b82525050565b60a082016118d0600083018361180f565b6118dd6000850182611826565b506118eb6020830183611835565b6118f8602085018261184c565b506119066040830183611835565b611913604085018261184c565b506119216060830183611835565b61192e606085018261184c565b5061193c6080830183611899565b61194960808501826118b0565b50505050565b600060e082019050818103600083015261196a8186886117e2565b905061197960208301856118bf565b61198660c083018461169e565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119c98261148b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119fc576119fb61198f565b5b600182019050919050565b7f4845584c41303038000000000000000000000000000000000000000000000000600082015250565b6000611a3d6008836116c8565b9150611a4882611a07565b602082019050919050565b60006020820190508181036000830152611a6c81611a30565b9050919050565b600081905092915050565b6000611a8a8385611a73565b9350611a978385846117c2565b82840190509392505050565b6000611ab0828486611a7e565b91508190509392505050565b7f4845584c41303039000000000000000000000000000000000000000000000000600082015250565b6000611af26008836116c8565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b6000611b338261148b565b9150611b3e8361148b565b925082821015611b5157611b5061198f565b5b828203905092915050565b6000611b678261148b565b9150611b728361148b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ba757611ba661198f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001608003833603038112611c0c57611c0b611be1565b5b80830191505092915050565b611c21816112e1565b82525050565b6000604082019050611c3c6000830186611c18565b8181036020830152611c4f8184866117e2565b9050949350505050565b611c6281611277565b8114611c6d57600080fd5b50565b600081519050611c7f81611c59565b92915050565b600060208284031215611c9b57611c9a6112d7565b5b6000611ca984828501611c70565b91505092915050565b60008160e01c9050919050565b600060033d1115611cde5760046000803e611cdb600051611cb2565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d19826117d1565b810181811067ffffffffffffffff82111715611d3857611d37611ce1565b5b80604052505050565b600060443d1015611d5157611dd4565b611d596112cd565b60043d036004823e80513d602482011167ffffffffffffffff82111715611d81575050611dd4565b808201805167ffffffffffffffff811115611d9f5750505050611dd4565b80602083010160043d038501811115611dbc575050505050611dd4565b611dcb82602001850186611d10565b82955050505050505b90565b600081519050919050565b60005b83811015611e00578082015181840152602081019050611de5565b83811115611e0f576000848401525b50505050565b6000611e2082611dd7565b611e2a81856116c8565b9350611e3a818560208601611de2565b611e43816117d1565b840191505092915050565b60006020820190508181036000830152611e688184611e15565b905092915050565b7f4845584c41303033000000000000000000000000000000000000000000000000600082015250565b6000611ea66008836116c8565b9150611eb182611e70565b602082019050919050565b60006020820190508181036000830152611ed581611e99565b9050919050565b7f4845584c41303032000000000000000000000000000000000000000000000000600082015250565b6000611f126008836116c8565b9150611f1d82611edc565b602082019050919050565b60006020820190508181036000830152611f4181611f05565b9050919050565b7f4845584c41303034000000000000000000000000000000000000000000000000600082015250565b6000611f7e6008836116c8565b9150611f8982611f48565b602082019050919050565b60006020820190508181036000830152611fad81611f71565b9050919050565b600060208284031215611fca57611fc96112d7565b5b6000611fd884828501611884565b91505092915050565b6000611fec8261148b565b9150611ff78361148b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120305761202f61198f565b5b828202905092915050565b7f4845584c41303133000000000000000000000000000000000000000000000000600082015250565b60006120716008836116c8565b915061207c8261203b565b602082019050919050565b600060208201905081810360008301526120a081612064565b9050919050565b7f4845584c41303131000000000000000000000000000000000000000000000000600082015250565b60006120dd6008836116c8565b91506120e8826120a7565b602082019050919050565b6000602082019050818103600083015261210c816120d0565b9050919050565b600080833560016020038436030381126121305761212f611be1565b5b80840192508235915067ffffffffffffffff82111561215257612151611be6565b5b60208301925060018202360383131561216e5761216d611beb565b5b509250929050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006121b7601c83612176565b91506121c282612181565b601c82019050919050565b6000819050919050565b6121e86121e3826112e1565b6121cd565b82525050565b60006121f9826121aa565b915061220582846121d7565b60208201915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b600061224a601d836116c8565b915061225582612214565b602082019050919050565b600060208201905081810360008301526122798161223d565b9050919050565b50565b6000612290600083611a73565b915061229b82612280565b600082019050919050565b60006122b182612283565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000612317603a836116c8565b9150612322826122bb565b604082019050919050565b600060208201905081810360008301526123468161230a565b9050919050565b6000604082019050612362600083018561160c565b61236f602083018461169e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006123db6018836116c8565b91506123e6826123a5565b602082019050919050565b6000602082019050818103600083015261240a816123ce565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612447601f836116c8565b915061245282612411565b602082019050919050565b600060208201905081810360008301526124768161243a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006124d96022836116c8565b91506124e48261247d565b604082019050919050565b60006020820190508181036000830152612508816124cc565b9050919050565b600060ff82169050919050565b6125258161250f565b82525050565b60006080820190506125406000830187611c18565b61254d602083018661251c565b61255a6040830185611c18565b6125676060830184611c18565b9594505050505056fea26469706673582212206b30bbee5d959b518dcd1bb75a269ac671bf799601445f50bd7ac78cab18223d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2716,
        "contract": "contracts/account/AccountSimple.sol:AccountSimple",
        "label": "nonce_",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}