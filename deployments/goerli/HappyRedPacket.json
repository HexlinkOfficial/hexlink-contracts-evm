{
  "address": "0x36e21785316978491f6a0CF420af3d37848cE2dF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "PacketId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "PacketId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "packet",
          "type": "tuple"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "pd",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "refundReceiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "pd",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPacket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1437b347c590689f379f0dc5840d1fe23b2bd92d6fd02f9ba97a5eb38808e91",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0x36e21785316978491f6a0CF420af3d37848cE2dF",
    "transactionIndex": 69,
    "gasUsed": "1741553",
    "logsBloom": "0x
    "blockHash": "0xa901c3cee7afa8f14994c240f9acf68fccfa49c112fb7e655c372cd7e24169ef",
    "transactionHash": "0xc1437b347c590689f379f0dc5840d1fe23b2bd92d6fd02f9ba97a5eb38808e91",
    "logs": [],
    "blockNumber": 8310425,
    "cumulativeGasUsed": "15921224",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "cf36394816f9fe9677582546fbac1bdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PacketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PacketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"packet\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"pd\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"pd\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPacket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"}],\"internalType\":\"struct HappyRedPacket.RedPacket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/HappyRedPacket.sol\":\"HappyRedPacket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/apps/HappyRedPacket.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract HappyRedPacket {\\n    using ECDSA for bytes32;\\n    using Address for address;\\n\\n    event Created(\\n        bytes32 indexed PacketId,\\n        address creator,\\n        RedPacketData packet\\n    );\\n    event Claimed(\\n        bytes32 indexed PacketId,\\n        address claimer,\\n        uint amount\\n    );\\n\\n    struct RedPacketData {\\n        address token;\\n        bytes32 salt;\\n        uint256 balance;\\n        address validator;\\n        uint32 split;\\n        uint8 mode; // 0: not_set, 1: fixed, 2: randomized\\n    }\\n\\n    struct RedPacket {\\n        uint256 createdAt;\\n        uint256 balance;\\n        uint32 split;\\n    }\\n    // user => PacketId => Packet as Packet\\n    mapping(bytes32 => RedPacket) internal packets_;\\n    mapping(bytes32 => mapping(address => uint256)) internal count_;\\n\\n    function create(RedPacketData memory pd) external payable {\\n        require(pd.mode == 1 || pd.mode == 2, \\\"Invalid mode\\\");\\n        bytes32 packetId = _packetId(msg.sender, pd.token, pd.salt);\\n        require(packets_[packetId].createdAt == 0, \\\"Packet already created\\\");\\n        if (pd.token != address(0)) {\\n            IERC20(pd.token).transferFrom(msg.sender, address(this), pd.balance);\\n        } else {\\n            require(msg.value >= pd.balance, \\\"Insufficient balance\\\");\\n        }\\n        packets_[packetId].balance += pd.balance;\\n        packets_[packetId].split += pd.split;\\n        packets_[packetId].createdAt = block.timestamp;\\n        emit Created(packetId, msg.sender, pd);\\n    }\\n\\n    function getPacket(bytes32 id) external view returns(RedPacket memory) {\\n        return packets_[id];\\n    }\\n\\n    function refund(address token, bytes32 salt) external {\\n        bytes32 packetId = _packetId(msg.sender, token, salt);\\n        // packet locked for one day before withdraw\\n        require(block.timestamp - packets_[packetId].createdAt > 86400, \\\"Packet locked\\\");\\n        _transfer(token, msg.sender, packets_[packetId].balance);\\n        packets_[packetId].balance = 0;\\n    }\\n\\n    function claim(\\n        address creator,\\n        RedPacketData memory pd,\\n        address claimer,\\n        address refundReceiver,\\n        bytes calldata signature\\n    ) external {\\n        bytes32 packetId = _packetId(creator, pd.token, pd.salt);\\n\\n        // validate claimer\\n        require(count_[packetId][claimer] == 0, \\\"Already claimed\\\");\\n        bytes32 message = keccak256(\\n            abi.encode(packetId, claimer, refundReceiver)\\n        );\\n        bytes32 reqHash = message.toEthSignedMessageHash();\\n        require(pd.validator == reqHash.recover(signature), \\\"Invalid signature\\\");\\n        count_[packetId][claimer] += 1;\\n\\n        // claim red Packet\\n        RedPacket memory p = packets_[packetId];\\n        uint256 claimed = _claimd(claimer, pd.mode, p);\\n        packets_[packetId].balance = p.balance - claimed;\\n        packets_[packetId].split = p.split - 1;\\n        _transfer(pd.token, claimer, claimed);\\n        emit Claimed(packetId, claimer, claimed);\\n    }\\n\\n    function _claimd(\\n        address claimer,\\n        uint8 mode,\\n        RedPacket memory p\\n    ) internal view returns(uint256 claimed) {\\n        require(p.balance > 0 && p.split > 0, \\\"Empty Packet\\\");\\n        if (p.split == 1) {\\n            claimed = p.balance;\\n        } else if (mode == 1) { // equally shared\\n            claimed = p.balance / p.split;\\n        } else if (mode == 2) { // randomized\\n            uint randomHash = uint(keccak256(\\n                abi.encode(claimer, block.difficulty, block.timestamp)\\n            ));\\n            uint maxPerShare = (p.balance / p.split) * 2;\\n            claimed = randomHash % maxPerShare;\\n        }\\n        if (claimed == 0) {\\n            claimed = 1;\\n        }\\n    }\\n\\n    function _transfer(address token, address to, uint256 amount) internal {\\n        if (token == address(0)) {\\n            Address.sendValue(payable(to), amount);\\n        } else {\\n            IERC20(token).transfer(to, amount);\\n        }\\n    }\\n\\n    function _packetId(\\n        address creator,\\n        address token,\\n        bytes32 salt\\n    ) internal view returns (bytes32) {\\n        return keccak256(\\n          abi.encode(block.chainid, address(this), creator, token, salt)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd08c5176765bded061cb203757a8d5d62e8d8c4ea44c8a53f926d6db34b0e174\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611eb1806100206000396000f3fe60806040526004361061003f5760003560e01c80630b5248561461004457806337b6ee7e1461008157806343da7568146100aa578063ef2370a9146100d3575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610ec0565b6100ef565b6040516100789190610f67565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190610fe0565b610155565b005b3480156100b657600080fd5b506100d160048036038101906100cc9190611247565b610209565b005b6100ed60048036038101906100e891906112e4565b61054f565b005b6100f7610e4f565b60008083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050919050565b6000610162338484610815565b90506201518060008083815260200190815260200160002060000154426101899190611340565b116101c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c0906113d1565b60405180910390fd5b6101e983336000808581526020019081526020016000206001015461084f565b600080600083815260200190815260200160002060010181905550505050565b600061021e8787600001518860200151610815565b905060006001600083815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146102b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102aa9061143d565b60405180910390fd5b60008186866040516020016102ca9392919061147b565b60405160208183030381529060405280519060200120905060006102ed82610927565b905061034685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508261095790919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16886060015173ffffffffffffffffffffffffffffffffffffffff16146103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae906114fe565b60405180910390fd5b600180600085815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610417919061151e565b92505081905550600080600085815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600061048a898b60a001518461097e565b905080826020015161049c9190611340565b60008087815260200190815260200160002060010181905550600182604001516104c69190611574565b60008087815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506105088a600001518a8361084f565b847f0508a8b4117d9a7b3d8f5895f6413e61b4f9a2df35afbfb41e78d0ecfff1843f8a8360405161053a9291906115b7565b60405180910390a25050505050505050505050565b60018160a0015160ff16148061056c575060028160a0015160ff16145b6105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a29061162c565b60405180910390fd5b60006105c03383600001518460200151610815565b90506000806000838152602001908152602001600020600001541461061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190611698565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16146106ef57816000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401610697939291906116b8565b602060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190611727565b50610737565b8160400151341015610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d906117a0565b60405180910390fd5b5b81604001516000808381526020019081526020016000206001016000828254610760919061151e565b92505081905550816080015160008083815260200190815260200160002060020160008282829054906101000a900463ffffffff1661079f91906117c0565b92506101000a81548163ffffffff021916908363ffffffff1602179055504260008083815260200190815260200160002060000181905550807f5c85091c17a5842c079f33795b436b8d466c439605ca6224eb0c0c59624e15a633846040516108099291906118a2565b60405180910390a25050565b600046308585856040516020016108309594939291906118cb565b6040516020818303038152906040528051906020012090509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108935761088e8282610ab8565b610922565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016108ce9291906115b7565b602060405180830381600087803b1580156108e857600080fd5b505af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611727565b505b505050565b60008160405160200161093a9190611996565b604051602081830303815290604052805190602001209050919050565b60008060006109668585610bac565b9150915061097381610bfe565b819250505092915050565b600080826020015111801561099d57506000826040015163ffffffff16115b6109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d390611a08565b60405180910390fd5b6001826040015163ffffffff1614156109fb5781602001519050610aa3565b60018360ff161415610a2857816040015163ffffffff168260200151610a219190611a57565b9050610aa2565b60028360ff161415610aa1576000844442604051602001610a4b93929190611a88565b6040516020818303038152906040528051906020012060001c905060006002846040015163ffffffff168560200151610a849190611a57565b610a8e9190611abf565b90508082610a9c9190611b19565b925050505b5b5b6000811415610ab157600190505b9392505050565b80471015610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af290611b96565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610b2190611be7565b60006040518083038185875af1925050503d8060008114610b5e576040519150601f19603f3d011682016040523d82523d6000602084013e610b63565b606091505b5050905080610ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9e90611c6e565b60405180910390fd5b505050565b600080604183511415610bee5760008060006020860151925060408601519150606086015160001a9050610be287828585610d6c565b94509450505050610bf7565b60006002915091505b9250929050565b60006004811115610c1257610c11611c8e565b5b816004811115610c2557610c24611c8e565b5b1415610c3057610d69565b60016004811115610c4457610c43611c8e565b5b816004811115610c5757610c56611c8e565b5b1415610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90611d09565b60405180910390fd5b60026004811115610cac57610cab611c8e565b5b816004811115610cbf57610cbe611c8e565b5b1415610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf790611d75565b60405180910390fd5b60036004811115610d1457610d13611c8e565b5b816004811115610d2757610d26611c8e565b5b1415610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f90611e07565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610da7576000600391509150610e46565b600060018787878760405160008152602001604052604051610dcc9493929190611e36565b6020604051602081039080840390855afa158015610dee573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e3d57600060019250925050610e46565b80600092509250505b94509492505050565b60405180606001604052806000815260200160008152602001600063ffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610e9d81610e8a565b8114610ea857600080fd5b50565b600081359050610eba81610e94565b92915050565b600060208284031215610ed657610ed5610e80565b5b6000610ee484828501610eab565b91505092915050565b6000819050919050565b610f0081610eed565b82525050565b600063ffffffff82169050919050565b610f1f81610f06565b82525050565b606082016000820151610f3b6000850182610ef7565b506020820151610f4e6020850182610ef7565b506040820151610f616040850182610f16565b50505050565b6000606082019050610f7c6000830184610f25565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fad82610f82565b9050919050565b610fbd81610fa2565b8114610fc857600080fd5b50565b600081359050610fda81610fb4565b92915050565b60008060408385031215610ff757610ff6610e80565b5b600061100585828601610fcb565b925050602061101685828601610eab565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61106e82611025565b810181811067ffffffffffffffff8211171561108d5761108c611036565b5b80604052505050565b60006110a0610e76565b90506110ac8282611065565b919050565b6110ba81610eed565b81146110c557600080fd5b50565b6000813590506110d7816110b1565b92915050565b6110e681610f06565b81146110f157600080fd5b50565b600081359050611103816110dd565b92915050565b600060ff82169050919050565b61111f81611109565b811461112a57600080fd5b50565b60008135905061113c81611116565b92915050565b600060c0828403121561115857611157611020565b5b61116260c0611096565b9050600061117284828501610fcb565b600083015250602061118684828501610eab565b602083015250604061119a848285016110c8565b60408301525060606111ae84828501610fcb565b60608301525060806111c2848285016110f4565b60808301525060a06111d68482850161112d565b60a08301525092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611207576112066111e2565b5b8235905067ffffffffffffffff811115611224576112236111e7565b5b6020830191508360018202830111156112405761123f6111ec565b5b9250929050565b600080600080600080610140878903121561126557611264610e80565b5b600061127389828a01610fcb565b965050602061128489828a01611142565b95505060e061129589828a01610fcb565b9450506101006112a789828a01610fcb565b93505061012087013567ffffffffffffffff8111156112c9576112c8610e85565b5b6112d589828a016111f1565b92509250509295509295509295565b600060c082840312156112fa576112f9610e80565b5b600061130884828501611142565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134b82610eed565b915061135683610eed565b92508282101561136957611368611311565b5b828203905092915050565b600082825260208201905092915050565b7f5061636b6574206c6f636b656400000000000000000000000000000000000000600082015250565b60006113bb600d83611374565b91506113c682611385565b602082019050919050565b600060208201905081810360008301526113ea816113ae565b9050919050565b7f416c726561647920636c61696d65640000000000000000000000000000000000600082015250565b6000611427600f83611374565b9150611432826113f1565b602082019050919050565b600060208201905081810360008301526114568161141a565b9050919050565b61146681610e8a565b82525050565b61147581610fa2565b82525050565b6000606082019050611490600083018661145d565b61149d602083018561146c565b6114aa604083018461146c565b949350505050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b60006114e8601183611374565b91506114f3826114b2565b602082019050919050565b60006020820190508181036000830152611517816114db565b9050919050565b600061152982610eed565b915061153483610eed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561156957611568611311565b5b828201905092915050565b600061157f82610f06565b915061158a83610f06565b92508282101561159d5761159c611311565b5b828203905092915050565b6115b181610eed565b82525050565b60006040820190506115cc600083018561146c565b6115d960208301846115a8565b9392505050565b7f496e76616c6964206d6f64650000000000000000000000000000000000000000600082015250565b6000611616600c83611374565b9150611621826115e0565b602082019050919050565b6000602082019050818103600083015261164581611609565b9050919050565b7f5061636b657420616c7265616479206372656174656400000000000000000000600082015250565b6000611682601683611374565b915061168d8261164c565b602082019050919050565b600060208201905081810360008301526116b181611675565b9050919050565b60006060820190506116cd600083018661146c565b6116da602083018561146c565b6116e760408301846115a8565b949350505050565b60008115159050919050565b611704816116ef565b811461170f57600080fd5b50565b600081519050611721816116fb565b92915050565b60006020828403121561173d5761173c610e80565b5b600061174b84828501611712565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061178a601483611374565b915061179582611754565b602082019050919050565b600060208201905081810360008301526117b98161177d565b9050919050565b60006117cb82610f06565b91506117d683610f06565b92508263ffffffff038211156117ef576117ee611311565b5b828201905092915050565b61180381610fa2565b82525050565b61181281610e8a565b82525050565b61182181611109565b82525050565b60c08201600082015161183d60008501826117fa565b5060208201516118506020850182611809565b5060408201516118636040850182610ef7565b50606082015161187660608501826117fa565b5060808201516118896080850182610f16565b5060a082015161189c60a0850182611818565b50505050565b600060e0820190506118b7600083018561146c565b6118c46020830184611827565b9392505050565b600060a0820190506118e060008301886115a8565b6118ed602083018761146c565b6118fa604083018661146c565b611907606083018561146c565b611914608083018461145d565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061195f601c8361191e565b915061196a82611929565b601c82019050919050565b6000819050919050565b61199061198b82610e8a565b611975565b82525050565b60006119a182611952565b91506119ad828461197f565b60208201915081905092915050565b7f456d707479205061636b65740000000000000000000000000000000000000000600082015250565b60006119f2600c83611374565b91506119fd826119bc565b602082019050919050565b60006020820190508181036000830152611a21816119e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a6282610eed565b9150611a6d83610eed565b925082611a7d57611a7c611a28565b5b828204905092915050565b6000606082019050611a9d600083018661146c565b611aaa60208301856115a8565b611ab760408301846115a8565b949350505050565b6000611aca82610eed565b9150611ad583610eed565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b0e57611b0d611311565b5b828202905092915050565b6000611b2482610eed565b9150611b2f83610eed565b925082611b3f57611b3e611a28565b5b828206905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611b80601d83611374565b9150611b8b82611b4a565b602082019050919050565b60006020820190508181036000830152611baf81611b73565b9050919050565b600081905092915050565b50565b6000611bd1600083611bb6565b9150611bdc82611bc1565b600082019050919050565b6000611bf282611bc4565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000611c58603a83611374565b9150611c6382611bfc565b604082019050919050565b60006020820190508181036000830152611c8781611c4b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611cf3601883611374565b9150611cfe82611cbd565b602082019050919050565b60006020820190508181036000830152611d2281611ce6565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611d5f601f83611374565b9150611d6a82611d29565b602082019050919050565b60006020820190508181036000830152611d8e81611d52565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611df1602283611374565b9150611dfc82611d95565b604082019050919050565b60006020820190508181036000830152611e2081611de4565b9050919050565b611e3081611109565b82525050565b6000608082019050611e4b600083018761145d565b611e586020830186611e27565b611e65604083018561145d565b611e72606083018461145d565b9594505050505056fea2646970667358221220580d7124040f1a5de170f5dac0c556d4e74852433d0d29923f49fb86b9b5ff4364736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80630b5248561461004457806337b6ee7e1461008157806343da7568146100aa578063ef2370a9146100d3575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610ec0565b6100ef565b6040516100789190610f67565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190610fe0565b610155565b005b3480156100b657600080fd5b506100d160048036038101906100cc9190611247565b610209565b005b6100ed60048036038101906100e891906112e4565b61054f565b005b6100f7610e4f565b60008083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050919050565b6000610162338484610815565b90506201518060008083815260200190815260200160002060000154426101899190611340565b116101c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c0906113d1565b60405180910390fd5b6101e983336000808581526020019081526020016000206001015461084f565b600080600083815260200190815260200160002060010181905550505050565b600061021e8787600001518860200151610815565b905060006001600083815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146102b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102aa9061143d565b60405180910390fd5b60008186866040516020016102ca9392919061147b565b60405160208183030381529060405280519060200120905060006102ed82610927565b905061034685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508261095790919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16886060015173ffffffffffffffffffffffffffffffffffffffff16146103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae906114fe565b60405180910390fd5b600180600085815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610417919061151e565b92505081905550600080600085815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600061048a898b60a001518461097e565b905080826020015161049c9190611340565b60008087815260200190815260200160002060010181905550600182604001516104c69190611574565b60008087815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506105088a600001518a8361084f565b847f0508a8b4117d9a7b3d8f5895f6413e61b4f9a2df35afbfb41e78d0ecfff1843f8a8360405161053a9291906115b7565b60405180910390a25050505050505050505050565b60018160a0015160ff16148061056c575060028160a0015160ff16145b6105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a29061162c565b60405180910390fd5b60006105c03383600001518460200151610815565b90506000806000838152602001908152602001600020600001541461061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190611698565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16146106ef57816000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001516040518463ffffffff1660e01b8152600401610697939291906116b8565b602060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190611727565b50610737565b8160400151341015610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d906117a0565b60405180910390fd5b5b81604001516000808381526020019081526020016000206001016000828254610760919061151e565b92505081905550816080015160008083815260200190815260200160002060020160008282829054906101000a900463ffffffff1661079f91906117c0565b92506101000a81548163ffffffff021916908363ffffffff1602179055504260008083815260200190815260200160002060000181905550807f5c85091c17a5842c079f33795b436b8d466c439605ca6224eb0c0c59624e15a633846040516108099291906118a2565b60405180910390a25050565b600046308585856040516020016108309594939291906118cb565b6040516020818303038152906040528051906020012090509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108935761088e8282610ab8565b610922565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016108ce9291906115b7565b602060405180830381600087803b1580156108e857600080fd5b505af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611727565b505b505050565b60008160405160200161093a9190611996565b604051602081830303815290604052805190602001209050919050565b60008060006109668585610bac565b9150915061097381610bfe565b819250505092915050565b600080826020015111801561099d57506000826040015163ffffffff16115b6109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d390611a08565b60405180910390fd5b6001826040015163ffffffff1614156109fb5781602001519050610aa3565b60018360ff161415610a2857816040015163ffffffff168260200151610a219190611a57565b9050610aa2565b60028360ff161415610aa1576000844442604051602001610a4b93929190611a88565b6040516020818303038152906040528051906020012060001c905060006002846040015163ffffffff168560200151610a849190611a57565b610a8e9190611abf565b90508082610a9c9190611b19565b925050505b5b5b6000811415610ab157600190505b9392505050565b80471015610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af290611b96565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610b2190611be7565b60006040518083038185875af1925050503d8060008114610b5e576040519150601f19603f3d011682016040523d82523d6000602084013e610b63565b606091505b5050905080610ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9e90611c6e565b60405180910390fd5b505050565b600080604183511415610bee5760008060006020860151925060408601519150606086015160001a9050610be287828585610d6c565b94509450505050610bf7565b60006002915091505b9250929050565b60006004811115610c1257610c11611c8e565b5b816004811115610c2557610c24611c8e565b5b1415610c3057610d69565b60016004811115610c4457610c43611c8e565b5b816004811115610c5757610c56611c8e565b5b1415610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90611d09565b60405180910390fd5b60026004811115610cac57610cab611c8e565b5b816004811115610cbf57610cbe611c8e565b5b1415610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf790611d75565b60405180910390fd5b60036004811115610d1457610d13611c8e565b5b816004811115610d2757610d26611c8e565b5b1415610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f90611e07565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610da7576000600391509150610e46565b600060018787878760405160008152602001604052604051610dcc9493929190611e36565b6020604051602081039080840390855afa158015610dee573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e3d57600060019250925050610e46565b80600092509250505b94509492505050565b60405180606001604052806000815260200160008152602001600063ffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610e9d81610e8a565b8114610ea857600080fd5b50565b600081359050610eba81610e94565b92915050565b600060208284031215610ed657610ed5610e80565b5b6000610ee484828501610eab565b91505092915050565b6000819050919050565b610f0081610eed565b82525050565b600063ffffffff82169050919050565b610f1f81610f06565b82525050565b606082016000820151610f3b6000850182610ef7565b506020820151610f4e6020850182610ef7565b506040820151610f616040850182610f16565b50505050565b6000606082019050610f7c6000830184610f25565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fad82610f82565b9050919050565b610fbd81610fa2565b8114610fc857600080fd5b50565b600081359050610fda81610fb4565b92915050565b60008060408385031215610ff757610ff6610e80565b5b600061100585828601610fcb565b925050602061101685828601610eab565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61106e82611025565b810181811067ffffffffffffffff8211171561108d5761108c611036565b5b80604052505050565b60006110a0610e76565b90506110ac8282611065565b919050565b6110ba81610eed565b81146110c557600080fd5b50565b6000813590506110d7816110b1565b92915050565b6110e681610f06565b81146110f157600080fd5b50565b600081359050611103816110dd565b92915050565b600060ff82169050919050565b61111f81611109565b811461112a57600080fd5b50565b60008135905061113c81611116565b92915050565b600060c0828403121561115857611157611020565b5b61116260c0611096565b9050600061117284828501610fcb565b600083015250602061118684828501610eab565b602083015250604061119a848285016110c8565b60408301525060606111ae84828501610fcb565b60608301525060806111c2848285016110f4565b60808301525060a06111d68482850161112d565b60a08301525092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611207576112066111e2565b5b8235905067ffffffffffffffff811115611224576112236111e7565b5b6020830191508360018202830111156112405761123f6111ec565b5b9250929050565b600080600080600080610140878903121561126557611264610e80565b5b600061127389828a01610fcb565b965050602061128489828a01611142565b95505060e061129589828a01610fcb565b9450506101006112a789828a01610fcb565b93505061012087013567ffffffffffffffff8111156112c9576112c8610e85565b5b6112d589828a016111f1565b92509250509295509295509295565b600060c082840312156112fa576112f9610e80565b5b600061130884828501611142565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134b82610eed565b915061135683610eed565b92508282101561136957611368611311565b5b828203905092915050565b600082825260208201905092915050565b7f5061636b6574206c6f636b656400000000000000000000000000000000000000600082015250565b60006113bb600d83611374565b91506113c682611385565b602082019050919050565b600060208201905081810360008301526113ea816113ae565b9050919050565b7f416c726561647920636c61696d65640000000000000000000000000000000000600082015250565b6000611427600f83611374565b9150611432826113f1565b602082019050919050565b600060208201905081810360008301526114568161141a565b9050919050565b61146681610e8a565b82525050565b61147581610fa2565b82525050565b6000606082019050611490600083018661145d565b61149d602083018561146c565b6114aa604083018461146c565b949350505050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b60006114e8601183611374565b91506114f3826114b2565b602082019050919050565b60006020820190508181036000830152611517816114db565b9050919050565b600061152982610eed565b915061153483610eed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561156957611568611311565b5b828201905092915050565b600061157f82610f06565b915061158a83610f06565b92508282101561159d5761159c611311565b5b828203905092915050565b6115b181610eed565b82525050565b60006040820190506115cc600083018561146c565b6115d960208301846115a8565b9392505050565b7f496e76616c6964206d6f64650000000000000000000000000000000000000000600082015250565b6000611616600c83611374565b9150611621826115e0565b602082019050919050565b6000602082019050818103600083015261164581611609565b9050919050565b7f5061636b657420616c7265616479206372656174656400000000000000000000600082015250565b6000611682601683611374565b915061168d8261164c565b602082019050919050565b600060208201905081810360008301526116b181611675565b9050919050565b60006060820190506116cd600083018661146c565b6116da602083018561146c565b6116e760408301846115a8565b949350505050565b60008115159050919050565b611704816116ef565b811461170f57600080fd5b50565b600081519050611721816116fb565b92915050565b60006020828403121561173d5761173c610e80565b5b600061174b84828501611712565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061178a601483611374565b915061179582611754565b602082019050919050565b600060208201905081810360008301526117b98161177d565b9050919050565b60006117cb82610f06565b91506117d683610f06565b92508263ffffffff038211156117ef576117ee611311565b5b828201905092915050565b61180381610fa2565b82525050565b61181281610e8a565b82525050565b61182181611109565b82525050565b60c08201600082015161183d60008501826117fa565b5060208201516118506020850182611809565b5060408201516118636040850182610ef7565b50606082015161187660608501826117fa565b5060808201516118896080850182610f16565b5060a082015161189c60a0850182611818565b50505050565b600060e0820190506118b7600083018561146c565b6118c46020830184611827565b9392505050565b600060a0820190506118e060008301886115a8565b6118ed602083018761146c565b6118fa604083018661146c565b611907606083018561146c565b611914608083018461145d565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061195f601c8361191e565b915061196a82611929565b601c82019050919050565b6000819050919050565b61199061198b82610e8a565b611975565b82525050565b60006119a182611952565b91506119ad828461197f565b60208201915081905092915050565b7f456d707479205061636b65740000000000000000000000000000000000000000600082015250565b60006119f2600c83611374565b91506119fd826119bc565b602082019050919050565b60006020820190508181036000830152611a21816119e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a6282610eed565b9150611a6d83610eed565b925082611a7d57611a7c611a28565b5b828204905092915050565b6000606082019050611a9d600083018661146c565b611aaa60208301856115a8565b611ab760408301846115a8565b949350505050565b6000611aca82610eed565b9150611ad583610eed565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b0e57611b0d611311565b5b828202905092915050565b6000611b2482610eed565b9150611b2f83610eed565b925082611b3f57611b3e611a28565b5b828206905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611b80601d83611374565b9150611b8b82611b4a565b602082019050919050565b60006020820190508181036000830152611baf81611b73565b9050919050565b600081905092915050565b50565b6000611bd1600083611bb6565b9150611bdc82611bc1565b600082019050919050565b6000611bf282611bc4565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000611c58603a83611374565b9150611c6382611bfc565b604082019050919050565b60006020820190508181036000830152611c8781611c4b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611cf3601883611374565b9150611cfe82611cbd565b602082019050919050565b60006020820190508181036000830152611d2281611ce6565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611d5f601f83611374565b9150611d6a82611d29565b602082019050919050565b60006020820190508181036000830152611d8e81611d52565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611df1602283611374565b9150611dfc82611d95565b604082019050919050565b60006020820190508181036000830152611e2081611de4565b9050919050565b611e3081611109565b82525050565b6000608082019050611e4b600083018761145d565b611e586020830186611e27565b611e65604083018561145d565b611e72606083018461145d565b9594505050505056fea2646970667358221220580d7124040f1a5de170f5dac0c556d4e74852433d0d29923f49fb86b9b5ff4364736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2000,
        "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
        "label": "packets_",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RedPacket)1995_storage)"
      },
      {
        "astId": 2006,
        "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
        "label": "count_",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RedPacket)1995_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HappyRedPacket.RedPacket)",
        "numberOfBytes": "32",
        "value": "t_struct(RedPacket)1995_storage"
      },
      "t_struct(RedPacket)1995_storage": {
        "encoding": "inplace",
        "label": "struct HappyRedPacket.RedPacket",
        "members": [
          {
            "astId": 1990,
            "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
            "label": "createdAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1992,
            "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1994,
            "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
            "label": "split",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}