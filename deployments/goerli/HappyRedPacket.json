{
  "address": "0xD6150A0fE5cDf506Ad5E4C6F301b6B056f25d3d7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "PacketId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "PacketId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "packet",
          "type": "tuple"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "pd",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "pd",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "claimWithoutSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "pd",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPacket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "initOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "split",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "mode",
              "type": "uint8"
            }
          ],
          "internalType": "struct HappyRedPacket.RedPacketData",
          "name": "pd",
          "type": "tuple"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x585170981c7614ee1c0154a7156933bcdf8f5c53147deacc8629a228290e5b30",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0xD6150A0fE5cDf506Ad5E4C6F301b6B056f25d3d7",
    "transactionIndex": 61,
    "gasUsed": "3070032",
    "logsBloom": "0x
    "blockHash": "0x3efc5b2bdfdead0a2a7cb1424308675d05bee14dba8ecd7c7b65e00d08d8f272",
    "transactionHash": "0x585170981c7614ee1c0154a7156933bcdf8f5c53147deacc8629a228290e5b30",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 8324229,
        "transactionHash": "0x585170981c7614ee1c0154a7156933bcdf8f5c53147deacc8629a228290e5b30",
        "address": "0xD6150A0fE5cDf506Ad5E4C6F301b6B056f25d3d7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a4b368e3a9d49ff15b58f70fb976724a98b6d149"
        ],
        "data": "0x",
        "logIndex": 378,
        "blockHash": "0x3efc5b2bdfdead0a2a7cb1424308675d05bee14dba8ecd7c7b65e00d08d8f272"
      }
    ],
    "blockNumber": 8324229,
    "cumulativeGasUsed": "18638102",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "a9c5cb8803e276f1fb3d94f497691451",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PacketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PacketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"packet\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"pd\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"pd\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimWithoutSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"pd\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPacket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"}],\"internalType\":\"struct HappyRedPacket.RedPacket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"split\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct HappyRedPacket.RedPacketData\",\"name\":\"pd\",\"type\":\"tuple\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/HappyRedPacket.sol\":\"HappyRedPacket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x85cc5aca68692044586dc5ca19a9868d3288f6b35d1085c620dd0278ed0abdaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/apps/HappyRedPacket.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract HappyRedPacket is Ownable, UUPSUpgradeable {\\n    using ECDSA for bytes32;\\n    using Address for address;\\n\\n    event Created(\\n        bytes32 indexed PacketId,\\n        address creator,\\n        RedPacketData packet\\n    );\\n    event Claimed(\\n        bytes32 indexed PacketId,\\n        address claimer,\\n        uint amount\\n    );\\n\\n    struct RedPacketData {\\n        address token;\\n        bytes32 salt;\\n        uint256 balance;\\n        address validator;\\n        uint32 split;\\n        uint8 mode; // 0: not_set, 1: fixed, 2: randomized\\n    }\\n\\n    struct RedPacket {\\n        uint256 createdAt;\\n        uint256 balance;\\n        uint32 split;\\n    }\\n    // user => PacketId => Packet as Packet\\n    mapping(bytes32 => RedPacket) internal packets_;\\n    mapping(bytes32 => mapping(address => uint256)) internal count_;\\n\\n    function initOwner(address newOwner) external {\\n        require(owner() == address(0), \\\"Owner already set\\\");\\n        require(newOwner != address(0), \\\"Owner cannot be address zero\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function create(RedPacketData calldata pd) external payable {\\n        require(pd.mode == 1 || pd.mode == 2, \\\"Invalid mode\\\");\\n        bytes32 packetId = _packetId(msg.sender, pd);\\n        require(packets_[packetId].createdAt == 0, \\\"Packet already created\\\");\\n        if (pd.token != address(0)) {\\n            IERC20(pd.token).transferFrom(msg.sender, address(this), pd.balance);\\n        } else {\\n            require(msg.value >= pd.balance, \\\"Insufficient balance\\\");\\n        }\\n        packets_[packetId].balance += pd.balance;\\n        packets_[packetId].split += pd.split;\\n        packets_[packetId].createdAt = block.timestamp;\\n        emit Created(packetId, msg.sender, pd);\\n    }\\n\\n    function getPacket(bytes32 id) external view returns(RedPacket memory) {\\n        return packets_[id];\\n    }\\n\\n    function refund(RedPacketData calldata pd) external {\\n        bytes32 packetId = _packetId(msg.sender, pd);\\n        // packet locked for one day before withdraw\\n        require(block.timestamp - packets_[packetId].createdAt > 86400, \\\"Packet locked\\\");\\n        _transfer(pd.token, msg.sender, packets_[packetId].balance);\\n        packets_[packetId].balance = 0;\\n    }\\n\\n    function claimWithoutSignature(\\n        address creator,\\n        RedPacketData calldata pd,\\n        address claimer\\n    ) external {\\n        require(msg.sender == pd.validator, \\\"Unauthorized operator\\\");\\n        bytes32 packetId = _packetId(creator, pd);\\n        _validateClaimer(packetId, claimer);\\n        _claim(packetId, pd, claimer);\\n    }\\n\\n    function claim(\\n        address creator,\\n        RedPacketData calldata pd,\\n        address claimer,\\n        bytes calldata signature\\n    ) external {\\n        bytes32 packetId = _packetId(creator, pd);\\n        _validateClaimer(packetId, claimer);\\n        bytes32 message = keccak256(abi.encode(packetId, claimer));\\n        bytes32 reqHash = message.toEthSignedMessageHash();\\n        require(pd.validator == reqHash.recover(signature), \\\"Invalid signature\\\");\\n        _claim(packetId, pd, claimer);\\n    }\\n\\n    function _claim(\\n        bytes32 packetId,\\n        RedPacketData calldata pd,\\n        address claimer\\n    ) internal {\\n        RedPacket memory p = packets_[packetId];\\n        uint256 claimed = _claimd(claimer, pd.mode, p);\\n        packets_[packetId].balance = p.balance - claimed;\\n        packets_[packetId].split = p.split - 1;\\n        _transfer(pd.token, claimer, claimed);\\n        emit Claimed(packetId, claimer, claimed);\\n    }\\n\\n    function _validateClaimer(bytes32 packetId, address claimer) internal {\\n        require(count_[packetId][claimer] == 0, \\\"Already claimed\\\");\\n        count_[packetId][claimer] += 1;\\n    }\\n\\n    function _claimd(\\n        address claimer,\\n        uint8 mode,\\n        RedPacket memory p\\n    ) internal view returns(uint256 claimed) {\\n        require(p.balance > 0 && p.split > 0, \\\"Empty Packet\\\");\\n        if (p.split == 1) {\\n            claimed = p.balance;\\n        } else if (mode == 1) { // equally shared\\n            claimed = p.balance / p.split;\\n        } else if (mode == 2) { // randomized\\n            uint randomHash = uint(keccak256(\\n                abi.encode(claimer, block.difficulty, block.timestamp)\\n            ));\\n            uint maxPerShare = (p.balance / p.split) * 2;\\n            claimed = randomHash % maxPerShare;\\n        }\\n        if (claimed == 0) {\\n            claimed = 1;\\n        }\\n    }\\n\\n    function _transfer(address token, address to, uint256 amount) internal {\\n        if (token == address(0)) {\\n            Address.sendValue(payable(to), amount);\\n        } else {\\n            IERC20(token).transfer(to, amount);\\n        }\\n    }\\n\\n    function _packetId(\\n        address creator,\\n        RedPacketData calldata pd\\n    ) internal view returns (bytes32) {\\n        return keccak256(\\n          abi.encode(block.chainid, address(this), creator, pd)\\n        );\\n    }\\n\\n    function implementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal view onlyOwner override { }\\n}\\n\",\"keccak256\":\"0xa348187f457609da84f72495ee90e4795b9e04b8014cc04c4067141e1becf495\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1660601b8152503480156200004757600080fd5b50620000686200005c6200006e60201b60201c565b6200007660201b60201c565b6200013a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60805160601c61365a6200017560003960008181610562015281816105f1015281816106eb0152818161077a015261082a015261365a6000f3fe6080604052600436106100c25760003560e01c80635c60da1b1161007f578063aac52f0611610059578063aac52f0614610233578063eed46b6f1461025c578063ef2370a914610285578063f2fde38b146102a1576100c2565b80635c60da1b146101c6578063715018a6146101f15780638da5cb5b14610208576100c2565b806307988198146100c75780630b524856146100f05780630d0092971461012d5780633659cfe6146101565780634f1ef2861461017f57806352d1902d1461019b575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190611dd5565b6102ca565b005b3480156100fc57600080fd5b5061011760048036038101906101129190611e95565b610407565b6040516101249190611f3c565b60405180910390f35b34801561013957600080fd5b50610154600480360381019061014f9190611f57565b61046e565b005b34801561016257600080fd5b5061017d60048036038101906101789190611f57565b610560565b005b610199600480360381019061019491906120c5565b6106e9565b005b3480156101a757600080fd5b506101b0610826565b6040516101bd9190612130565b60405180910390f35b3480156101d257600080fd5b506101db6108df565b6040516101e8919061215a565b60405180910390f35b3480156101fd57600080fd5b506102066108ee565b005b34801561021457600080fd5b5061021d610902565b60405161022a919061215a565b60405180910390f35b34801561023f57600080fd5b5061025a60048036038101906102559190612175565b61092b565b005b34801561026857600080fd5b50610283600480360381019061027e91906121c9565b6109d4565b005b61029f600480360381019061029a91906121c9565b610a9b565b005b3480156102ad57600080fd5b506102c860048036038101906102c39190611f57565b610da2565b005b60006102d68686610e26565b90506102e28185610e5d565b600081856040516020016102f79291906121f6565b604051602081830303815290604052805190602001209050600061031a82610f5c565b905061037385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610f8c90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1687606001602081019061039c9190611f57565b73ffffffffffffffffffffffffffffffffffffffff16146103f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e99061227c565b60405180910390fd5b6103fd838888610fb3565b5050505050505050565b61040f611cb3565b6001600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050919050565b600073ffffffffffffffffffffffffffffffffffffffff1661048e610902565b73ffffffffffffffffffffffffffffffffffffffff16146104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906122e8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b90612354565b60405180910390fd5b61055d816110fd565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156105ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e6906123e6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661062e6111c1565b73ffffffffffffffffffffffffffffffffffffffff1614610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067b90612478565b60405180910390fd5b61068d81611218565b6106e681600067ffffffffffffffff8111156106ac576106ab611f9a565b5b6040519080825280601f01601f1916602001820160405280156106de5781602001600182028036833780820191505090505b506000611223565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f906123e6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166107b76111c1565b73ffffffffffffffffffffffffffffffffffffffff161461080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080490612478565b60405180910390fd5b61081682611218565b61082282826001611223565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad9061250a565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006108e96111c1565b905090565b6108f66113a0565b61090060006110fd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b81606001602081019061093e9190611f57565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a290612576565b60405180910390fd5b60006109b78484610e26565b90506109c38183610e5d565b6109ce818484610fb3565b50505050565b60006109e03383610e26565b905062015180600160008381526020019081526020016000206000015442610a0891906125c5565b11610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90612645565b60405180910390fd5b610a7b826000016020810190610a5e9190611f57565b33600160008581526020019081526020016000206001015461141e565b600060016000838152602001908152602001600020600101819055505050565b60018160a0016020810190610ab0919061269e565b60ff161480610ad4575060028160a0016020810190610acf919061269e565b60ff16145b610b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0a90612717565b60405180910390fd5b6000610b1f3383610e26565b90506000600160008381526020019081526020016000206000015414610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7190612783565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16826000016020810190610ba59190611f57565b73ffffffffffffffffffffffffffffffffffffffff1614610c6b57816000016020810190610bd39190611f57565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001356040518463ffffffff1660e01b8152600401610c13939291906127b2565b602060405180830381600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c659190612821565b50610cb3565b8160400135341015610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca99061289a565b60405180910390fd5b5b8160400135600160008381526020019081526020016000206001016000828254610cdd91906128ba565b92505081905550816080016020810190610cf7919061293c565b6001600083815260200190815260200160002060020160008282829054906101000a900463ffffffff16610d2b9190612969565b92506101000a81548163ffffffff021916908363ffffffff160217905550426001600083815260200190815260200160002060000181905550807f5c85091c17a5842c079f33795b436b8d466c439605ca6224eb0c0c59624e15a63384604051610d96929190612b1a565b60405180910390a25050565b610daa6113a0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1190612bb5565b60405180910390fd5b610e23816110fd565b50565b600046308484604051602001610e3f9493929190612bd5565b60405160208183030381529060405280519060200120905092915050565b60006002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790612c67565b60405180910390fd5b60016002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f5191906128ba565b925050819055505050565b600081604051602001610f6f9190612cff565b604051602081830303815290604052805190602001209050919050565b6000806000610f9b85856114f6565b91509150610fa881611548565b819250505092915050565b60006001600085815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600061102e838560a0016020810190611028919061269e565b846116b6565b905080826020015161104091906125c5565b60016000878152602001908152602001600020600101819055506001826040015161106b9190612d25565b6001600087815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506110bc8460000160208101906110b59190611f57565b848361141e565b847f0508a8b4117d9a7b3d8f5895f6413e61b4f9a2df35afbfb41e78d0ecfff1843f84836040516110ee929190612d59565b60405180910390a25050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006111ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6117f0565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112206113a0565b50565b61124f7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6117fa565b60000160009054906101000a900460ff16156112735761126e83611804565b61139b565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b957600080fd5b505afa9250505080156112ea57506040513d601f19601f820116820180604052508101906112e79190612d97565b60015b611329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132090612e36565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461138e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138590612ec8565b60405180910390fd5b5061139a8383836118bd565b5b505050565b6113a86118e9565b73ffffffffffffffffffffffffffffffffffffffff166113c6610902565b73ffffffffffffffffffffffffffffffffffffffff161461141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390612f34565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114625761145d82826118f1565b6114f1565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161149d929190612d59565b602060405180830381600087803b1580156114b757600080fd5b505af11580156114cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ef9190612821565b505b505050565b6000806041835114156115385760008060006020860151925060408601519150606086015160001a905061152c878285856119e5565b94509450505050611541565b60006002915091505b9250929050565b6000600481111561155c5761155b612f54565b5b81600481111561156f5761156e612f54565b5b141561157a576116b3565b6001600481111561158e5761158d612f54565b5b8160048111156115a1576115a0612f54565b5b14156115e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d990612fcf565b60405180910390fd5b600260048111156115f6576115f5612f54565b5b81600481111561160957611608612f54565b5b141561164a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116419061303b565b60405180910390fd5b6003600481111561165e5761165d612f54565b5b81600481111561167157611670612f54565b5b14156116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a9906130cd565b60405180910390fd5b5b50565b60008082602001511180156116d557506000826040015163ffffffff16115b611714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170b90613139565b60405180910390fd5b6001826040015163ffffffff16141561173357816020015190506117db565b60018360ff16141561176057816040015163ffffffff1682602001516117599190613188565b90506117da565b60028360ff1614156117d9576000844442604051602001611783939291906131b9565b6040516020818303038152906040528051906020012060001c905060006002846040015163ffffffff1685602001516117bc9190613188565b6117c691906131f0565b905080826117d4919061324a565b925050505b5b5b60008114156117e957600190505b9392505050565b6000819050919050565b6000819050919050565b61180d81611ac8565b61184c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611843906132ed565b60405180910390fd5b806118797f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6117f0565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6118c683611aeb565b6000825111806118d35750805b156118e4576118e28383611b3a565b505b505050565b600033905090565b80471015611934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192b90613359565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161195a906133aa565b60006040518083038185875af1925050503d8060008114611997576040519150601f19603f3d011682016040523d82523d6000602084013e61199c565b606091505b50509050806119e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d790613431565b60405180910390fd5b505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611a20576000600391509150611abf565b600060018787878760405160008152602001604052604051611a459493929190613460565b6020604051602081039080840390855afa158015611a67573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ab657600060019250925050611abf565b80600092509250505b94509492505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b611af481611804565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060611b5f83836040518060600160405280602781526020016135fe60279139611b67565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051611b919190613514565b600060405180830381855af49150503d8060008114611bcc576040519150601f19603f3d011682016040523d82523d6000602084013e611bd1565b606091505b5091509150611be286838387611bed565b925050509392505050565b60608315611c5057600083511415611c4857611c0885611ac8565b611c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3e90613577565b60405180910390fd5b5b829050611c5b565b611c5a8383611c63565b5b949350505050565b600082511115611c765781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caa91906135db565b60405180910390fd5b60405180606001604052806000815260200160008152602001600063ffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d1982611cee565b9050919050565b611d2981611d0e565b8114611d3457600080fd5b50565b600081359050611d4681611d20565b92915050565b600080fd5b600060c08284031215611d6757611d66611d4c565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d9557611d94611d70565b5b8235905067ffffffffffffffff811115611db257611db1611d75565b5b602083019150836001820283011115611dce57611dcd611d7a565b5b9250929050565b60008060008060006101208688031215611df257611df1611ce4565b5b6000611e0088828901611d37565b9550506020611e1188828901611d51565b94505060e0611e2288828901611d37565b93505061010086013567ffffffffffffffff811115611e4457611e43611ce9565b5b611e5088828901611d7f565b92509250509295509295909350565b6000819050919050565b611e7281611e5f565b8114611e7d57600080fd5b50565b600081359050611e8f81611e69565b92915050565b600060208284031215611eab57611eaa611ce4565b5b6000611eb984828501611e80565b91505092915050565b6000819050919050565b611ed581611ec2565b82525050565b600063ffffffff82169050919050565b611ef481611edb565b82525050565b606082016000820151611f106000850182611ecc565b506020820151611f236020850182611ecc565b506040820151611f366040850182611eeb565b50505050565b6000606082019050611f516000830184611efa565b92915050565b600060208284031215611f6d57611f6c611ce4565b5b6000611f7b84828501611d37565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fd282611f89565b810181811067ffffffffffffffff82111715611ff157611ff0611f9a565b5b80604052505050565b6000612004611cda565b90506120108282611fc9565b919050565b600067ffffffffffffffff8211156120305761202f611f9a565b5b61203982611f89565b9050602081019050919050565b82818337600083830152505050565b600061206861206384612015565b611ffa565b90508281526020810184848401111561208457612083611f84565b5b61208f848285612046565b509392505050565b600082601f8301126120ac576120ab611d70565b5b81356120bc848260208601612055565b91505092915050565b600080604083850312156120dc576120db611ce4565b5b60006120ea85828601611d37565b925050602083013567ffffffffffffffff81111561210b5761210a611ce9565b5b61211785828601612097565b9150509250929050565b61212a81611e5f565b82525050565b60006020820190506121456000830184612121565b92915050565b61215481611d0e565b82525050565b600060208201905061216f600083018461214b565b92915050565b6000806000610100848603121561218f5761218e611ce4565b5b600061219d86828701611d37565b93505060206121ae86828701611d51565b92505060e06121bf86828701611d37565b9150509250925092565b600060c082840312156121df576121de611ce4565b5b60006121ed84828501611d51565b91505092915050565b600060408201905061220b6000830185612121565b612218602083018461214b565b9392505050565b600082825260208201905092915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b600061226660118361221f565b915061227182612230565b602082019050919050565b6000602082019050818103600083015261229581612259565b9050919050565b7f4f776e657220616c726561647920736574000000000000000000000000000000600082015250565b60006122d260118361221f565b91506122dd8261229c565b602082019050919050565b60006020820190508181036000830152612301816122c5565b9050919050565b7f4f776e65722063616e6e6f742062652061646472657373207a65726f00000000600082015250565b600061233e601c8361221f565b915061234982612308565b602082019050919050565b6000602082019050818103600083015261236d81612331565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006123d0602c8361221f565b91506123db82612374565b604082019050919050565b600060208201905081810360008301526123ff816123c3565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000612462602c8361221f565b915061246d82612406565b604082019050919050565b6000602082019050818103600083015261249181612455565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b60006124f460388361221f565b91506124ff82612498565b604082019050919050565b60006020820190508181036000830152612523816124e7565b9050919050565b7f556e617574686f72697a6564206f70657261746f720000000000000000000000600082015250565b600061256060158361221f565b915061256b8261252a565b602082019050919050565b6000602082019050818103600083015261258f81612553565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125d082611ec2565b91506125db83611ec2565b9250828210156125ee576125ed612596565b5b828203905092915050565b7f5061636b6574206c6f636b656400000000000000000000000000000000000000600082015250565b600061262f600d8361221f565b915061263a826125f9565b602082019050919050565b6000602082019050818103600083015261265e81612622565b9050919050565b600060ff82169050919050565b61267b81612665565b811461268657600080fd5b50565b60008135905061269881612672565b92915050565b6000602082840312156126b4576126b3611ce4565b5b60006126c284828501612689565b91505092915050565b7f496e76616c6964206d6f64650000000000000000000000000000000000000000600082015250565b6000612701600c8361221f565b915061270c826126cb565b602082019050919050565b60006020820190508181036000830152612730816126f4565b9050919050565b7f5061636b657420616c7265616479206372656174656400000000000000000000600082015250565b600061276d60168361221f565b915061277882612737565b602082019050919050565b6000602082019050818103600083015261279c81612760565b9050919050565b6127ac81611ec2565b82525050565b60006060820190506127c7600083018661214b565b6127d4602083018561214b565b6127e160408301846127a3565b949350505050565b60008115159050919050565b6127fe816127e9565b811461280957600080fd5b50565b60008151905061281b816127f5565b92915050565b60006020828403121561283757612836611ce4565b5b60006128458482850161280c565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061288460148361221f565b915061288f8261284e565b602082019050919050565b600060208201905081810360008301526128b381612877565b9050919050565b60006128c582611ec2565b91506128d083611ec2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561290557612904612596565b5b828201905092915050565b61291981611edb565b811461292457600080fd5b50565b60008135905061293681612910565b92915050565b60006020828403121561295257612951611ce4565b5b600061296084828501612927565b91505092915050565b600061297482611edb565b915061297f83611edb565b92508263ffffffff0382111561299857612997612596565b5b828201905092915050565b60006129b26020840184611d37565b905092915050565b6129c381611d0e565b82525050565b60006129d86020840184611e80565b905092915050565b6129e981611e5f565b82525050565b6129f881611ec2565b8114612a0357600080fd5b50565b600081359050612a15816129ef565b92915050565b6000612a2a6020840184612a06565b905092915050565b6000612a416020840184612927565b905092915050565b6000612a586020840184612689565b905092915050565b612a6981612665565b82525050565b60c08201612a8060008301836129a3565b612a8d60008501826129ba565b50612a9b60208301836129c9565b612aa860208501826129e0565b50612ab66040830183612a1b565b612ac36040850182611ecc565b50612ad160608301836129a3565b612ade60608501826129ba565b50612aec6080830183612a32565b612af96080850182611eeb565b50612b0760a0830183612a49565b612b1460a0850182612a60565b50505050565b600060e082019050612b2f600083018561214b565b612b3c6020830184612a6f565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612b9f60268361221f565b9150612baa82612b43565b604082019050919050565b60006020820190508181036000830152612bce81612b92565b9050919050565b600061012082019050612beb60008301876127a3565b612bf8602083018661214b565b612c05604083018561214b565b612c126060830184612a6f565b95945050505050565b7f416c726561647920636c61696d65640000000000000000000000000000000000600082015250565b6000612c51600f8361221f565b9150612c5c82612c1b565b602082019050919050565b60006020820190508181036000830152612c8081612c44565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612cc8601c83612c87565b9150612cd382612c92565b601c82019050919050565b6000819050919050565b612cf9612cf482611e5f565b612cde565b82525050565b6000612d0a82612cbb565b9150612d168284612ce8565b60208201915081905092915050565b6000612d3082611edb565b9150612d3b83611edb565b925082821015612d4e57612d4d612596565b5b828203905092915050565b6000604082019050612d6e600083018561214b565b612d7b60208301846127a3565b9392505050565b600081519050612d9181611e69565b92915050565b600060208284031215612dad57612dac611ce4565b5b6000612dbb84828501612d82565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000612e20602e8361221f565b9150612e2b82612dc4565b604082019050919050565b60006020820190508181036000830152612e4f81612e13565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000612eb260298361221f565b9150612ebd82612e56565b604082019050919050565b60006020820190508181036000830152612ee181612ea5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612f1e60208361221f565b9150612f2982612ee8565b602082019050919050565b60006020820190508181036000830152612f4d81612f11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612fb960188361221f565b9150612fc482612f83565b602082019050919050565b60006020820190508181036000830152612fe881612fac565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613025601f8361221f565b915061303082612fef565b602082019050919050565b6000602082019050818103600083015261305481613018565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006130b760228361221f565b91506130c28261305b565b604082019050919050565b600060208201905081810360008301526130e6816130aa565b9050919050565b7f456d707479205061636b65740000000000000000000000000000000000000000600082015250565b6000613123600c8361221f565b915061312e826130ed565b602082019050919050565b6000602082019050818103600083015261315281613116565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061319382611ec2565b915061319e83611ec2565b9250826131ae576131ad613159565b5b828204905092915050565b60006060820190506131ce600083018661214b565b6131db60208301856127a3565b6131e860408301846127a3565b949350505050565b60006131fb82611ec2565b915061320683611ec2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561323f5761323e612596565b5b828202905092915050565b600061325582611ec2565b915061326083611ec2565b9250826132705761326f613159565b5b828206905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006132d7602d8361221f565b91506132e28261327b565b604082019050919050565b60006020820190508181036000830152613306816132ca565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000613343601d8361221f565b915061334e8261330d565b602082019050919050565b6000602082019050818103600083015261337281613336565b9050919050565b600081905092915050565b50565b6000613394600083613379565b915061339f82613384565b600082019050919050565b60006133b582613387565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061341b603a8361221f565b9150613426826133bf565b604082019050919050565b6000602082019050818103600083015261344a8161340e565b9050919050565b61345a81612665565b82525050565b60006080820190506134756000830187612121565b6134826020830186613451565b61348f6040830185612121565b61349c6060830184612121565b95945050505050565b600081519050919050565b60005b838110156134ce5780820151818401526020810190506134b3565b838111156134dd576000848401525b50505050565b60006134ee826134a5565b6134f88185613379565b93506135088185602086016134b0565b80840191505092915050565b600061352082846134e3565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613561601d8361221f565b915061356c8261352b565b602082019050919050565b6000602082019050818103600083015261359081613554565b9050919050565b600081519050919050565b60006135ad82613597565b6135b7818561221f565b93506135c78185602086016134b0565b6135d081611f89565b840191505092915050565b600060208201905081810360008301526135f581846135a2565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202465115075c7b6e5270ec7f1cd02cb534affa019363fc2fcbe80af202699895964736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635c60da1b1161007f578063aac52f0611610059578063aac52f0614610233578063eed46b6f1461025c578063ef2370a914610285578063f2fde38b146102a1576100c2565b80635c60da1b146101c6578063715018a6146101f15780638da5cb5b14610208576100c2565b806307988198146100c75780630b524856146100f05780630d0092971461012d5780633659cfe6146101565780634f1ef2861461017f57806352d1902d1461019b575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190611dd5565b6102ca565b005b3480156100fc57600080fd5b5061011760048036038101906101129190611e95565b610407565b6040516101249190611f3c565b60405180910390f35b34801561013957600080fd5b50610154600480360381019061014f9190611f57565b61046e565b005b34801561016257600080fd5b5061017d60048036038101906101789190611f57565b610560565b005b610199600480360381019061019491906120c5565b6106e9565b005b3480156101a757600080fd5b506101b0610826565b6040516101bd9190612130565b60405180910390f35b3480156101d257600080fd5b506101db6108df565b6040516101e8919061215a565b60405180910390f35b3480156101fd57600080fd5b506102066108ee565b005b34801561021457600080fd5b5061021d610902565b60405161022a919061215a565b60405180910390f35b34801561023f57600080fd5b5061025a60048036038101906102559190612175565b61092b565b005b34801561026857600080fd5b50610283600480360381019061027e91906121c9565b6109d4565b005b61029f600480360381019061029a91906121c9565b610a9b565b005b3480156102ad57600080fd5b506102c860048036038101906102c39190611f57565b610da2565b005b60006102d68686610e26565b90506102e28185610e5d565b600081856040516020016102f79291906121f6565b604051602081830303815290604052805190602001209050600061031a82610f5c565b905061037385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610f8c90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1687606001602081019061039c9190611f57565b73ffffffffffffffffffffffffffffffffffffffff16146103f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e99061227c565b60405180910390fd5b6103fd838888610fb3565b5050505050505050565b61040f611cb3565b6001600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050919050565b600073ffffffffffffffffffffffffffffffffffffffff1661048e610902565b73ffffffffffffffffffffffffffffffffffffffff16146104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906122e8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b90612354565b60405180910390fd5b61055d816110fd565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156105ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e6906123e6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661062e6111c1565b73ffffffffffffffffffffffffffffffffffffffff1614610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067b90612478565b60405180910390fd5b61068d81611218565b6106e681600067ffffffffffffffff8111156106ac576106ab611f9a565b5b6040519080825280601f01601f1916602001820160405280156106de5781602001600182028036833780820191505090505b506000611223565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f906123e6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166107b76111c1565b73ffffffffffffffffffffffffffffffffffffffff161461080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080490612478565b60405180910390fd5b61081682611218565b61082282826001611223565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad9061250a565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006108e96111c1565b905090565b6108f66113a0565b61090060006110fd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b81606001602081019061093e9190611f57565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a290612576565b60405180910390fd5b60006109b78484610e26565b90506109c38183610e5d565b6109ce818484610fb3565b50505050565b60006109e03383610e26565b905062015180600160008381526020019081526020016000206000015442610a0891906125c5565b11610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90612645565b60405180910390fd5b610a7b826000016020810190610a5e9190611f57565b33600160008581526020019081526020016000206001015461141e565b600060016000838152602001908152602001600020600101819055505050565b60018160a0016020810190610ab0919061269e565b60ff161480610ad4575060028160a0016020810190610acf919061269e565b60ff16145b610b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0a90612717565b60405180910390fd5b6000610b1f3383610e26565b90506000600160008381526020019081526020016000206000015414610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7190612783565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16826000016020810190610ba59190611f57565b73ffffffffffffffffffffffffffffffffffffffff1614610c6b57816000016020810190610bd39190611f57565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085604001356040518463ffffffff1660e01b8152600401610c13939291906127b2565b602060405180830381600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c659190612821565b50610cb3565b8160400135341015610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca99061289a565b60405180910390fd5b5b8160400135600160008381526020019081526020016000206001016000828254610cdd91906128ba565b92505081905550816080016020810190610cf7919061293c565b6001600083815260200190815260200160002060020160008282829054906101000a900463ffffffff16610d2b9190612969565b92506101000a81548163ffffffff021916908363ffffffff160217905550426001600083815260200190815260200160002060000181905550807f5c85091c17a5842c079f33795b436b8d466c439605ca6224eb0c0c59624e15a63384604051610d96929190612b1a565b60405180910390a25050565b610daa6113a0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1190612bb5565b60405180910390fd5b610e23816110fd565b50565b600046308484604051602001610e3f9493929190612bd5565b60405160208183030381529060405280519060200120905092915050565b60006002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790612c67565b60405180910390fd5b60016002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f5191906128ba565b925050819055505050565b600081604051602001610f6f9190612cff565b604051602081830303815290604052805190602001209050919050565b6000806000610f9b85856114f6565b91509150610fa881611548565b819250505092915050565b60006001600085815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600061102e838560a0016020810190611028919061269e565b846116b6565b905080826020015161104091906125c5565b60016000878152602001908152602001600020600101819055506001826040015161106b9190612d25565b6001600087815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506110bc8460000160208101906110b59190611f57565b848361141e565b847f0508a8b4117d9a7b3d8f5895f6413e61b4f9a2df35afbfb41e78d0ecfff1843f84836040516110ee929190612d59565b60405180910390a25050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006111ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6117f0565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112206113a0565b50565b61124f7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6117fa565b60000160009054906101000a900460ff16156112735761126e83611804565b61139b565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b957600080fd5b505afa9250505080156112ea57506040513d601f19601f820116820180604052508101906112e79190612d97565b60015b611329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132090612e36565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461138e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138590612ec8565b60405180910390fd5b5061139a8383836118bd565b5b505050565b6113a86118e9565b73ffffffffffffffffffffffffffffffffffffffff166113c6610902565b73ffffffffffffffffffffffffffffffffffffffff161461141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390612f34565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114625761145d82826118f1565b6114f1565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161149d929190612d59565b602060405180830381600087803b1580156114b757600080fd5b505af11580156114cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ef9190612821565b505b505050565b6000806041835114156115385760008060006020860151925060408601519150606086015160001a905061152c878285856119e5565b94509450505050611541565b60006002915091505b9250929050565b6000600481111561155c5761155b612f54565b5b81600481111561156f5761156e612f54565b5b141561157a576116b3565b6001600481111561158e5761158d612f54565b5b8160048111156115a1576115a0612f54565b5b14156115e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d990612fcf565b60405180910390fd5b600260048111156115f6576115f5612f54565b5b81600481111561160957611608612f54565b5b141561164a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116419061303b565b60405180910390fd5b6003600481111561165e5761165d612f54565b5b81600481111561167157611670612f54565b5b14156116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a9906130cd565b60405180910390fd5b5b50565b60008082602001511180156116d557506000826040015163ffffffff16115b611714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170b90613139565b60405180910390fd5b6001826040015163ffffffff16141561173357816020015190506117db565b60018360ff16141561176057816040015163ffffffff1682602001516117599190613188565b90506117da565b60028360ff1614156117d9576000844442604051602001611783939291906131b9565b6040516020818303038152906040528051906020012060001c905060006002846040015163ffffffff1685602001516117bc9190613188565b6117c691906131f0565b905080826117d4919061324a565b925050505b5b5b60008114156117e957600190505b9392505050565b6000819050919050565b6000819050919050565b61180d81611ac8565b61184c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611843906132ed565b60405180910390fd5b806118797f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6117f0565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6118c683611aeb565b6000825111806118d35750805b156118e4576118e28383611b3a565b505b505050565b600033905090565b80471015611934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192b90613359565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161195a906133aa565b60006040518083038185875af1925050503d8060008114611997576040519150601f19603f3d011682016040523d82523d6000602084013e61199c565b606091505b50509050806119e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d790613431565b60405180910390fd5b505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611a20576000600391509150611abf565b600060018787878760405160008152602001604052604051611a459493929190613460565b6020604051602081039080840390855afa158015611a67573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ab657600060019250925050611abf565b80600092509250505b94509492505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b611af481611804565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060611b5f83836040518060600160405280602781526020016135fe60279139611b67565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051611b919190613514565b600060405180830381855af49150503d8060008114611bcc576040519150601f19603f3d011682016040523d82523d6000602084013e611bd1565b606091505b5091509150611be286838387611bed565b925050509392505050565b60608315611c5057600083511415611c4857611c0885611ac8565b611c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3e90613577565b60405180910390fd5b5b829050611c5b565b611c5a8383611c63565b5b949350505050565b600082511115611c765781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caa91906135db565b60405180910390fd5b60405180606001604052806000815260200160008152602001600063ffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d1982611cee565b9050919050565b611d2981611d0e565b8114611d3457600080fd5b50565b600081359050611d4681611d20565b92915050565b600080fd5b600060c08284031215611d6757611d66611d4c565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d9557611d94611d70565b5b8235905067ffffffffffffffff811115611db257611db1611d75565b5b602083019150836001820283011115611dce57611dcd611d7a565b5b9250929050565b60008060008060006101208688031215611df257611df1611ce4565b5b6000611e0088828901611d37565b9550506020611e1188828901611d51565b94505060e0611e2288828901611d37565b93505061010086013567ffffffffffffffff811115611e4457611e43611ce9565b5b611e5088828901611d7f565b92509250509295509295909350565b6000819050919050565b611e7281611e5f565b8114611e7d57600080fd5b50565b600081359050611e8f81611e69565b92915050565b600060208284031215611eab57611eaa611ce4565b5b6000611eb984828501611e80565b91505092915050565b6000819050919050565b611ed581611ec2565b82525050565b600063ffffffff82169050919050565b611ef481611edb565b82525050565b606082016000820151611f106000850182611ecc565b506020820151611f236020850182611ecc565b506040820151611f366040850182611eeb565b50505050565b6000606082019050611f516000830184611efa565b92915050565b600060208284031215611f6d57611f6c611ce4565b5b6000611f7b84828501611d37565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fd282611f89565b810181811067ffffffffffffffff82111715611ff157611ff0611f9a565b5b80604052505050565b6000612004611cda565b90506120108282611fc9565b919050565b600067ffffffffffffffff8211156120305761202f611f9a565b5b61203982611f89565b9050602081019050919050565b82818337600083830152505050565b600061206861206384612015565b611ffa565b90508281526020810184848401111561208457612083611f84565b5b61208f848285612046565b509392505050565b600082601f8301126120ac576120ab611d70565b5b81356120bc848260208601612055565b91505092915050565b600080604083850312156120dc576120db611ce4565b5b60006120ea85828601611d37565b925050602083013567ffffffffffffffff81111561210b5761210a611ce9565b5b61211785828601612097565b9150509250929050565b61212a81611e5f565b82525050565b60006020820190506121456000830184612121565b92915050565b61215481611d0e565b82525050565b600060208201905061216f600083018461214b565b92915050565b6000806000610100848603121561218f5761218e611ce4565b5b600061219d86828701611d37565b93505060206121ae86828701611d51565b92505060e06121bf86828701611d37565b9150509250925092565b600060c082840312156121df576121de611ce4565b5b60006121ed84828501611d51565b91505092915050565b600060408201905061220b6000830185612121565b612218602083018461214b565b9392505050565b600082825260208201905092915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b600061226660118361221f565b915061227182612230565b602082019050919050565b6000602082019050818103600083015261229581612259565b9050919050565b7f4f776e657220616c726561647920736574000000000000000000000000000000600082015250565b60006122d260118361221f565b91506122dd8261229c565b602082019050919050565b60006020820190508181036000830152612301816122c5565b9050919050565b7f4f776e65722063616e6e6f742062652061646472657373207a65726f00000000600082015250565b600061233e601c8361221f565b915061234982612308565b602082019050919050565b6000602082019050818103600083015261236d81612331565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006123d0602c8361221f565b91506123db82612374565b604082019050919050565b600060208201905081810360008301526123ff816123c3565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000612462602c8361221f565b915061246d82612406565b604082019050919050565b6000602082019050818103600083015261249181612455565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b60006124f460388361221f565b91506124ff82612498565b604082019050919050565b60006020820190508181036000830152612523816124e7565b9050919050565b7f556e617574686f72697a6564206f70657261746f720000000000000000000000600082015250565b600061256060158361221f565b915061256b8261252a565b602082019050919050565b6000602082019050818103600083015261258f81612553565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125d082611ec2565b91506125db83611ec2565b9250828210156125ee576125ed612596565b5b828203905092915050565b7f5061636b6574206c6f636b656400000000000000000000000000000000000000600082015250565b600061262f600d8361221f565b915061263a826125f9565b602082019050919050565b6000602082019050818103600083015261265e81612622565b9050919050565b600060ff82169050919050565b61267b81612665565b811461268657600080fd5b50565b60008135905061269881612672565b92915050565b6000602082840312156126b4576126b3611ce4565b5b60006126c284828501612689565b91505092915050565b7f496e76616c6964206d6f64650000000000000000000000000000000000000000600082015250565b6000612701600c8361221f565b915061270c826126cb565b602082019050919050565b60006020820190508181036000830152612730816126f4565b9050919050565b7f5061636b657420616c7265616479206372656174656400000000000000000000600082015250565b600061276d60168361221f565b915061277882612737565b602082019050919050565b6000602082019050818103600083015261279c81612760565b9050919050565b6127ac81611ec2565b82525050565b60006060820190506127c7600083018661214b565b6127d4602083018561214b565b6127e160408301846127a3565b949350505050565b60008115159050919050565b6127fe816127e9565b811461280957600080fd5b50565b60008151905061281b816127f5565b92915050565b60006020828403121561283757612836611ce4565b5b60006128458482850161280c565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061288460148361221f565b915061288f8261284e565b602082019050919050565b600060208201905081810360008301526128b381612877565b9050919050565b60006128c582611ec2565b91506128d083611ec2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561290557612904612596565b5b828201905092915050565b61291981611edb565b811461292457600080fd5b50565b60008135905061293681612910565b92915050565b60006020828403121561295257612951611ce4565b5b600061296084828501612927565b91505092915050565b600061297482611edb565b915061297f83611edb565b92508263ffffffff0382111561299857612997612596565b5b828201905092915050565b60006129b26020840184611d37565b905092915050565b6129c381611d0e565b82525050565b60006129d86020840184611e80565b905092915050565b6129e981611e5f565b82525050565b6129f881611ec2565b8114612a0357600080fd5b50565b600081359050612a15816129ef565b92915050565b6000612a2a6020840184612a06565b905092915050565b6000612a416020840184612927565b905092915050565b6000612a586020840184612689565b905092915050565b612a6981612665565b82525050565b60c08201612a8060008301836129a3565b612a8d60008501826129ba565b50612a9b60208301836129c9565b612aa860208501826129e0565b50612ab66040830183612a1b565b612ac36040850182611ecc565b50612ad160608301836129a3565b612ade60608501826129ba565b50612aec6080830183612a32565b612af96080850182611eeb565b50612b0760a0830183612a49565b612b1460a0850182612a60565b50505050565b600060e082019050612b2f600083018561214b565b612b3c6020830184612a6f565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612b9f60268361221f565b9150612baa82612b43565b604082019050919050565b60006020820190508181036000830152612bce81612b92565b9050919050565b600061012082019050612beb60008301876127a3565b612bf8602083018661214b565b612c05604083018561214b565b612c126060830184612a6f565b95945050505050565b7f416c726561647920636c61696d65640000000000000000000000000000000000600082015250565b6000612c51600f8361221f565b9150612c5c82612c1b565b602082019050919050565b60006020820190508181036000830152612c8081612c44565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612cc8601c83612c87565b9150612cd382612c92565b601c82019050919050565b6000819050919050565b612cf9612cf482611e5f565b612cde565b82525050565b6000612d0a82612cbb565b9150612d168284612ce8565b60208201915081905092915050565b6000612d3082611edb565b9150612d3b83611edb565b925082821015612d4e57612d4d612596565b5b828203905092915050565b6000604082019050612d6e600083018561214b565b612d7b60208301846127a3565b9392505050565b600081519050612d9181611e69565b92915050565b600060208284031215612dad57612dac611ce4565b5b6000612dbb84828501612d82565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000612e20602e8361221f565b9150612e2b82612dc4565b604082019050919050565b60006020820190508181036000830152612e4f81612e13565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000612eb260298361221f565b9150612ebd82612e56565b604082019050919050565b60006020820190508181036000830152612ee181612ea5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612f1e60208361221f565b9150612f2982612ee8565b602082019050919050565b60006020820190508181036000830152612f4d81612f11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612fb960188361221f565b9150612fc482612f83565b602082019050919050565b60006020820190508181036000830152612fe881612fac565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613025601f8361221f565b915061303082612fef565b602082019050919050565b6000602082019050818103600083015261305481613018565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006130b760228361221f565b91506130c28261305b565b604082019050919050565b600060208201905081810360008301526130e6816130aa565b9050919050565b7f456d707479205061636b65740000000000000000000000000000000000000000600082015250565b6000613123600c8361221f565b915061312e826130ed565b602082019050919050565b6000602082019050818103600083015261315281613116565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061319382611ec2565b915061319e83611ec2565b9250826131ae576131ad613159565b5b828204905092915050565b60006060820190506131ce600083018661214b565b6131db60208301856127a3565b6131e860408301846127a3565b949350505050565b60006131fb82611ec2565b915061320683611ec2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561323f5761323e612596565b5b828202905092915050565b600061325582611ec2565b915061326083611ec2565b9250826132705761326f613159565b5b828206905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006132d7602d8361221f565b91506132e28261327b565b604082019050919050565b60006020820190508181036000830152613306816132ca565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000613343601d8361221f565b915061334e8261330d565b602082019050919050565b6000602082019050818103600083015261337281613336565b9050919050565b600081905092915050565b50565b6000613394600083613379565b915061339f82613384565b600082019050919050565b60006133b582613387565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061341b603a8361221f565b9150613426826133bf565b604082019050919050565b6000602082019050818103600083015261344a8161340e565b9050919050565b61345a81612665565b82525050565b60006080820190506134756000830187612121565b6134826020830186613451565b61348f6040830185612121565b61349c6060830184612121565b95945050505050565b600081519050919050565b60005b838110156134ce5780820151818401526020810190506134b3565b838111156134dd576000848401525b50505050565b60006134ee826134a5565b6134f88185613379565b93506135088185602086016134b0565b80840191505092915050565b600061352082846134e3565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613561601d8361221f565b915061356c8261352b565b602082019050919050565b6000602082019050818103600083015261359081613554565b9050919050565b600081519050919050565b60006135ad82613597565b6135b7818561221f565b93506135c78185602086016134b0565b6135d081611f89565b840191505092915050565b600060208201905081810360008301526135f581846135a2565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202465115075c7b6e5270ec7f1cd02cb534affa019363fc2fcbe80af202699895964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2519,
        "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
        "label": "packets_",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RedPacket)2514_storage)"
      },
      {
        "astId": 2525,
        "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
        "label": "count_",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RedPacket)2514_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HappyRedPacket.RedPacket)",
        "numberOfBytes": "32",
        "value": "t_struct(RedPacket)2514_storage"
      },
      "t_struct(RedPacket)2514_storage": {
        "encoding": "inplace",
        "label": "struct HappyRedPacket.RedPacket",
        "members": [
          {
            "astId": 2509,
            "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
            "label": "createdAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2511,
            "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2513,
            "contract": "contracts/apps/HappyRedPacket.sol:HappyRedPacket",
            "label": "split",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}