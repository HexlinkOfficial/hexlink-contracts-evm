{
  "address": "0xE21530426eC286192BfCA71D64df217F23D294D4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hexlink",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_redPacket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Deploy",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "identityType",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "authType",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AuthProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "deployAndCreateRedPacket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "identityType",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "authType",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AuthProof[]",
          "name": "proofs",
          "type": "tuple[]"
        }
      ],
      "name": "redeployAndReset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2cef71678b9f36e23ae04f393619dbbd2d6807cd268a75bb869a4b5325c8f04c",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0xE21530426eC286192BfCA71D64df217F23D294D4",
    "transactionIndex": 456,
    "gasUsed": "1193387",
    "logsBloom": "0x
    "blockHash": "0xaa2bbe31b8f9558b962e783e338856864970454e9481c04e6ce456a4868d2066",
    "transactionHash": "0x2cef71678b9f36e23ae04f393619dbbd2d6807cd268a75bb869a4b5325c8f04c",
    "logs": [],
    "blockNumber": 8296478,
    "cumulativeGasUsed": "17244694",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbAd6A7948A1d3031Ee7236d0180b6271FA569148",
    "0x4c46BB27cdA575C84bc0fD87de9D2a3ef0F0BB4b"
  ],
  "numDeployments": 4,
  "solcInputHash": "337afd4ff453e77e974ce2b8b0a1cc67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hexlink\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_redPacket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Deploy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"identityType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"authType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AuthProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"deployAndCreateRedPacket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"identityType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"authType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AuthProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"redeployAndReset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/HexlinkHelper.sol\":\"HexlinkHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/apps/HexlinkHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Hexlink Contracts\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../hexlink/IHexlink.sol\\\";\\nimport \\\"../auth/AuthProof.sol\\\";\\n\\ncontract HexlinkHelper {\\n    using Address for address;\\n\\n    event Deploy(bytes32 indexed name, address indexed impl, address account);\\n    IHexlink immutable hexlink;\\n    address immutable accountBase;\\n    address immutable redPacket;\\n\\n    constructor(\\n        address _hexlink,\\n        address _redPacket\\n    ) {\\n        hexlink = IHexlink(_hexlink);\\n        accountBase = hexlink.accountBase();\\n        redPacket = _redPacket;\\n    }\\n\\n    function deploy(bytes32 salt, bytes calldata txData) public returns(address) {\\n        address account = Clones.cloneDeterministic(accountBase, salt);\\n        account.functionCall(txData);\\n        emit Deploy(salt, accountBase, account);\\n        return account;\\n    }\\n\\n    function redeployAndReset(\\n        bytes32 name,\\n        bytes calldata txData,\\n        AuthProof[] calldata proofs\\n    ) external {\\n        bytes32 salt = keccak256(abi.encode(name, block.timestamp));\\n        address account = deploy(salt, txData);\\n        if (proofs.length == 2) {\\n            IHexlink(hexlink).reset2Fac(name, account, proofs[0], proofs[1]);\\n        } else if (proofs.length == 1) {\\n            IHexlink(hexlink).reset2Stage(name, account, proofs[0]);\\n        } else {\\n            revert(\\\"HEXL014\\\");\\n        }\\n    }\\n\\n    function deployAndCreateRedPacket(\\n        bytes32 name,\\n        bytes calldata initData,\\n        bytes calldata txData,\\n        AuthProof calldata proof\\n    ) external payable {\\n        address account = hexlink.deploy(name, initData, proof);\\n        if (msg.value > 0) {\\n            Address.sendValue(payable(account), msg.value);\\n        }\\n        account.functionCall(txData);\\n    }\\n}\\n\",\"keccak256\":\"0x25d50030f87bdf4192ec58b513ac7b70ee0d9e3cb133e64be63a4c4f7438cd59\",\"license\":\"MIT\"},\"contracts/auth/AuthProof.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\n/*\\n * The request id is a hash over the request, contract processing\\n * the request and chainId. The signature is signed over keccak256\\n * hash of AuthProofToSign struct\\n */\\nstruct AuthProof{\\n    uint256 issuedAt;\\n    bytes32 identityType;\\n    bytes32 authType;\\n    bytes signature; // aggregated signature\\n}\",\"keccak256\":\"0xca1d55dc0ac1c3eab66dbc7fa2475fc606d76833fbe6bde2beb2abd50aa7924d\",\"license\":\"Unlicense\"},\"contracts/hexlink/IHexlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Hexlink Contracts\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"../auth/AuthProof.sol\\\";\\n\\ninterface IHexlink {\\n    function accountBase() external view returns (address);\\n\\n    function addressOfName(bytes32 name) external view returns (address);\\n\\n    function bumpNonce(\\n        bytes32 name,\\n        AuthProof calldata proof\\n    ) external;\\n\\n    function deploy(\\n        bytes32 name,\\n        bytes calldata txData,\\n        AuthProof calldata proof\\n    ) external returns(address);\\n\\n    function reset(\\n        bytes32 name,\\n        address account,\\n        AuthProof calldata proof\\n    ) external;\\n\\n    function reset2Fac(\\n        bytes32 name,\\n        address account,\\n        AuthProof calldata proof1,\\n        AuthProof calldata proof2\\n    ) external;\\n\\n    function reset2Stage(\\n        bytes32 name,\\n        address account,\\n        AuthProof calldata proof\\n    ) external;\\n}\",\"keccak256\":\"0x5b192a5302a8dd990dc4cd0259bdcde17a4147030b990e5fdeb2cb3342bd49bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620016f7380380620016f78339818101604052810190620000379190620001d4565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c73ffffffffffffffffffffffffffffffffffffffff1663cd6a84b36040518163ffffffff1660e01b815260040160206040518083038186803b158015620000ba57600080fd5b505afa158015620000cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f591906200021b565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200024d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019c826200016f565b9050919050565b620001ae816200018f565b8114620001ba57600080fd5b50565b600081519050620001ce81620001a3565b92915050565b60008060408385031215620001ee57620001ed6200016a565b5b6000620001fe85828601620001bd565b92505060206200021185828601620001bd565b9150509250929050565b6000602082840312156200023457620002336200016a565b5b60006200024484828501620001bd565b91505092915050565b60805160601c60a05160601c60c05160601c611460620002976000396000505060008181610203015261029a01526000818160bf0152818161035c015261044801526114606000f3fe6080604052600436106100345760003560e01c8063baf83bb014610039578063cdcb760a14610055578063e3db893314610092575b600080fd5b610053600480360381019061004e91906109c0565b6100bb565b005b34801561006157600080fd5b5061007c60048036038101906100779190610a83565b6101fb565b6040516100899190610b24565b60405180910390f35b34801561009e57600080fd5b506100b960048036038101906100b49190610b95565b610312565b005b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2b01a82888888866040518563ffffffff1660e01b815260040161011c9493929190610e4e565b602060405180830381600087803b15801561013657600080fd5b505af115801561014a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016e9190610ec1565b90506000341115610184576101838134610544565b5b6101f184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661063890919063ffffffff16565b5050505050505050565b6000806102287f000000000000000000000000000000000000000000000000000000000000000086610684565b905061029784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661063890919063ffffffff16565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16857fd2072acd88f7b2aa8b2ad0a228e28261caec5ae7ba5f4ba3e6afc475597fe068836040516102ff9190610b24565b60405180910390a3809150509392505050565b60008542604051602001610327929190610efd565b604051602081830303815290604052805190602001209050600061034c8287876101fb565b9050600284849050141561043a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663643012c38883878760008181106103ac576103ab610f26565b5b90506020028101906103be9190610f5a565b888860018181106103d2576103d1610f26565b5b90506020028101906103e49190610f5a565b6040518563ffffffff1660e01b81526004016104039493929190610f82565b600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b5050505061053b565b60018484905014156104ff577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b7a24c0f88838787600081811061049857610497610f26565b5b90506020028101906104aa9190610f5a565b6040518463ffffffff1660e01b81526004016104c893929190610fd5565b600060405180830381600087803b1580156104e257600080fd5b505af11580156104f6573d6000803e3d6000fd5b5050505061053a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053190611070565b60405180910390fd5b5b50505050505050565b80471015610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e906110dc565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516105ad9061112d565b60006040518083038185875af1925050503d80600081146105ea576040519150601f19603f3d011682016040523d82523d6000602084013e6105ef565b606091505b5050905080610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a906111b4565b60405180910390fd5b505050565b606061067c838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610741565b905092915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073290611220565b60405180910390fd5b92915050565b606082471015610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077d906112b2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107af9190611341565b60006040518083038185875af1925050503d80600081146107ec576040519150601f19603f3d011682016040523d82523d6000602084013e6107f1565b606091505b50915091506108028783838761080e565b92505050949350505050565b60608315610871576000835114156108695761082985610884565b610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f906113a4565b60405180910390fd5b5b82905061087c565b61087b83836108a7565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156108ba5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee9190611408565b60405180910390fd5b600080fd5b600080fd5b6000819050919050565b61091481610901565b811461091f57600080fd5b50565b6000813590506109318161090b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261095c5761095b610937565b5b8235905067ffffffffffffffff8111156109795761097861093c565b5b60208301915083600182028301111561099557610994610941565b5b9250929050565b600080fd5b6000608082840312156109b7576109b661099c565b5b81905092915050565b600080600080600080608087890312156109dd576109dc6108f7565b5b60006109eb89828a01610922565b965050602087013567ffffffffffffffff811115610a0c57610a0b6108fc565b5b610a1889828a01610946565b9550955050604087013567ffffffffffffffff811115610a3b57610a3a6108fc565b5b610a4789828a01610946565b9350935050606087013567ffffffffffffffff811115610a6a57610a696108fc565b5b610a7689828a016109a1565b9150509295509295509295565b600080600060408486031215610a9c57610a9b6108f7565b5b6000610aaa86828701610922565b935050602084013567ffffffffffffffff811115610acb57610aca6108fc565b5b610ad786828701610946565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0e82610ae3565b9050919050565b610b1e81610b03565b82525050565b6000602082019050610b396000830184610b15565b92915050565b60008083601f840112610b5557610b54610937565b5b8235905067ffffffffffffffff811115610b7257610b7161093c565b5b602083019150836020820283011115610b8e57610b8d610941565b5b9250929050565b600080600080600060608688031215610bb157610bb06108f7565b5b6000610bbf88828901610922565b955050602086013567ffffffffffffffff811115610be057610bdf6108fc565b5b610bec88828901610946565b9450945050604086013567ffffffffffffffff811115610c0f57610c0e6108fc565b5b610c1b88828901610b3f565b92509250509295509295909350565b610c3381610901565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610c768385610c39565b9350610c83838584610c4a565b610c8c83610c59565b840190509392505050565b6000819050919050565b610caa81610c97565b8114610cb557600080fd5b50565b600081359050610cc781610ca1565b92915050565b6000610cdc6020840184610cb8565b905092915050565b610ced81610c97565b82525050565b6000610d026020840184610922565b905092915050565b610d1381610901565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610d4557610d44610d23565b5b83810192508235915060208301925067ffffffffffffffff821115610d6d57610d6c610d19565b5b600182023603841315610d8357610d82610d1e565b5b509250929050565b600082825260208201905092915050565b6000610da88385610d8b565b9350610db5838584610c4a565b610dbe83610c59565b840190509392505050565b600060808301610ddc6000840184610ccd565b610de96000860182610ce4565b50610df76020840184610cf3565b610e046020860182610d0a565b50610e126040840184610cf3565b610e1f6040860182610d0a565b50610e2d6060840184610d28565b8583036060870152610e40838284610d9c565b925050508091505092915050565b6000606082019050610e636000830187610c2a565b8181036020830152610e76818587610c6a565b90508181036040830152610e8a8184610dc9565b905095945050505050565b610e9e81610b03565b8114610ea957600080fd5b50565b600081519050610ebb81610e95565b92915050565b600060208284031215610ed757610ed66108f7565b5b6000610ee584828501610eac565b91505092915050565b610ef781610c97565b82525050565b6000604082019050610f126000830185610c2a565b610f1f6020830184610eee565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600082356001608003833603038112610f7657610f75610f55565b5b80830191505092915050565b6000608082019050610f976000830187610c2a565b610fa46020830186610b15565b8181036040830152610fb68185610dc9565b90508181036060830152610fca8184610dc9565b905095945050505050565b6000606082019050610fea6000830186610c2a565b610ff76020830185610b15565b81810360408301526110098184610dc9565b9050949350505050565b600082825260208201905092915050565b7f4845584c30313400000000000000000000000000000000000000000000000000600082015250565b600061105a600783611013565b915061106582611024565b602082019050919050565b600060208201905081810360008301526110898161104d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006110c6601d83611013565b91506110d182611090565b602082019050919050565b600060208201905081810360008301526110f5816110b9565b9050919050565b600081905092915050565b50565b60006111176000836110fc565b915061112282611107565b600082019050919050565b60006111388261110a565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061119e603a83611013565b91506111a982611142565b604082019050919050565b600060208201905081810360008301526111cd81611191565b9050919050565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b600061120a601783611013565b9150611215826111d4565b602082019050919050565b60006020820190508181036000830152611239816111fd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061129c602683611013565b91506112a782611240565b604082019050919050565b600060208201905081810360008301526112cb8161128f565b9050919050565b600081519050919050565b60005b838110156112fb5780820151818401526020810190506112e0565b8381111561130a576000848401525b50505050565b600061131b826112d2565b61132581856110fc565b93506113358185602086016112dd565b80840191505092915050565b600061134d8284611310565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061138e601d83611013565b915061139982611358565b602082019050919050565b600060208201905081810360008301526113bd81611381565b9050919050565b600081519050919050565b60006113da826113c4565b6113e48185611013565b93506113f48185602086016112dd565b6113fd81610c59565b840191505092915050565b6000602082019050818103600083015261142281846113cf565b90509291505056fea2646970667358221220239f4f8f9373d7de6ee91c09b7d641a956bc1c8b02b94a9a448de1d2c059630b64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063baf83bb014610039578063cdcb760a14610055578063e3db893314610092575b600080fd5b610053600480360381019061004e91906109c0565b6100bb565b005b34801561006157600080fd5b5061007c60048036038101906100779190610a83565b6101fb565b6040516100899190610b24565b60405180910390f35b34801561009e57600080fd5b506100b960048036038101906100b49190610b95565b610312565b005b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2b01a82888888866040518563ffffffff1660e01b815260040161011c9493929190610e4e565b602060405180830381600087803b15801561013657600080fd5b505af115801561014a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016e9190610ec1565b90506000341115610184576101838134610544565b5b6101f184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661063890919063ffffffff16565b5050505050505050565b6000806102287f000000000000000000000000000000000000000000000000000000000000000086610684565b905061029784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661063890919063ffffffff16565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16857fd2072acd88f7b2aa8b2ad0a228e28261caec5ae7ba5f4ba3e6afc475597fe068836040516102ff9190610b24565b60405180910390a3809150509392505050565b60008542604051602001610327929190610efd565b604051602081830303815290604052805190602001209050600061034c8287876101fb565b9050600284849050141561043a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663643012c38883878760008181106103ac576103ab610f26565b5b90506020028101906103be9190610f5a565b888860018181106103d2576103d1610f26565b5b90506020028101906103e49190610f5a565b6040518563ffffffff1660e01b81526004016104039493929190610f82565b600060405180830381600087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b5050505061053b565b60018484905014156104ff577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b7a24c0f88838787600081811061049857610497610f26565b5b90506020028101906104aa9190610f5a565b6040518463ffffffff1660e01b81526004016104c893929190610fd5565b600060405180830381600087803b1580156104e257600080fd5b505af11580156104f6573d6000803e3d6000fd5b5050505061053a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053190611070565b60405180910390fd5b5b50505050505050565b80471015610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e906110dc565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516105ad9061112d565b60006040518083038185875af1925050503d80600081146105ea576040519150601f19603f3d011682016040523d82523d6000602084013e6105ef565b606091505b5050905080610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a906111b4565b60405180910390fd5b505050565b606061067c838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610741565b905092915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073290611220565b60405180910390fd5b92915050565b606082471015610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077d906112b2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107af9190611341565b60006040518083038185875af1925050503d80600081146107ec576040519150601f19603f3d011682016040523d82523d6000602084013e6107f1565b606091505b50915091506108028783838761080e565b92505050949350505050565b60608315610871576000835114156108695761082985610884565b610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f906113a4565b60405180910390fd5b5b82905061087c565b61087b83836108a7565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156108ba5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee9190611408565b60405180910390fd5b600080fd5b600080fd5b6000819050919050565b61091481610901565b811461091f57600080fd5b50565b6000813590506109318161090b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261095c5761095b610937565b5b8235905067ffffffffffffffff8111156109795761097861093c565b5b60208301915083600182028301111561099557610994610941565b5b9250929050565b600080fd5b6000608082840312156109b7576109b661099c565b5b81905092915050565b600080600080600080608087890312156109dd576109dc6108f7565b5b60006109eb89828a01610922565b965050602087013567ffffffffffffffff811115610a0c57610a0b6108fc565b5b610a1889828a01610946565b9550955050604087013567ffffffffffffffff811115610a3b57610a3a6108fc565b5b610a4789828a01610946565b9350935050606087013567ffffffffffffffff811115610a6a57610a696108fc565b5b610a7689828a016109a1565b9150509295509295509295565b600080600060408486031215610a9c57610a9b6108f7565b5b6000610aaa86828701610922565b935050602084013567ffffffffffffffff811115610acb57610aca6108fc565b5b610ad786828701610946565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0e82610ae3565b9050919050565b610b1e81610b03565b82525050565b6000602082019050610b396000830184610b15565b92915050565b60008083601f840112610b5557610b54610937565b5b8235905067ffffffffffffffff811115610b7257610b7161093c565b5b602083019150836020820283011115610b8e57610b8d610941565b5b9250929050565b600080600080600060608688031215610bb157610bb06108f7565b5b6000610bbf88828901610922565b955050602086013567ffffffffffffffff811115610be057610bdf6108fc565b5b610bec88828901610946565b9450945050604086013567ffffffffffffffff811115610c0f57610c0e6108fc565b5b610c1b88828901610b3f565b92509250509295509295909350565b610c3381610901565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610c768385610c39565b9350610c83838584610c4a565b610c8c83610c59565b840190509392505050565b6000819050919050565b610caa81610c97565b8114610cb557600080fd5b50565b600081359050610cc781610ca1565b92915050565b6000610cdc6020840184610cb8565b905092915050565b610ced81610c97565b82525050565b6000610d026020840184610922565b905092915050565b610d1381610901565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610d4557610d44610d23565b5b83810192508235915060208301925067ffffffffffffffff821115610d6d57610d6c610d19565b5b600182023603841315610d8357610d82610d1e565b5b509250929050565b600082825260208201905092915050565b6000610da88385610d8b565b9350610db5838584610c4a565b610dbe83610c59565b840190509392505050565b600060808301610ddc6000840184610ccd565b610de96000860182610ce4565b50610df76020840184610cf3565b610e046020860182610d0a565b50610e126040840184610cf3565b610e1f6040860182610d0a565b50610e2d6060840184610d28565b8583036060870152610e40838284610d9c565b925050508091505092915050565b6000606082019050610e636000830187610c2a565b8181036020830152610e76818587610c6a565b90508181036040830152610e8a8184610dc9565b905095945050505050565b610e9e81610b03565b8114610ea957600080fd5b50565b600081519050610ebb81610e95565b92915050565b600060208284031215610ed757610ed66108f7565b5b6000610ee584828501610eac565b91505092915050565b610ef781610c97565b82525050565b6000604082019050610f126000830185610c2a565b610f1f6020830184610eee565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600082356001608003833603038112610f7657610f75610f55565b5b80830191505092915050565b6000608082019050610f976000830187610c2a565b610fa46020830186610b15565b8181036040830152610fb68185610dc9565b90508181036060830152610fca8184610dc9565b905095945050505050565b6000606082019050610fea6000830186610c2a565b610ff76020830185610b15565b81810360408301526110098184610dc9565b9050949350505050565b600082825260208201905092915050565b7f4845584c30313400000000000000000000000000000000000000000000000000600082015250565b600061105a600783611013565b915061106582611024565b602082019050919050565b600060208201905081810360008301526110898161104d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006110c6601d83611013565b91506110d182611090565b602082019050919050565b600060208201905081810360008301526110f5816110b9565b9050919050565b600081905092915050565b50565b60006111176000836110fc565b915061112282611107565b600082019050919050565b60006111388261110a565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061119e603a83611013565b91506111a982611142565b604082019050919050565b600060208201905081810360008301526111cd81611191565b9050919050565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b600061120a601783611013565b9150611215826111d4565b602082019050919050565b60006020820190508181036000830152611239816111fd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061129c602683611013565b91506112a782611240565b604082019050919050565b600060208201905081810360008301526112cb8161128f565b9050919050565b600081519050919050565b60005b838110156112fb5780820151818401526020810190506112e0565b8381111561130a576000848401525b50505050565b600061131b826112d2565b61132581856110fc565b93506113358185602086016112dd565b80840191505092915050565b600061134d8284611310565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061138e601d83611013565b915061139982611358565b602082019050919050565b600060208201905081810360008301526113bd81611381565b9050919050565b600081519050919050565b60006113da826113c4565b6113e48185611013565b93506113f48185602086016112dd565b6113fd81610c59565b840191505092915050565b6000602082019050818103600083015261142281846113cf565b90509291505056fea2646970667358221220239f4f8f9373d7de6ee91c09b7d641a956bc1c8b02b94a9a448de1d2c059630b64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}