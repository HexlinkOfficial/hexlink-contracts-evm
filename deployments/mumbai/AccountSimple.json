{
  "address": "0x82948DAF7F44F50E1CA3dEeCDA9921613D51b7E8",
  "abi": [
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotTransitiveOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gasStation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositGasTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct BasicUserOp",
          "name": "op",
          "type": "tuple"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct BasicUserOp[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "execBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "refundGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateAndCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4c5998fc126bfd30198f2792fb7d9218dd7b62fd56524a54486c486ce423167e",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0x82948DAF7F44F50E1CA3dEeCDA9921613D51b7E8",
    "transactionIndex": 2,
    "gasUsed": "2187441",
    "logsBloom": "0x
    "blockHash": "0x1ba314aa36ef111cfd46133a77dd37ecf5cdd85970e68746c020cfa6287b7096",
    "transactionHash": "0x4c5998fc126bfd30198f2792fb7d9218dd7b62fd56524a54486c486ce423167e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 30668888,
        "transactionHash": "0x4c5998fc126bfd30198f2792fb7d9218dd7b62fd56524a54486c486ce423167e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a4b368e3a9d49ff15b58f70fb976724a98b6d149",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000136daa3d6e2900000000000000000000000000000000000000000000000000263e6217ec38f0760000000000000000000000000000000000000000000001a9c7f2137a4586da47000000000000000000000000000000000000000000000000262af46daecac7760000000000000000000000000000000000000000000001a9c805812482f50347",
        "logIndex": 4,
        "blockHash": "0x1ba314aa36ef111cfd46133a77dd37ecf5cdd85970e68746c020cfa6287b7096"
      }
    ],
    "blockNumber": 30668888,
    "cumulativeGasUsed": "2312363",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "66f81f85fa58eb5ab3b4a52aa9c68636",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasStation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositGasTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct BasicUserOp\",\"name\":\"op\",\"type\":\"tuple\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct BasicUserOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"execBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"refundGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/account/AccountSimple.sol\":\"AccountSimple\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\",\"keccak256\":\"0xd2d21c507ed587cd5de6cc016d4b9c7e956e468108b784455a400301707031c1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe16b09090c1251f8cc97fb2cc10c86675e0d0d9f0fc0032b417c37c8dba2db5f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x0185d24250a5e6fbafce443b9ba19bba761803e3e5d91ba423bfb1f5f0bbdbf9\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7385e2020de914f75cabdc83c6adf88ed21e9de14669a89b3832b80f4f8c7b73\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/account/AccountBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\n/* solhint-disable avoid-low-level-calls */\\n\\nimport \\\"@solidstate/contracts/access/ownable/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IAccount.sol\\\";\\n\\nabstract contract AccountBase is IERC1271, IAccount, Ownable {\\n    using Address for address;\\n    using ECDSA for bytes32;\\n\\n    receive() external payable { }\\n\\n    fallback(bytes calldata) external returns (bytes memory) {\\n        // for ERC1155 and ERC3525\\n        return abi.encode(msg.sig);\\n    }\\n\\n    function isValidSignature(\\n        bytes32 message,\\n        bytes calldata signature\\n    ) external override view returns(bytes4) {\\n        _validateSignature(message, signature);\\n        return IERC1271.isValidSignature.selector;\\n    }\\n\\n    function execBatch(BasicUserOp[] calldata ops) external override {\\n        _validateCaller();\\n        uint256 opsLen = ops.length;\\n        for (uint256 i = 0; i < opsLen; i++) {\\n            _exec(ops[i]);\\n        }\\n    }\\n\\n    function exec(BasicUserOp calldata op) external override {\\n        _validateCaller();\\n        _exec(op);\\n    }\\n\\n    function _exec(BasicUserOp calldata op) internal {\\n        (\\n            bool success,\\n            bytes memory data\\n        ) = op.to.call{\\n            value: op.value,\\n            gas: op.callGasLimit == 0 ? gasleft() : op.callGasLimit\\n        }(op.callData);\\n        Address.verifyCallResult(success, data, \\\"HEXLA001\\\");\\n    }\\n\\n    function _validateSignature(bytes32 message, bytes calldata signature) internal view {\\n        address signer = owner();\\n        bytes32 reqHash = message.toEthSignedMessageHash();\\n        if (signer.isContract()) {\\n            try IERC1271(signer).isValidSignature(reqHash, signature) returns (bytes4 returnvalue) {\\n                require(returnvalue == IERC1271.isValidSignature.selector, \\\"HEXLA002\\\");\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"HEXLA003\\\");\\n            }\\n        } else {\\n            require(signer == reqHash.recover(signature), \\\"HEXLA004\\\");\\n        }\\n    }\\n\\n    function _validateCaller() internal virtual;\\n}\\n\",\"keccak256\":\"0x300f1b99b1d596799c391e548194afb8ec68452cabd0f00ae183c9108f5bdece\",\"license\":\"Unlicense\"},\"contracts/account/AccountSimple.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./AccountBase.sol\\\";\\n\\ncontract AccountSimple is AccountBase {\\n    using Address for address;\\n\\n    uint256 private nonce_;\\n\\n    function init(address owner) external {\\n        require(_owner() == address(0) && owner != address(0), \\\"HEXL015\\\");\\n        _transferOwnership(owner);\\n    }\\n\\n    function nonce() external view returns(uint256) {\\n        return nonce_;\\n    }\\n\\n    function depositGasTo(\\n        address gasStation,\\n        uint256 amount\\n    ) external returns(uint256) {\\n        _validateCaller();\\n        uint256 payment = amount * tx.gasprice;\\n        gasStation.functionCallWithValue(\\n            abi.encodeWithSignature(\\\"deposit()\\\"),\\n            payment\\n        );\\n        return payment;\\n    }\\n\\n    function refundGas(\\n        address payable receiver,\\n        address token,\\n        uint256 amount,\\n        uint256 price\\n    ) external returns (uint256 payment) {\\n        _validateCaller();\\n        if (token == address(0)) {\\n            // price cannot be higher than tx.gasprice\\n            if (price == 0) {\\n                price = tx.gasprice;\\n            } else {\\n                price = price < tx.gasprice ? price : tx.gasprice;\\n            }\\n            payment = amount * tx.gasprice;\\n            Address.sendValue(receiver, payment);\\n        } else {\\n            payment = amount * price;\\n            IERC20(token).transfer(receiver, payment);\\n        }\\n    }\\n\\n    function validateAndCall(\\n        bytes calldata txData,\\n        uint256 _nonce,\\n        bytes calldata signature\\n    ) external {\\n        bytes32 requestId = keccak256(abi.encode(txData, nonce_));\\n        require(nonce_++ == _nonce, \\\"HEXLA008\\\");\\n        _validateSignature(requestId, signature);\\n        (bool success,) = address(this).call(txData);\\n        require(success, \\\"HEXLA009\\\");\\n    }\\n\\n    function _validateCaller() internal view override {\\n        require(msg.sender == owner() || msg.sender == address(this), \\\"HEXLA011\\\");\\n    }\\n}\",\"keccak256\":\"0xa82c2cae85c157958c78c3101bd5dc264f7a82b3f4de08403f18ca3c4a448c82\",\"license\":\"Unlicense\"},\"contracts/account/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Hexlink Contracts\\n\\npragma solidity ^0.8.8;\\n\\nstruct BasicUserOp {\\n    address to;\\n    uint256 value;\\n    bytes callData;\\n    uint256 callGasLimit;\\n}\\n\\ninterface IAccount {\\n    function execBatch(BasicUserOp[] calldata ops) external;\\n\\n    function exec(BasicUserOp calldata op) external;\\n}\",\"keccak256\":\"0xd05487ee1f6a32980f4ff9aa86fea106ddbfdc7c5d25d064de2e2d82e3060130\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506126d2806100206000396000f3fe6080604052600436106100955760003560e01c8063a8b6f61611610059578063a8b6f616146101e2578063a8c943461461021f578063affed0e014610248578063cceae4ee14610273578063f2fde38b146102b05761009c565b80631626ba7e146100ff57806319ab453c1461013c5780638479cc0f146101655780638c88d3801461018e5780638da5cb5b146101b75761009c565b3661009c57005b3480156100a857600080fd5b5060003660606000357fffffffff00000000000000000000000000000000000000000000000000000000166040516020016100e391906113ca565b6040516020818303038152906040529050915050805190602001f35b34801561010b57600080fd5b5061012660048036038101906101219190611494565b6102d9565b60405161013391906113ca565b60405180910390f35b34801561014857600080fd5b50610163600480360381019061015e9190611552565b6102f7565b005b34801561017157600080fd5b5061018c600480360381019061018791906115d5565b6103b2565b005b34801561019a57600080fd5b506101b560048036038101906101b09190611658565b610413565b005b3480156101c357600080fd5b506101cc61055e565b6040516101d991906116fc565b60405180910390f35b3480156101ee57600080fd5b5061020960048036038101906102049190611755565b61056d565b60405161021691906117cb565b60405180910390f35b34801561022b57600080fd5b506102466004803603810190610241919061180a565b610691565b005b34801561025457600080fd5b5061025d6106a5565b60405161026a91906117cb565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190611853565b6106ae565b6040516102a791906117cb565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d29190611552565b610780565b005b60006102e68484846107f8565b631626ba7e60e01b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff16610317610aba565b73ffffffffffffffffffffffffffffffffffffffff161480156103675750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6103a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d906118f0565b60405180910390fd5b6103af81610aed565b50565b6103ba610af9565b600082829050905060005b8181101561040d576103fa8484838181106103e3576103e2611910565b5b90506020028101906103f5919061194e565b610ba6565b8080610405906119a5565b9150506103c5565b50505050565b6000858560005460405160200161042c93929190611a4c565b60405160208183030381529060405280519060200120905083600080815480929190610457906119a5565b919050551461049b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049290611aca565b60405180910390fd5b6104a68184846107f8565b60003073ffffffffffffffffffffffffffffffffffffffff1687876040516104cf929190611b1a565b6000604051808303816000865af19150503d806000811461050c576040519150601f19603f3d011682016040523d82523d6000602084013e610511565b606091505b5050905080610555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054c90611b7f565b60405180910390fd5b50505050505050565b6000610568610aba565b905090565b6000610577610af9565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156105ec5760008214156105bd573a91506105cf565b3a82106105ca573a6105cc565b815b91505b3a836105db9190611b9f565b90506105e78582610c9c565b610689565b81836105f89190611b9f565b90508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401610635929190611c58565b602060405180830381600087803b15801561064f57600080fd5b505af1158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190611cb9565b505b949350505050565b610699610af9565b6106a281610ba6565b50565b60008054905090565b60006106b8610af9565b60003a836106c69190611b9f565b90506107756040516024016040516020818303038152906040527fd0e30db0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050828673ffffffffffffffffffffffffffffffffffffffff16610d909092919063ffffffff16565b508091505092915050565b610788610aba565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ec576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107f581610aed565b50565b600061080261055e565b9050600061080f85610dbf565b90506108308273ffffffffffffffffffffffffffffffffffffffff16610def565b156109ee578173ffffffffffffffffffffffffffffffffffffffff16631626ba7e8286866040518463ffffffff1660e01b815260040161087293929190611cf5565b60206040518083038186803b15801561088a57600080fd5b505afa9250505080156108bb57506040513d601f19601f820116820180604052508101906108b89190611d53565b60015b610961576108c7611d8d565b806308c379a0141561092457506108dc611e0f565b806108e75750610926565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b9190611f1c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095890611f8a565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146109e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109df90611ff6565b60405180910390fd5b50610ab3565b610a4584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610e1290919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa990612062565b60405180910390fd5b5b5050505050565b6000610ac4610e39565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610af681610e66565b50565b610b0161055e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b6557503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b906120ce565b60405180910390fd5b565b600080826000016020810190610bbc9190611552565b73ffffffffffffffffffffffffffffffffffffffff1683602001356000856060013514610bed578460600135610bef565b5a5b90858060400190610c0091906120ee565b604051610c0e929190611b1a565b600060405180830381858888f193505050503d8060008114610c4c576040519150601f19603f3d011682016040523d82523d6000602084013e610c51565b606091505b5091509150610c9682826040518060400160405280600881526020017f4845584c41303031000000000000000000000000000000000000000000000000815250610f37565b50505050565b80471015610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd69061219d565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610d05906121e3565b60006040518083038185875af1925050503d8060008114610d42576040519150601f19603f3d011682016040523d82523d6000602084013e610d47565b606091505b5050905080610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d829061226a565b60405180910390fd5b505050565b6060610db684848460405180606001604052806029815260200161267460299139610f59565b90509392505050565b600081604051602001610dd29190612302565b604051602081830303815290604052805190602001209050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000806000610e218585611026565b91509150610e2e81611078565b819250505092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000610e70610e39565b90508173ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60608315610f4757829050610f52565b610f5183836111e6565b5b9392505050565b606082471015610f9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f959061239a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fc791906123f6565b60006040518083038185875af1925050503d8060008114611004576040519150601f19603f3d011682016040523d82523d6000602084013e611009565b606091505b509150915061101a87838387611236565b92505050949350505050565b6000806041835114156110685760008060006020860151925060408601519150606086015160001a905061105c878285856112ac565b94509450505050611071565b60006002915091505b9250929050565b6000600481111561108c5761108b61240d565b5b81600481111561109f5761109e61240d565b5b14156110aa576111e3565b600160048111156110be576110bd61240d565b5b8160048111156110d1576110d061240d565b5b1415611112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110990612488565b60405180910390fd5b600260048111156111265761112561240d565b5b8160048111156111395761113861240d565b5b141561117a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611171906124f4565b60405180910390fd5b6003600481111561118e5761118d61240d565b5b8160048111156111a1576111a061240d565b5b14156111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990612586565b60405180910390fd5b5b50565b6000825111156111f95781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d9190611f1c565b60405180910390fd5b60608315611299576000835114156112915761125185610def565b611290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611287906125f2565b60405180910390fd5b5b8290506112a4565b6112a383836111e6565b5b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156112e7576000600391509150611386565b60006001878787876040516000815260200160405260405161130c949392919061262e565b6020604051602081039080840390855afa15801561132e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561137d57600060019250925050611386565b80600092509250505b94509492505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6113c48161138f565b82525050565b60006020820190506113df60008301846113bb565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61140c816113f9565b811461141757600080fd5b50565b60008135905061142981611403565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114545761145361142f565b5b8235905067ffffffffffffffff81111561147157611470611434565b5b60208301915083600182028301111561148d5761148c611439565b5b9250929050565b6000806000604084860312156114ad576114ac6113ef565b5b60006114bb8682870161141a565b935050602084013567ffffffffffffffff8111156114dc576114db6113f4565b5b6114e88682870161143e565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061151f826114f4565b9050919050565b61152f81611514565b811461153a57600080fd5b50565b60008135905061154c81611526565b92915050565b600060208284031215611568576115676113ef565b5b60006115768482850161153d565b91505092915050565b60008083601f8401126115955761159461142f565b5b8235905067ffffffffffffffff8111156115b2576115b1611434565b5b6020830191508360208202830111156115ce576115cd611439565b5b9250929050565b600080602083850312156115ec576115eb6113ef565b5b600083013567ffffffffffffffff81111561160a576116096113f4565b5b6116168582860161157f565b92509250509250929050565b6000819050919050565b61163581611622565b811461164057600080fd5b50565b6000813590506116528161162c565b92915050565b600080600080600060608688031215611674576116736113ef565b5b600086013567ffffffffffffffff811115611692576116916113f4565b5b61169e8882890161143e565b955095505060206116b188828901611643565b935050604086013567ffffffffffffffff8111156116d2576116d16113f4565b5b6116de8882890161143e565b92509250509295509295909350565b6116f681611514565b82525050565b600060208201905061171160008301846116ed565b92915050565b6000611722826114f4565b9050919050565b61173281611717565b811461173d57600080fd5b50565b60008135905061174f81611729565b92915050565b6000806000806080858703121561176f5761176e6113ef565b5b600061177d87828801611740565b945050602061178e8782880161153d565b935050604061179f87828801611643565b92505060606117b087828801611643565b91505092959194509250565b6117c581611622565b82525050565b60006020820190506117e060008301846117bc565b92915050565b600080fd5b600060808284031215611801576118006117e6565b5b81905092915050565b6000602082840312156118205761181f6113ef565b5b600082013567ffffffffffffffff81111561183e5761183d6113f4565b5b61184a848285016117eb565b91505092915050565b6000806040838503121561186a576118696113ef565b5b60006118788582860161153d565b925050602061188985828601611643565b9150509250929050565b600082825260208201905092915050565b7f4845584c30313500000000000000000000000000000000000000000000000000600082015250565b60006118da600783611893565b91506118e5826118a4565b602082019050919050565b60006020820190508181036000830152611909816118cd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160800383360303811261196a5761196961193f565b5b80830191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119b082611622565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119e3576119e2611976565b5b600182019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000611a2b83856119ee565b9350611a388385846119ff565b611a4183611a0e565b840190509392505050565b60006040820190508181036000830152611a67818587611a1f565b9050611a7660208301846117bc565b949350505050565b7f4845584c41303038000000000000000000000000000000000000000000000000600082015250565b6000611ab4600883611893565b9150611abf82611a7e565b602082019050919050565b60006020820190508181036000830152611ae381611aa7565b9050919050565b600081905092915050565b6000611b018385611aea565b9350611b0e8385846119ff565b82840190509392505050565b6000611b27828486611af5565b91508190509392505050565b7f4845584c41303039000000000000000000000000000000000000000000000000600082015250565b6000611b69600883611893565b9150611b7482611b33565b602082019050919050565b60006020820190508181036000830152611b9881611b5c565b9050919050565b6000611baa82611622565b9150611bb583611622565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bee57611bed611976565b5b828202905092915050565b6000819050919050565b6000611c1e611c19611c14846114f4565b611bf9565b6114f4565b9050919050565b6000611c3082611c03565b9050919050565b6000611c4282611c25565b9050919050565b611c5281611c37565b82525050565b6000604082019050611c6d6000830185611c49565b611c7a60208301846117bc565b9392505050565b60008115159050919050565b611c9681611c81565b8114611ca157600080fd5b50565b600081519050611cb381611c8d565b92915050565b600060208284031215611ccf57611cce6113ef565b5b6000611cdd84828501611ca4565b91505092915050565b611cef816113f9565b82525050565b6000604082019050611d0a6000830186611ce6565b8181036020830152611d1d818486611a1f565b9050949350505050565b611d308161138f565b8114611d3b57600080fd5b50565b600081519050611d4d81611d27565b92915050565b600060208284031215611d6957611d686113ef565b5b6000611d7784828501611d3e565b91505092915050565b60008160e01c9050919050565b600060033d1115611dac5760046000803e611da9600051611d80565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611de782611a0e565b810181811067ffffffffffffffff82111715611e0657611e05611daf565b5b80604052505050565b600060443d1015611e1f57611ea2565b611e276113e5565b60043d036004823e80513d602482011167ffffffffffffffff82111715611e4f575050611ea2565b808201805167ffffffffffffffff811115611e6d5750505050611ea2565b80602083010160043d038501811115611e8a575050505050611ea2565b611e9982602001850186611dde565b82955050505050505b90565b600081519050919050565b60005b83811015611ece578082015181840152602081019050611eb3565b83811115611edd576000848401525b50505050565b6000611eee82611ea5565b611ef88185611893565b9350611f08818560208601611eb0565b611f1181611a0e565b840191505092915050565b60006020820190508181036000830152611f368184611ee3565b905092915050565b7f4845584c41303033000000000000000000000000000000000000000000000000600082015250565b6000611f74600883611893565b9150611f7f82611f3e565b602082019050919050565b60006020820190508181036000830152611fa381611f67565b9050919050565b7f4845584c41303032000000000000000000000000000000000000000000000000600082015250565b6000611fe0600883611893565b9150611feb82611faa565b602082019050919050565b6000602082019050818103600083015261200f81611fd3565b9050919050565b7f4845584c41303034000000000000000000000000000000000000000000000000600082015250565b600061204c600883611893565b915061205782612016565b602082019050919050565b6000602082019050818103600083015261207b8161203f565b9050919050565b7f4845584c41303131000000000000000000000000000000000000000000000000600082015250565b60006120b8600883611893565b91506120c382612082565b602082019050919050565b600060208201905081810360008301526120e7816120ab565b9050919050565b6000808335600160200384360303811261210b5761210a61193f565b5b80840192508235915067ffffffffffffffff82111561212d5761212c611944565b5b60208301925060018202360383131561214957612148611949565b5b509250929050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000612187601d83611893565b915061219282612151565b602082019050919050565b600060208201905081810360008301526121b68161217a565b9050919050565b50565b60006121cd600083611aea565b91506121d8826121bd565b600082019050919050565b60006121ee826121c0565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000612254603a83611893565b915061225f826121f8565b604082019050919050565b6000602082019050818103600083015261228381612247565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006122cb601c8361228a565b91506122d682612295565b601c82019050919050565b6000819050919050565b6122fc6122f7826113f9565b6122e1565b82525050565b600061230d826122be565b915061231982846122eb565b60208201915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612384602683611893565b915061238f82612328565b604082019050919050565b600060208201905081810360008301526123b381612377565b9050919050565b600081519050919050565b60006123d0826123ba565b6123da8185611aea565b93506123ea818560208601611eb0565b80840191505092915050565b600061240282846123c5565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612472601883611893565b915061247d8261243c565b602082019050919050565b600060208201905081810360008301526124a181612465565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006124de601f83611893565b91506124e9826124a8565b602082019050919050565b6000602082019050818103600083015261250d816124d1565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612570602283611893565b915061257b82612514565b604082019050919050565b6000602082019050818103600083015261259f81612563565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006125dc601d83611893565b91506125e7826125a6565b602082019050919050565b6000602082019050818103600083015261260b816125cf565b9050919050565b600060ff82169050919050565b61262881612612565b82525050565b60006080820190506126436000830187611ce6565b612650602083018661261f565b61265d6040830185611ce6565b61266a6060830184611ce6565b9594505050505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212208b3c6a54c6cda793b462a800829062873d6ebb0a49277051ca7776940e160d6a64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063a8b6f61611610059578063a8b6f616146101e2578063a8c943461461021f578063affed0e014610248578063cceae4ee14610273578063f2fde38b146102b05761009c565b80631626ba7e146100ff57806319ab453c1461013c5780638479cc0f146101655780638c88d3801461018e5780638da5cb5b146101b75761009c565b3661009c57005b3480156100a857600080fd5b5060003660606000357fffffffff00000000000000000000000000000000000000000000000000000000166040516020016100e391906113ca565b6040516020818303038152906040529050915050805190602001f35b34801561010b57600080fd5b5061012660048036038101906101219190611494565b6102d9565b60405161013391906113ca565b60405180910390f35b34801561014857600080fd5b50610163600480360381019061015e9190611552565b6102f7565b005b34801561017157600080fd5b5061018c600480360381019061018791906115d5565b6103b2565b005b34801561019a57600080fd5b506101b560048036038101906101b09190611658565b610413565b005b3480156101c357600080fd5b506101cc61055e565b6040516101d991906116fc565b60405180910390f35b3480156101ee57600080fd5b5061020960048036038101906102049190611755565b61056d565b60405161021691906117cb565b60405180910390f35b34801561022b57600080fd5b506102466004803603810190610241919061180a565b610691565b005b34801561025457600080fd5b5061025d6106a5565b60405161026a91906117cb565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190611853565b6106ae565b6040516102a791906117cb565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d29190611552565b610780565b005b60006102e68484846107f8565b631626ba7e60e01b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff16610317610aba565b73ffffffffffffffffffffffffffffffffffffffff161480156103675750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6103a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d906118f0565b60405180910390fd5b6103af81610aed565b50565b6103ba610af9565b600082829050905060005b8181101561040d576103fa8484838181106103e3576103e2611910565b5b90506020028101906103f5919061194e565b610ba6565b8080610405906119a5565b9150506103c5565b50505050565b6000858560005460405160200161042c93929190611a4c565b60405160208183030381529060405280519060200120905083600080815480929190610457906119a5565b919050551461049b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049290611aca565b60405180910390fd5b6104a68184846107f8565b60003073ffffffffffffffffffffffffffffffffffffffff1687876040516104cf929190611b1a565b6000604051808303816000865af19150503d806000811461050c576040519150601f19603f3d011682016040523d82523d6000602084013e610511565b606091505b5050905080610555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054c90611b7f565b60405180910390fd5b50505050505050565b6000610568610aba565b905090565b6000610577610af9565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156105ec5760008214156105bd573a91506105cf565b3a82106105ca573a6105cc565b815b91505b3a836105db9190611b9f565b90506105e78582610c9c565b610689565b81836105f89190611b9f565b90508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401610635929190611c58565b602060405180830381600087803b15801561064f57600080fd5b505af1158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190611cb9565b505b949350505050565b610699610af9565b6106a281610ba6565b50565b60008054905090565b60006106b8610af9565b60003a836106c69190611b9f565b90506107756040516024016040516020818303038152906040527fd0e30db0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050828673ffffffffffffffffffffffffffffffffffffffff16610d909092919063ffffffff16565b508091505092915050565b610788610aba565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ec576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107f581610aed565b50565b600061080261055e565b9050600061080f85610dbf565b90506108308273ffffffffffffffffffffffffffffffffffffffff16610def565b156109ee578173ffffffffffffffffffffffffffffffffffffffff16631626ba7e8286866040518463ffffffff1660e01b815260040161087293929190611cf5565b60206040518083038186803b15801561088a57600080fd5b505afa9250505080156108bb57506040513d601f19601f820116820180604052508101906108b89190611d53565b60015b610961576108c7611d8d565b806308c379a0141561092457506108dc611e0f565b806108e75750610926565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b9190611f1c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095890611f8a565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146109e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109df90611ff6565b60405180910390fd5b50610ab3565b610a4584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610e1290919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa990612062565b60405180910390fd5b5b5050505050565b6000610ac4610e39565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610af681610e66565b50565b610b0161055e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b6557503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b906120ce565b60405180910390fd5b565b600080826000016020810190610bbc9190611552565b73ffffffffffffffffffffffffffffffffffffffff1683602001356000856060013514610bed578460600135610bef565b5a5b90858060400190610c0091906120ee565b604051610c0e929190611b1a565b600060405180830381858888f193505050503d8060008114610c4c576040519150601f19603f3d011682016040523d82523d6000602084013e610c51565b606091505b5091509150610c9682826040518060400160405280600881526020017f4845584c41303031000000000000000000000000000000000000000000000000815250610f37565b50505050565b80471015610cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd69061219d565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610d05906121e3565b60006040518083038185875af1925050503d8060008114610d42576040519150601f19603f3d011682016040523d82523d6000602084013e610d47565b606091505b5050905080610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d829061226a565b60405180910390fd5b505050565b6060610db684848460405180606001604052806029815260200161267460299139610f59565b90509392505050565b600081604051602001610dd29190612302565b604051602081830303815290604052805190602001209050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000806000610e218585611026565b91509150610e2e81611078565b819250505092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000610e70610e39565b90508173ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60608315610f4757829050610f52565b610f5183836111e6565b5b9392505050565b606082471015610f9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f959061239a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fc791906123f6565b60006040518083038185875af1925050503d8060008114611004576040519150601f19603f3d011682016040523d82523d6000602084013e611009565b606091505b509150915061101a87838387611236565b92505050949350505050565b6000806041835114156110685760008060006020860151925060408601519150606086015160001a905061105c878285856112ac565b94509450505050611071565b60006002915091505b9250929050565b6000600481111561108c5761108b61240d565b5b81600481111561109f5761109e61240d565b5b14156110aa576111e3565b600160048111156110be576110bd61240d565b5b8160048111156110d1576110d061240d565b5b1415611112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110990612488565b60405180910390fd5b600260048111156111265761112561240d565b5b8160048111156111395761113861240d565b5b141561117a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611171906124f4565b60405180910390fd5b6003600481111561118e5761118d61240d565b5b8160048111156111a1576111a061240d565b5b14156111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990612586565b60405180910390fd5b5b50565b6000825111156111f95781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d9190611f1c565b60405180910390fd5b60608315611299576000835114156112915761125185610def565b611290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611287906125f2565b60405180910390fd5b5b8290506112a4565b6112a383836111e6565b5b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156112e7576000600391509150611386565b60006001878787876040516000815260200160405260405161130c949392919061262e565b6020604051602081039080840390855afa15801561132e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561137d57600060019250925050611386565b80600092509250505b94509492505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6113c48161138f565b82525050565b60006020820190506113df60008301846113bb565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61140c816113f9565b811461141757600080fd5b50565b60008135905061142981611403565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114545761145361142f565b5b8235905067ffffffffffffffff81111561147157611470611434565b5b60208301915083600182028301111561148d5761148c611439565b5b9250929050565b6000806000604084860312156114ad576114ac6113ef565b5b60006114bb8682870161141a565b935050602084013567ffffffffffffffff8111156114dc576114db6113f4565b5b6114e88682870161143e565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061151f826114f4565b9050919050565b61152f81611514565b811461153a57600080fd5b50565b60008135905061154c81611526565b92915050565b600060208284031215611568576115676113ef565b5b60006115768482850161153d565b91505092915050565b60008083601f8401126115955761159461142f565b5b8235905067ffffffffffffffff8111156115b2576115b1611434565b5b6020830191508360208202830111156115ce576115cd611439565b5b9250929050565b600080602083850312156115ec576115eb6113ef565b5b600083013567ffffffffffffffff81111561160a576116096113f4565b5b6116168582860161157f565b92509250509250929050565b6000819050919050565b61163581611622565b811461164057600080fd5b50565b6000813590506116528161162c565b92915050565b600080600080600060608688031215611674576116736113ef565b5b600086013567ffffffffffffffff811115611692576116916113f4565b5b61169e8882890161143e565b955095505060206116b188828901611643565b935050604086013567ffffffffffffffff8111156116d2576116d16113f4565b5b6116de8882890161143e565b92509250509295509295909350565b6116f681611514565b82525050565b600060208201905061171160008301846116ed565b92915050565b6000611722826114f4565b9050919050565b61173281611717565b811461173d57600080fd5b50565b60008135905061174f81611729565b92915050565b6000806000806080858703121561176f5761176e6113ef565b5b600061177d87828801611740565b945050602061178e8782880161153d565b935050604061179f87828801611643565b92505060606117b087828801611643565b91505092959194509250565b6117c581611622565b82525050565b60006020820190506117e060008301846117bc565b92915050565b600080fd5b600060808284031215611801576118006117e6565b5b81905092915050565b6000602082840312156118205761181f6113ef565b5b600082013567ffffffffffffffff81111561183e5761183d6113f4565b5b61184a848285016117eb565b91505092915050565b6000806040838503121561186a576118696113ef565b5b60006118788582860161153d565b925050602061188985828601611643565b9150509250929050565b600082825260208201905092915050565b7f4845584c30313500000000000000000000000000000000000000000000000000600082015250565b60006118da600783611893565b91506118e5826118a4565b602082019050919050565b60006020820190508181036000830152611909816118cd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160800383360303811261196a5761196961193f565b5b80830191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119b082611622565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119e3576119e2611976565b5b600182019050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000611a2b83856119ee565b9350611a388385846119ff565b611a4183611a0e565b840190509392505050565b60006040820190508181036000830152611a67818587611a1f565b9050611a7660208301846117bc565b949350505050565b7f4845584c41303038000000000000000000000000000000000000000000000000600082015250565b6000611ab4600883611893565b9150611abf82611a7e565b602082019050919050565b60006020820190508181036000830152611ae381611aa7565b9050919050565b600081905092915050565b6000611b018385611aea565b9350611b0e8385846119ff565b82840190509392505050565b6000611b27828486611af5565b91508190509392505050565b7f4845584c41303039000000000000000000000000000000000000000000000000600082015250565b6000611b69600883611893565b9150611b7482611b33565b602082019050919050565b60006020820190508181036000830152611b9881611b5c565b9050919050565b6000611baa82611622565b9150611bb583611622565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bee57611bed611976565b5b828202905092915050565b6000819050919050565b6000611c1e611c19611c14846114f4565b611bf9565b6114f4565b9050919050565b6000611c3082611c03565b9050919050565b6000611c4282611c25565b9050919050565b611c5281611c37565b82525050565b6000604082019050611c6d6000830185611c49565b611c7a60208301846117bc565b9392505050565b60008115159050919050565b611c9681611c81565b8114611ca157600080fd5b50565b600081519050611cb381611c8d565b92915050565b600060208284031215611ccf57611cce6113ef565b5b6000611cdd84828501611ca4565b91505092915050565b611cef816113f9565b82525050565b6000604082019050611d0a6000830186611ce6565b8181036020830152611d1d818486611a1f565b9050949350505050565b611d308161138f565b8114611d3b57600080fd5b50565b600081519050611d4d81611d27565b92915050565b600060208284031215611d6957611d686113ef565b5b6000611d7784828501611d3e565b91505092915050565b60008160e01c9050919050565b600060033d1115611dac5760046000803e611da9600051611d80565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611de782611a0e565b810181811067ffffffffffffffff82111715611e0657611e05611daf565b5b80604052505050565b600060443d1015611e1f57611ea2565b611e276113e5565b60043d036004823e80513d602482011167ffffffffffffffff82111715611e4f575050611ea2565b808201805167ffffffffffffffff811115611e6d5750505050611ea2565b80602083010160043d038501811115611e8a575050505050611ea2565b611e9982602001850186611dde565b82955050505050505b90565b600081519050919050565b60005b83811015611ece578082015181840152602081019050611eb3565b83811115611edd576000848401525b50505050565b6000611eee82611ea5565b611ef88185611893565b9350611f08818560208601611eb0565b611f1181611a0e565b840191505092915050565b60006020820190508181036000830152611f368184611ee3565b905092915050565b7f4845584c41303033000000000000000000000000000000000000000000000000600082015250565b6000611f74600883611893565b9150611f7f82611f3e565b602082019050919050565b60006020820190508181036000830152611fa381611f67565b9050919050565b7f4845584c41303032000000000000000000000000000000000000000000000000600082015250565b6000611fe0600883611893565b9150611feb82611faa565b602082019050919050565b6000602082019050818103600083015261200f81611fd3565b9050919050565b7f4845584c41303034000000000000000000000000000000000000000000000000600082015250565b600061204c600883611893565b915061205782612016565b602082019050919050565b6000602082019050818103600083015261207b8161203f565b9050919050565b7f4845584c41303131000000000000000000000000000000000000000000000000600082015250565b60006120b8600883611893565b91506120c382612082565b602082019050919050565b600060208201905081810360008301526120e7816120ab565b9050919050565b6000808335600160200384360303811261210b5761210a61193f565b5b80840192508235915067ffffffffffffffff82111561212d5761212c611944565b5b60208301925060018202360383131561214957612148611949565b5b509250929050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000612187601d83611893565b915061219282612151565b602082019050919050565b600060208201905081810360008301526121b68161217a565b9050919050565b50565b60006121cd600083611aea565b91506121d8826121bd565b600082019050919050565b60006121ee826121c0565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000612254603a83611893565b915061225f826121f8565b604082019050919050565b6000602082019050818103600083015261228381612247565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006122cb601c8361228a565b91506122d682612295565b601c82019050919050565b6000819050919050565b6122fc6122f7826113f9565b6122e1565b82525050565b600061230d826122be565b915061231982846122eb565b60208201915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612384602683611893565b915061238f82612328565b604082019050919050565b600060208201905081810360008301526123b381612377565b9050919050565b600081519050919050565b60006123d0826123ba565b6123da8185611aea565b93506123ea818560208601611eb0565b80840191505092915050565b600061240282846123c5565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612472601883611893565b915061247d8261243c565b602082019050919050565b600060208201905081810360008301526124a181612465565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006124de601f83611893565b91506124e9826124a8565b602082019050919050565b6000602082019050818103600083015261250d816124d1565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612570602283611893565b915061257b82612514565b604082019050919050565b6000602082019050818103600083015261259f81612563565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006125dc601d83611893565b91506125e7826125a6565b602082019050919050565b6000602082019050818103600083015261260b816125cf565b9050919050565b600060ff82169050919050565b61262881612612565b82525050565b60006080820190506126436000830187611ce6565b612650602083018661261f565b61265d6040830185611ce6565b61266a6060830184611ce6565b9594505050505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212208b3c6a54c6cda793b462a800829062873d6ebb0a49277051ca7776940e160d6a64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8763,
        "contract": "contracts/account/AccountSimple.sol:AccountSimple",
        "label": "nonce_",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}