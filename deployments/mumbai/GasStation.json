{
  "address": "0x495Dd646e05fde8D950D3b54E1959Ab7D5103652",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrapped",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaesAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "depositOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbe9b0a0b5d435134e8de0152b7e6978e146f9695e70131a4c44cc6c4a3ffc0d",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0x495Dd646e05fde8D950D3b54E1959Ab7D5103652",
    "transactionIndex": 1,
    "gasUsed": "1565176",
    "logsBloom": "0x
    "blockHash": "0x42ffa6c1183b960ffddb811f6f26c11025666858d3c56d0cd5916c797baeb319",
    "transactionHash": "0xfbe9b0a0b5d435134e8de0152b7e6978e146f9695e70131a4c44cc6c4a3ffc0d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30669101,
        "transactionHash": "0xfbe9b0a0b5d435134e8de0152b7e6978e146f9695e70131a4c44cc6c4a3ffc0d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a4b368e3a9d49ff15b58f70fb976724a98b6d149",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000de6cc56ba380000000000000000000000000000000000000000000000000025a7d16feb1a693d0000000000000000000000000000000000000000000009be8499129e88352d9e0000000000000000000000000000000000000000000000002599eaa39460313d0000000000000000000000000000000000000000000009be84a6f96adeef659e",
        "logIndex": 1,
        "blockHash": "0x42ffa6c1183b960ffddb811f6f26c11025666858d3c56d0cd5916c797baeb319"
      }
    ],
    "blockNumber": 30669101,
    "cumulativeGasUsed": "1586688",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889"
  ],
  "numDeployments": 2,
  "solcInputHash": "f33df0086f37db94d5660f475767e78e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaesAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/GasStation.sol\":\"GasStation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/apps/GasStation.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\n\\ncontract GasStation {\\n    using Address for address;\\n\\n    event Deposit(address indexed from, uint256 amount);\\n    event Payment(address indexed from, address indexed to, uint256 amount);\\n    event Withdraw(address indexed to, uint256 amount);\\n    event Approval(address indexed from, address indexed operator, uint256 allowance);\\n\\n    ISwapRouter public immutable swapRouter;\\n    address public immutable wrapped;\\n    mapping(address => uint256) private balances_;\\n    // owner => operator => allowance\\n    mapping(address => mapping(address => uint256)) private allowances_;\\n\\n    constructor(address _swapRouter, address _wrapped) {\\n        swapRouter = ISwapRouter(_swapRouter);\\n        wrapped = _wrapped;\\n    }\\n\\n    function deposit() external payable {\\n        balances_[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function depositToken(address token, uint256 amount) external payable {\\n        // deposit and approve token to uniswap\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        TransferHelper.safeApprove(token, address(swapRouter), amount);\\n        // swap to weth\\n        if (token != wrapped) {\\n            ISwapRouter.ExactInputSingleParams memory param =\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: token,\\n                    tokenOut: wrapped,\\n                    fee: 3000, // 0.3%\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    amountIn: amount,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: 0\\n                });\\n            amount = swapRouter.exactInputSingle(param);\\n        }\\n        // unwrap as eth\\n        wrapped.functionCall(abi.encodeWithSignature('withdraw(uint256)', amount));\\n        balances_[msg.sender] += amount;\\n        emit Deposit(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n         balances_[msg.sender] -= amount;\\n         Address.sendValue(payable(msg.sender), amount);\\n         emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function increaseAllowance(address operator, uint256 amount) external {\\n        uint256 balance = allowances_[msg.sender][operator];\\n        allowances_[msg.sender][operator] = balance + amount;\\n        emit Approval(msg.sender, operator, balance + amount);\\n    }\\n\\n    function decreaesAllowance(address operator, uint256 amount) external {\\n        uint256 balance = allowances_[msg.sender][operator];\\n        if (balance < amount) {\\n            amount = balance;\\n        }\\n        unchecked { allowances_[msg.sender][operator] = balance - amount; }\\n        emit Approval(msg.sender, operator, balance - amount);\\n    }\\n\\n    function pay(address from, address to, uint256 amount) external {\\n        uint256 payment = amount * tx.gasprice;\\n        require(from == msg.sender || allowance(msg.sender, from) > payment, \\\"Unauthorized\\\");\\n        balances_[from] -= payment;\\n        Address.sendValue(payable(to), payment);\\n        emit Payment(from, to, payment);\\n    }\\n\\n    function depositOf(address user) external view returns(uint256) {\\n        return balances_[user];\\n    }\\n\\n    function allowance(address owner, address operator) public view returns (uint256) {\\n        return allowances_[owner][operator];\\n    }\\n}\\n\",\"keccak256\":\"0xb5996393dff92ef5aeaf19d9a401f364b1e5f83873a753fe8d58afaf0e870748\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001d0538038062001d05833981810160405281019062000037919062000117565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200015e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000df82620000b2565b9050919050565b620000f181620000d2565b8114620000fd57600080fd5b50565b6000815190506200011181620000e6565b92915050565b60008060408385031215620001315762000130620000ad565b5b6000620001418582860162000100565b9250506020620001548582860162000100565b9150509250929050565b60805160601c60a05160601c611b58620001ad600039600081816103e5015281816104620152818161063701526108a60152600081816103be015281816104f70152610a250152611b586000f3fe6080604052600436106100915760003560e01c8063b3d7618811610059578063b3d761881461016c578063c31c9c0714610195578063d0e30db0146101c0578063db1f1fc7146101ca578063dd62ed3e146101f357610091565b806323e3fbd5146100965780632e1a7d4d146100d3578063338b5dea146100fc578063395093511461011857806350e70d4814610141575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b891906111a6565b610230565b6040516100ca91906111ec565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f59190611233565b610278565b005b61011660048036038101906101119190611260565b610328565b005b34801561012457600080fd5b5061013f600480360381019061013a9190611260565b610722565b005b34801561014d57600080fd5b506101566108a4565b60405161016391906112af565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906112ca565b6108c8565b005b3480156101a157600080fd5b506101aa610a23565b6040516101b7919061137c565b60405180910390f35b6101c8610a47565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190611260565b610aec565b005b3480156101ff57600080fd5b5061021a60048036038101906102159190611397565b610c71565b60405161022791906111ec565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c69190611406565b925050819055506102d73382610cf8565b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161031d91906111ec565b60405180910390a250565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103659392919061143a565b602060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b791906114a9565b506103e3827f000000000000000000000000000000000000000000000000000000000000000083610dec565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105a45760006040518061010001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200183815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161054e91906115c3565b602060405180830381600087803b15801561056857600080fd5b505af115801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a091906115f4565b9150505b61067a816040516024016105b891906111ec565b6040516020818303038152906040527f2e1a7d4d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f4190919063ffffffff16565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106c99190611621565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161071691906111ec565b60405180910390a25050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081816107af9190611621565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925848461088a9190611621565b60405161089791906111ec565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60003a826108d69190611677565b90503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061091a5750806109183386610c71565b115b610959576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109509061172e565b60405180910390fd5b806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109a79190611406565b925050819055506109b88382610cf8565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8ed7db30df47fbd87811a5e8a95a94838f0c0241263d9a1865d6a2a3e10516e283604051610a1591906111ec565b60405180910390a350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a959190611621565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c34604051610ae291906111ec565b60405180910390a2565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b79578091505b818103600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258484610c579190611406565b604051610c6491906111ec565b60405180910390a3505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80471015610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d329061179a565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610d61906117eb565b60006040518083038185875af1925050503d8060008114610d9e576040519150601f19603f3d011682016040523d82523d6000602084013e610da3565b606091505b5050905080610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde90611872565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610e21929190611892565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e8b919061192a565b6000604051808303816000865af19150503d8060008114610ec8576040519150601f19603f3d011682016040523d82523d6000602084013e610ecd565b606091505b5091509150818015610efb5750600081511480610efa575080806020019051810190610ef991906114a9565b5b5b610f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f319061198d565b60405180910390fd5b5050505050565b6060610f85838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610f8d565b905092915050565b606082471015610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc990611a1f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ffb919061192a565b60006040518083038185875af1925050503d8060008114611038576040519150601f19603f3d011682016040523d82523d6000602084013e61103d565b606091505b509150915061104e8783838761105a565b92505050949350505050565b606083156110bd576000835114156110b557611075856110d0565b6110b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ab90611a8b565b60405180910390fd5b5b8290506110c8565b6110c783836110f3565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156111065781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a9190611b00565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117382611148565b9050919050565b61118381611168565b811461118e57600080fd5b50565b6000813590506111a08161117a565b92915050565b6000602082840312156111bc576111bb611143565b5b60006111ca84828501611191565b91505092915050565b6000819050919050565b6111e6816111d3565b82525050565b600060208201905061120160008301846111dd565b92915050565b611210816111d3565b811461121b57600080fd5b50565b60008135905061122d81611207565b92915050565b60006020828403121561124957611248611143565b5b60006112578482850161121e565b91505092915050565b6000806040838503121561127757611276611143565b5b600061128585828601611191565b92505060206112968582860161121e565b9150509250929050565b6112a981611168565b82525050565b60006020820190506112c460008301846112a0565b92915050565b6000806000606084860312156112e3576112e2611143565b5b60006112f186828701611191565b935050602061130286828701611191565b92505060406113138682870161121e565b9150509250925092565b6000819050919050565b600061134261133d61133884611148565b61131d565b611148565b9050919050565b600061135482611327565b9050919050565b600061136682611349565b9050919050565b6113768161135b565b82525050565b6000602082019050611391600083018461136d565b92915050565b600080604083850312156113ae576113ad611143565b5b60006113bc85828601611191565b92505060206113cd85828601611191565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611411826111d3565b915061141c836111d3565b92508282101561142f5761142e6113d7565b5b828203905092915050565b600060608201905061144f60008301866112a0565b61145c60208301856112a0565b61146960408301846111dd565b949350505050565b60008115159050919050565b61148681611471565b811461149157600080fd5b50565b6000815190506114a38161147d565b92915050565b6000602082840312156114bf576114be611143565b5b60006114cd84828501611494565b91505092915050565b6114df81611168565b82525050565b600062ffffff82169050919050565b6114fd816114e5565b82525050565b61150c816111d3565b82525050565b61151b81611148565b82525050565b6101008201600082015161153860008501826114d6565b50602082015161154b60208501826114d6565b50604082015161155e60408501826114f4565b50606082015161157160608501826114d6565b5060808201516115846080850182611503565b5060a082015161159760a0850182611503565b5060c08201516115aa60c0850182611503565b5060e08201516115bd60e0850182611512565b50505050565b6000610100820190506115d96000830184611521565b92915050565b6000815190506115ee81611207565b92915050565b60006020828403121561160a57611609611143565b5b6000611618848285016115df565b91505092915050565b600061162c826111d3565b9150611637836111d3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561166c5761166b6113d7565b5b828201905092915050565b6000611682826111d3565b915061168d836111d3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116c6576116c56113d7565b5b828202905092915050565b600082825260208201905092915050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b6000611718600c836116d1565b9150611723826116e2565b602082019050919050565b600060208201905081810360008301526117478161170b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611784601d836116d1565b915061178f8261174e565b602082019050919050565b600060208201905081810360008301526117b381611777565b9050919050565b600081905092915050565b50565b60006117d56000836117ba565b91506117e0826117c5565b600082019050919050565b60006117f6826117c8565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061185c603a836116d1565b915061186782611800565b604082019050919050565b6000602082019050818103600083015261188b8161184f565b9050919050565b60006040820190506118a760008301856112a0565b6118b460208301846111dd565b9392505050565b600081519050919050565b60005b838110156118e45780820151818401526020810190506118c9565b838111156118f3576000848401525b50505050565b6000611904826118bb565b61190e81856117ba565b935061191e8185602086016118c6565b80840191505092915050565b600061193682846118f9565b915081905092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006119776002836116d1565b915061198282611941565b602082019050919050565b600060208201905081810360008301526119a68161196a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611a096026836116d1565b9150611a14826119ad565b604082019050919050565b60006020820190508181036000830152611a38816119fc565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a75601d836116d1565b9150611a8082611a3f565b602082019050919050565b60006020820190508181036000830152611aa481611a68565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000611ad282611aab565b611adc81856116d1565b9350611aec8185602086016118c6565b611af581611ab6565b840191505092915050565b60006020820190508181036000830152611b1a8184611ac7565b90509291505056fea2646970667358221220a2749fb528937ea2e7e4e3d6c0a6cbc273be48828e92a5e2695887b8251cf0d864736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063b3d7618811610059578063b3d761881461016c578063c31c9c0714610195578063d0e30db0146101c0578063db1f1fc7146101ca578063dd62ed3e146101f357610091565b806323e3fbd5146100965780632e1a7d4d146100d3578063338b5dea146100fc578063395093511461011857806350e70d4814610141575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b891906111a6565b610230565b6040516100ca91906111ec565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f59190611233565b610278565b005b61011660048036038101906101119190611260565b610328565b005b34801561012457600080fd5b5061013f600480360381019061013a9190611260565b610722565b005b34801561014d57600080fd5b506101566108a4565b60405161016391906112af565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906112ca565b6108c8565b005b3480156101a157600080fd5b506101aa610a23565b6040516101b7919061137c565b60405180910390f35b6101c8610a47565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190611260565b610aec565b005b3480156101ff57600080fd5b5061021a60048036038101906102159190611397565b610c71565b60405161022791906111ec565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c69190611406565b925050819055506102d73382610cf8565b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161031d91906111ec565b60405180910390a250565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103659392919061143a565b602060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b791906114a9565b506103e3827f000000000000000000000000000000000000000000000000000000000000000083610dec565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105a45760006040518061010001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200183815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161054e91906115c3565b602060405180830381600087803b15801561056857600080fd5b505af115801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a091906115f4565b9150505b61067a816040516024016105b891906111ec565b6040516020818303038152906040527f2e1a7d4d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f4190919063ffffffff16565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106c99190611621565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161071691906111ec565b60405180910390a25050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081816107af9190611621565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925848461088a9190611621565b60405161089791906111ec565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60003a826108d69190611677565b90503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061091a5750806109183386610c71565b115b610959576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109509061172e565b60405180910390fd5b806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109a79190611406565b925050819055506109b88382610cf8565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8ed7db30df47fbd87811a5e8a95a94838f0c0241263d9a1865d6a2a3e10516e283604051610a1591906111ec565b60405180910390a350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a959190611621565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c34604051610ae291906111ec565b60405180910390a2565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b79578091505b818103600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258484610c579190611406565b604051610c6491906111ec565b60405180910390a3505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80471015610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d329061179a565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610d61906117eb565b60006040518083038185875af1925050503d8060008114610d9e576040519150601f19603f3d011682016040523d82523d6000602084013e610da3565b606091505b5050905080610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde90611872565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610e21929190611892565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e8b919061192a565b6000604051808303816000865af19150503d8060008114610ec8576040519150601f19603f3d011682016040523d82523d6000602084013e610ecd565b606091505b5091509150818015610efb5750600081511480610efa575080806020019051810190610ef991906114a9565b5b5b610f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f319061198d565b60405180910390fd5b5050505050565b6060610f85838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610f8d565b905092915050565b606082471015610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc990611a1f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ffb919061192a565b60006040518083038185875af1925050503d8060008114611038576040519150601f19603f3d011682016040523d82523d6000602084013e61103d565b606091505b509150915061104e8783838761105a565b92505050949350505050565b606083156110bd576000835114156110b557611075856110d0565b6110b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ab90611a8b565b60405180910390fd5b5b8290506110c8565b6110c783836110f3565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156111065781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a9190611b00565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117382611148565b9050919050565b61118381611168565b811461118e57600080fd5b50565b6000813590506111a08161117a565b92915050565b6000602082840312156111bc576111bb611143565b5b60006111ca84828501611191565b91505092915050565b6000819050919050565b6111e6816111d3565b82525050565b600060208201905061120160008301846111dd565b92915050565b611210816111d3565b811461121b57600080fd5b50565b60008135905061122d81611207565b92915050565b60006020828403121561124957611248611143565b5b60006112578482850161121e565b91505092915050565b6000806040838503121561127757611276611143565b5b600061128585828601611191565b92505060206112968582860161121e565b9150509250929050565b6112a981611168565b82525050565b60006020820190506112c460008301846112a0565b92915050565b6000806000606084860312156112e3576112e2611143565b5b60006112f186828701611191565b935050602061130286828701611191565b92505060406113138682870161121e565b9150509250925092565b6000819050919050565b600061134261133d61133884611148565b61131d565b611148565b9050919050565b600061135482611327565b9050919050565b600061136682611349565b9050919050565b6113768161135b565b82525050565b6000602082019050611391600083018461136d565b92915050565b600080604083850312156113ae576113ad611143565b5b60006113bc85828601611191565b92505060206113cd85828601611191565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611411826111d3565b915061141c836111d3565b92508282101561142f5761142e6113d7565b5b828203905092915050565b600060608201905061144f60008301866112a0565b61145c60208301856112a0565b61146960408301846111dd565b949350505050565b60008115159050919050565b61148681611471565b811461149157600080fd5b50565b6000815190506114a38161147d565b92915050565b6000602082840312156114bf576114be611143565b5b60006114cd84828501611494565b91505092915050565b6114df81611168565b82525050565b600062ffffff82169050919050565b6114fd816114e5565b82525050565b61150c816111d3565b82525050565b61151b81611148565b82525050565b6101008201600082015161153860008501826114d6565b50602082015161154b60208501826114d6565b50604082015161155e60408501826114f4565b50606082015161157160608501826114d6565b5060808201516115846080850182611503565b5060a082015161159760a0850182611503565b5060c08201516115aa60c0850182611503565b5060e08201516115bd60e0850182611512565b50505050565b6000610100820190506115d96000830184611521565b92915050565b6000815190506115ee81611207565b92915050565b60006020828403121561160a57611609611143565b5b6000611618848285016115df565b91505092915050565b600061162c826111d3565b9150611637836111d3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561166c5761166b6113d7565b5b828201905092915050565b6000611682826111d3565b915061168d836111d3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116c6576116c56113d7565b5b828202905092915050565b600082825260208201905092915050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b6000611718600c836116d1565b9150611723826116e2565b602082019050919050565b600060208201905081810360008301526117478161170b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611784601d836116d1565b915061178f8261174e565b602082019050919050565b600060208201905081810360008301526117b381611777565b9050919050565b600081905092915050565b50565b60006117d56000836117ba565b91506117e0826117c5565b600082019050919050565b60006117f6826117c8565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061185c603a836116d1565b915061186782611800565b604082019050919050565b6000602082019050818103600083015261188b8161184f565b9050919050565b60006040820190506118a760008301856112a0565b6118b460208301846111dd565b9392505050565b600081519050919050565b60005b838110156118e45780820151818401526020810190506118c9565b838111156118f3576000848401525b50505050565b6000611904826118bb565b61190e81856117ba565b935061191e8185602086016118c6565b80840191505092915050565b600061193682846118f9565b915081905092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006119776002836116d1565b915061198282611941565b602082019050919050565b600060208201905081810360008301526119a68161196a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611a096026836116d1565b9150611a14826119ad565b604082019050919050565b60006020820190508181036000830152611a38816119fc565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a75601d836116d1565b9150611a8082611a3f565b602082019050919050565b60006020820190508181036000830152611aa481611a68565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000611ad282611aab565b611adc81856116d1565b9350611aec8185602086016118c6565b611af581611ab6565b840191505092915050565b60006020820190508181036000830152611b1a8184611ac7565b90509291505056fea2646970667358221220a2749fb528937ea2e7e4e3d6c0a6cbc273be48828e92a5e2695887b8251cf0d864736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2277,
        "contract": "contracts/apps/GasStation.sol:GasStation",
        "label": "balances_",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2283,
        "contract": "contracts/apps/GasStation.sol:GasStation",
        "label": "allowances_",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}