{
  "address": "0xc6613fD20A0433F36039B52d3B492bc0De14ac8b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hexlink",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasStation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_redPacket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Deploy",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "identityType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "authType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AuthProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "deployAndCreateRedPacket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "txData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "identityType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "authType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AuthProof[]",
          "name": "proofs",
          "type": "tuple[]"
        }
      ],
      "name": "redeployAndReset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x04513accc2c18e42ed47d1ded6331a7a854e9b5fffab8a5262e598ba8dae996a",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0xc6613fD20A0433F36039B52d3B492bc0De14ac8b",
    "transactionIndex": 3,
    "gasUsed": "1185053",
    "logsBloom": "0x
    "blockHash": "0xfe69618f41869432cfb6e7936dbfaa9e37bf3ad353d4afa313ef975151415078",
    "transactionHash": "0x04513accc2c18e42ed47d1ded6331a7a854e9b5fffab8a5262e598ba8dae996a",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 30669104,
        "transactionHash": "0x04513accc2c18e42ed47d1ded6331a7a854e9b5fffab8a5262e598ba8dae996a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a4b368e3a9d49ff15b58f70fb976724a98b6d149",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a867fa1c335000000000000000000000000000000000000000000000000002599eaa392f9f3b50000000000000000000000000000000000000000000001a9cd394944f5148a75000000000000000000000000000000000000000000000000258f6423f136beb50000000000000000000000000000000000000000000001a9cd43cfc496d7bf75",
        "logIndex": 8,
        "blockHash": "0xfe69618f41869432cfb6e7936dbfaa9e37bf3ad353d4afa313ef975151415078"
      }
    ],
    "blockNumber": 30669104,
    "cumulativeGasUsed": "1386431",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78317ef8b020Fe10e845ab8723403cF1e58Ef1Cc",
    "0x495Dd646e05fde8D950D3b54E1959Ab7D5103652",
    "0x50Ff471A60aE593AA0bD14c1475FC2878a3331B5"
  ],
  "numDeployments": 2,
  "solcInputHash": "66f81f85fa58eb5ab3b4a52aa9c68636",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hexlink\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasStation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_redPacket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Deploy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identityType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"authType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AuthProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"deployAndCreateRedPacket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identityType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"authType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AuthProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"redeployAndReset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/HexlinkHelper.sol\":\"HexlinkHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/apps/HexlinkHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Hexlink Contracts\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../hexlink/IHexlink.sol\\\";\\nimport \\\"../auth/AuthProof.sol\\\";\\n\\ncontract HexlinkHelper {\\n    using Address for address;\\n\\n    event Deploy(bytes32 indexed name, address indexed impl, address account);\\n    IHexlink immutable hexlink;\\n    address immutable accountBase;\\n    address immutable gasStation;\\n    address immutable redPacket;\\n\\n    constructor(\\n        address _hexlink,\\n        address _gasStation,\\n        address _redPacket\\n    ) {\\n        hexlink = IHexlink(_hexlink);\\n        accountBase = hexlink.accountBase();\\n        gasStation = _gasStation;\\n        redPacket = _redPacket;\\n    }\\n\\n    function deploy(bytes32 salt, bytes calldata txData) public returns(address) {\\n        address account = Clones.cloneDeterministic(accountBase, salt);\\n        account.functionCall(txData);\\n        emit Deploy(salt, accountBase, account);\\n        return account;\\n    }\\n\\n    function redeployAndReset(\\n        bytes32 name,\\n        bytes calldata txData,\\n        AuthProof[] calldata proofs\\n    ) external {\\n        bytes32 salt = keccak256(abi.encode(name, block.timestamp));\\n        address account = deploy(salt, txData);\\n        if (proofs.length == 2) {\\n            IHexlink(hexlink).reset2Fac(name, account, proofs[0], proofs[1]);\\n        } else if (proofs.length == 1) {\\n            IHexlink(hexlink).reset2Stage(name, account, proofs[0]);\\n        } else {\\n            revert(\\\"HEXL014\\\");\\n        }\\n    }\\n\\n    function deployAndCreateRedPacket(\\n        bytes32 name,\\n        bytes calldata initData,\\n        bytes calldata txData,\\n        AuthProof calldata proof\\n    ) external payable {\\n        address account = hexlink.deploy(name, initData, proof);\\n        Address.sendValue(payable(account), msg.value);\\n        account.functionCall(txData);\\n    }\\n}\\n\",\"keccak256\":\"0x0dd2a067fca669a35d37d158b0486e08a637895d78f005789720b155feb1a4ca\",\"license\":\"MIT\"},\"contracts/auth/AuthProof.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.8;\\n\\n/*\\n * The request id is a hash over the request, contract processing\\n * the request and chainId. The signature is signed over keccak256\\n * hash of AuthProofToSign struct\\n */\\nstruct AuthProof{\\n    uint256 issuedAt;\\n    uint256 identityType;\\n    uint256 authType;\\n    bytes signature; // aggregated signature\\n}\",\"keccak256\":\"0xa3d6e52126e7c77217f6878c0bbec15a096ebf1ee4af82dd43b87a1715983202\",\"license\":\"Unlicense\"},\"contracts/hexlink/IHexlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Hexlink Contracts\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"../auth/AuthProof.sol\\\";\\n\\ninterface IHexlink {\\n    function accountBase() external view returns (address);\\n\\n    function addressOfName(bytes32 name) external view returns (address);\\n\\n    function bumpNonce(\\n        bytes32 name,\\n        AuthProof calldata proof\\n    ) external;\\n\\n    function deploy(\\n        bytes32 name,\\n        bytes calldata txData,\\n        AuthProof calldata proof\\n    ) external returns(address);\\n\\n    function reset(\\n        bytes32 name,\\n        address account,\\n        AuthProof calldata proof\\n    ) external;\\n\\n    function reset2Fac(\\n        bytes32 name,\\n        address account,\\n        AuthProof calldata proof1,\\n        AuthProof calldata proof2\\n    ) external;\\n\\n    function reset2Stage(\\n        bytes32 name,\\n        address account,\\n        AuthProof calldata proof\\n    ) external;\\n}\",\"keccak256\":\"0x5b192a5302a8dd990dc4cd0259bdcde17a4147030b990e5fdeb2cb3342bd49bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200171f3803806200171f83398181016040528101906200003891906200020d565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c73ffffffffffffffffffffffffffffffffffffffff1663cd6a84b36040518163ffffffff1660e01b815260040160206040518083038186803b158015620000bb57600080fd5b505afa158015620000d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f6919062000269565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050506200029b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d582620001a8565b9050919050565b620001e781620001c8565b8114620001f357600080fd5b50565b6000815190506200020781620001dc565b92915050565b600080600060608486031215620002295762000228620001a3565b5b60006200023986828701620001f6565b93505060206200024c86828701620001f6565b92505060406200025f86828701620001f6565b9150509250925092565b600060208284031215620002825762000281620001a3565b5b60006200029284828501620001f6565b91505092915050565b60805160601c60a05160601c60c05160601c60e05160601c611430620002ef60003960005050600050506000818161042b01526104c201526000818160bf0152818161023b015261032701526114306000f3fe6080604052600436106100345760003560e01c80636ec7b01e14610039578063c1d49d1a14610055578063cdcb760a1461007e575b600080fd5b610053600480360381019061004e91906109b6565b6100bb565b005b34801561006157600080fd5b5061007c60048036038101906100779190610acf565b6101f1565b005b34801561008a57600080fd5b506100a560048036038101906100a09190610b64565b610423565b6040516100b29190610c05565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e981fdf5888888866040518563ffffffff1660e01b815260040161011c9493929190610e1e565b602060405180830381600087803b15801561013657600080fd5b505af115801561014a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016e9190610e91565b905061017a813461053a565b6101e784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661062e90919063ffffffff16565b5050505050505050565b60008542604051602001610206929190610ecd565b604051602081830303815290604052805190602001209050600061022b828787610423565b90506002848490501415610319577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e77cbeb88838787600081811061028b5761028a610ef6565b5b905060200281019061029d9190610f2a565b888860018181106102b1576102b0610ef6565b5b90506020028101906102c39190610f2a565b6040518563ffffffff1660e01b81526004016102e29493929190610f52565b600060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b5050505061041a565b60018484905014156103de577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166376796a8588838787600081811061037757610376610ef6565b5b90506020028101906103899190610f2a565b6040518463ffffffff1660e01b81526004016103a793929190610fa5565b600060405180830381600087803b1580156103c157600080fd5b505af11580156103d5573d6000803e3d6000fd5b50505050610419565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090611040565b60405180910390fd5b5b50505050505050565b6000806104507f00000000000000000000000000000000000000000000000000000000000000008661067a565b90506104bf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661062e90919063ffffffff16565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16857fd2072acd88f7b2aa8b2ad0a228e28261caec5ae7ba5f4ba3e6afc475597fe068836040516105279190610c05565b60405180910390a3809150509392505050565b8047101561057d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610574906110ac565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516105a3906110fd565b60006040518083038185875af1925050503d80600081146105e0576040519150601f19603f3d011682016040523d82523d6000602084013e6105e5565b606091505b5050905080610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062090611184565b60405180910390fd5b505050565b6060610672838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610737565b905092915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610731576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610728906111f0565b60405180910390fd5b92915050565b60608247101561077c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077390611282565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107a59190611311565b60006040518083038185875af1925050503d80600081146107e2576040519150601f19603f3d011682016040523d82523d6000602084013e6107e7565b606091505b50915091506107f887838387610804565b92505050949350505050565b606083156108675760008351141561085f5761081f8561087a565b61085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590611374565b60405180910390fd5b5b829050610872565b610871838361089d565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156108b05781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e491906113d8565b60405180910390fd5b600080fd5b600080fd5b6000819050919050565b61090a816108f7565b811461091557600080fd5b50565b60008135905061092781610901565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109525761095161092d565b5b8235905067ffffffffffffffff81111561096f5761096e610932565b5b60208301915083600182028301111561098b5761098a610937565b5b9250929050565b600080fd5b6000608082840312156109ad576109ac610992565b5b81905092915050565b600080600080600080608087890312156109d3576109d26108ed565b5b60006109e189828a01610918565b965050602087013567ffffffffffffffff811115610a0257610a016108f2565b5b610a0e89828a0161093c565b9550955050604087013567ffffffffffffffff811115610a3157610a306108f2565b5b610a3d89828a0161093c565b9350935050606087013567ffffffffffffffff811115610a6057610a5f6108f2565b5b610a6c89828a01610997565b9150509295509295509295565b60008083601f840112610a8f57610a8e61092d565b5b8235905067ffffffffffffffff811115610aac57610aab610932565b5b602083019150836020820283011115610ac857610ac7610937565b5b9250929050565b600080600080600060608688031215610aeb57610aea6108ed565b5b6000610af988828901610918565b955050602086013567ffffffffffffffff811115610b1a57610b196108f2565b5b610b268882890161093c565b9450945050604086013567ffffffffffffffff811115610b4957610b486108f2565b5b610b5588828901610a79565b92509250509295509295909350565b600080600060408486031215610b7d57610b7c6108ed565b5b6000610b8b86828701610918565b935050602084013567ffffffffffffffff811115610bac57610bab6108f2565b5b610bb88682870161093c565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bef82610bc4565b9050919050565b610bff81610be4565b82525050565b6000602082019050610c1a6000830184610bf6565b92915050565b610c29816108f7565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610c6c8385610c2f565b9350610c79838584610c40565b610c8283610c4f565b840190509392505050565b6000819050919050565b610ca081610c8d565b8114610cab57600080fd5b50565b600081359050610cbd81610c97565b92915050565b6000610cd26020840184610cae565b905092915050565b610ce381610c8d565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610d1557610d14610cf3565b5b83810192508235915060208301925067ffffffffffffffff821115610d3d57610d3c610ce9565b5b600182023603841315610d5357610d52610cee565b5b509250929050565b600082825260208201905092915050565b6000610d788385610d5b565b9350610d85838584610c40565b610d8e83610c4f565b840190509392505050565b600060808301610dac6000840184610cc3565b610db96000860182610cda565b50610dc76020840184610cc3565b610dd46020860182610cda565b50610de26040840184610cc3565b610def6040860182610cda565b50610dfd6060840184610cf8565b8583036060870152610e10838284610d6c565b925050508091505092915050565b6000606082019050610e336000830187610c20565b8181036020830152610e46818587610c60565b90508181036040830152610e5a8184610d99565b905095945050505050565b610e6e81610be4565b8114610e7957600080fd5b50565b600081519050610e8b81610e65565b92915050565b600060208284031215610ea757610ea66108ed565b5b6000610eb584828501610e7c565b91505092915050565b610ec781610c8d565b82525050565b6000604082019050610ee26000830185610c20565b610eef6020830184610ebe565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600082356001608003833603038112610f4657610f45610f25565b5b80830191505092915050565b6000608082019050610f676000830187610c20565b610f746020830186610bf6565b8181036040830152610f868185610d99565b90508181036060830152610f9a8184610d99565b905095945050505050565b6000606082019050610fba6000830186610c20565b610fc76020830185610bf6565b8181036040830152610fd98184610d99565b9050949350505050565b600082825260208201905092915050565b7f4845584c30313400000000000000000000000000000000000000000000000000600082015250565b600061102a600783610fe3565b915061103582610ff4565b602082019050919050565b600060208201905081810360008301526110598161101d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611096601d83610fe3565b91506110a182611060565b602082019050919050565b600060208201905081810360008301526110c581611089565b9050919050565b600081905092915050565b50565b60006110e76000836110cc565b91506110f2826110d7565b600082019050919050565b6000611108826110da565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061116e603a83610fe3565b915061117982611112565b604082019050919050565b6000602082019050818103600083015261119d81611161565b9050919050565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b60006111da601783610fe3565b91506111e5826111a4565b602082019050919050565b60006020820190508181036000830152611209816111cd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061126c602683610fe3565b915061127782611210565b604082019050919050565b6000602082019050818103600083015261129b8161125f565b9050919050565b600081519050919050565b60005b838110156112cb5780820151818401526020810190506112b0565b838111156112da576000848401525b50505050565b60006112eb826112a2565b6112f581856110cc565b93506113058185602086016112ad565b80840191505092915050565b600061131d82846112e0565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061135e601d83610fe3565b915061136982611328565b602082019050919050565b6000602082019050818103600083015261138d81611351565b9050919050565b600081519050919050565b60006113aa82611394565b6113b48185610fe3565b93506113c48185602086016112ad565b6113cd81610c4f565b840191505092915050565b600060208201905081810360008301526113f2818461139f565b90509291505056fea2646970667358221220465af6f09bdf3f946f34b3acab0b97ed8ddeb3ae9e8eb5b97bdae6e94aa025fc64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80636ec7b01e14610039578063c1d49d1a14610055578063cdcb760a1461007e575b600080fd5b610053600480360381019061004e91906109b6565b6100bb565b005b34801561006157600080fd5b5061007c60048036038101906100779190610acf565b6101f1565b005b34801561008a57600080fd5b506100a560048036038101906100a09190610b64565b610423565b6040516100b29190610c05565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e981fdf5888888866040518563ffffffff1660e01b815260040161011c9493929190610e1e565b602060405180830381600087803b15801561013657600080fd5b505af115801561014a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016e9190610e91565b905061017a813461053a565b6101e784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661062e90919063ffffffff16565b5050505050505050565b60008542604051602001610206929190610ecd565b604051602081830303815290604052805190602001209050600061022b828787610423565b90506002848490501415610319577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e77cbeb88838787600081811061028b5761028a610ef6565b5b905060200281019061029d9190610f2a565b888860018181106102b1576102b0610ef6565b5b90506020028101906102c39190610f2a565b6040518563ffffffff1660e01b81526004016102e29493929190610f52565b600060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b5050505061041a565b60018484905014156103de577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166376796a8588838787600081811061037757610376610ef6565b5b90506020028101906103899190610f2a565b6040518463ffffffff1660e01b81526004016103a793929190610fa5565b600060405180830381600087803b1580156103c157600080fd5b505af11580156103d5573d6000803e3d6000fd5b50505050610419565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090611040565b60405180910390fd5b5b50505050505050565b6000806104507f00000000000000000000000000000000000000000000000000000000000000008661067a565b90506104bf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508273ffffffffffffffffffffffffffffffffffffffff1661062e90919063ffffffff16565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16857fd2072acd88f7b2aa8b2ad0a228e28261caec5ae7ba5f4ba3e6afc475597fe068836040516105279190610c05565b60405180910390a3809150509392505050565b8047101561057d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610574906110ac565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516105a3906110fd565b60006040518083038185875af1925050503d80600081146105e0576040519150601f19603f3d011682016040523d82523d6000602084013e6105e5565b606091505b5050905080610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062090611184565b60405180910390fd5b505050565b6060610672838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610737565b905092915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610731576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610728906111f0565b60405180910390fd5b92915050565b60608247101561077c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077390611282565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107a59190611311565b60006040518083038185875af1925050503d80600081146107e2576040519150601f19603f3d011682016040523d82523d6000602084013e6107e7565b606091505b50915091506107f887838387610804565b92505050949350505050565b606083156108675760008351141561085f5761081f8561087a565b61085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590611374565b60405180910390fd5b5b829050610872565b610871838361089d565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156108b05781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e491906113d8565b60405180910390fd5b600080fd5b600080fd5b6000819050919050565b61090a816108f7565b811461091557600080fd5b50565b60008135905061092781610901565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109525761095161092d565b5b8235905067ffffffffffffffff81111561096f5761096e610932565b5b60208301915083600182028301111561098b5761098a610937565b5b9250929050565b600080fd5b6000608082840312156109ad576109ac610992565b5b81905092915050565b600080600080600080608087890312156109d3576109d26108ed565b5b60006109e189828a01610918565b965050602087013567ffffffffffffffff811115610a0257610a016108f2565b5b610a0e89828a0161093c565b9550955050604087013567ffffffffffffffff811115610a3157610a306108f2565b5b610a3d89828a0161093c565b9350935050606087013567ffffffffffffffff811115610a6057610a5f6108f2565b5b610a6c89828a01610997565b9150509295509295509295565b60008083601f840112610a8f57610a8e61092d565b5b8235905067ffffffffffffffff811115610aac57610aab610932565b5b602083019150836020820283011115610ac857610ac7610937565b5b9250929050565b600080600080600060608688031215610aeb57610aea6108ed565b5b6000610af988828901610918565b955050602086013567ffffffffffffffff811115610b1a57610b196108f2565b5b610b268882890161093c565b9450945050604086013567ffffffffffffffff811115610b4957610b486108f2565b5b610b5588828901610a79565b92509250509295509295909350565b600080600060408486031215610b7d57610b7c6108ed565b5b6000610b8b86828701610918565b935050602084013567ffffffffffffffff811115610bac57610bab6108f2565b5b610bb88682870161093c565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bef82610bc4565b9050919050565b610bff81610be4565b82525050565b6000602082019050610c1a6000830184610bf6565b92915050565b610c29816108f7565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610c6c8385610c2f565b9350610c79838584610c40565b610c8283610c4f565b840190509392505050565b6000819050919050565b610ca081610c8d565b8114610cab57600080fd5b50565b600081359050610cbd81610c97565b92915050565b6000610cd26020840184610cae565b905092915050565b610ce381610c8d565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610d1557610d14610cf3565b5b83810192508235915060208301925067ffffffffffffffff821115610d3d57610d3c610ce9565b5b600182023603841315610d5357610d52610cee565b5b509250929050565b600082825260208201905092915050565b6000610d788385610d5b565b9350610d85838584610c40565b610d8e83610c4f565b840190509392505050565b600060808301610dac6000840184610cc3565b610db96000860182610cda565b50610dc76020840184610cc3565b610dd46020860182610cda565b50610de26040840184610cc3565b610def6040860182610cda565b50610dfd6060840184610cf8565b8583036060870152610e10838284610d6c565b925050508091505092915050565b6000606082019050610e336000830187610c20565b8181036020830152610e46818587610c60565b90508181036040830152610e5a8184610d99565b905095945050505050565b610e6e81610be4565b8114610e7957600080fd5b50565b600081519050610e8b81610e65565b92915050565b600060208284031215610ea757610ea66108ed565b5b6000610eb584828501610e7c565b91505092915050565b610ec781610c8d565b82525050565b6000604082019050610ee26000830185610c20565b610eef6020830184610ebe565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600082356001608003833603038112610f4657610f45610f25565b5b80830191505092915050565b6000608082019050610f676000830187610c20565b610f746020830186610bf6565b8181036040830152610f868185610d99565b90508181036060830152610f9a8184610d99565b905095945050505050565b6000606082019050610fba6000830186610c20565b610fc76020830185610bf6565b8181036040830152610fd98184610d99565b9050949350505050565b600082825260208201905092915050565b7f4845584c30313400000000000000000000000000000000000000000000000000600082015250565b600061102a600783610fe3565b915061103582610ff4565b602082019050919050565b600060208201905081810360008301526110598161101d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000611096601d83610fe3565b91506110a182611060565b602082019050919050565b600060208201905081810360008301526110c581611089565b9050919050565b600081905092915050565b50565b60006110e76000836110cc565b91506110f2826110d7565b600082019050919050565b6000611108826110da565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061116e603a83610fe3565b915061117982611112565b604082019050919050565b6000602082019050818103600083015261119d81611161565b9050919050565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b60006111da601783610fe3565b91506111e5826111a4565b602082019050919050565b60006020820190508181036000830152611209816111cd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061126c602683610fe3565b915061127782611210565b604082019050919050565b6000602082019050818103600083015261129b8161125f565b9050919050565b600081519050919050565b60005b838110156112cb5780820151818401526020810190506112b0565b838111156112da576000848401525b50505050565b60006112eb826112a2565b6112f581856110cc565b93506113058185602086016112ad565b80840191505092915050565b600061131d82846112e0565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061135e601d83610fe3565b915061136982611328565b602082019050919050565b6000602082019050818103600083015261138d81611351565b9050919050565b600081519050919050565b60006113aa82611394565b6113b48185610fe3565b93506113c48185602086016112ad565b6113cd81610c4f565b840191505092915050565b600060208201905081810360008301526113f2818461139f565b90509291505056fea2646970667358221220465af6f09bdf3f946f34b3acab0b97ed8ddeb3ae9e8eb5b97bdae6e94aa025fc64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}