
import { ethers, artifacts } from "hardhat";

async function iface(contract: string) {
    const artifact = await artifacts.readArtifact(contract);
    return new ethers.utils.Interface(artifact.abi);
}

async function main() {
    const hexlinkInterface = await iface("HexlinkUpgradeable");
    const data = "0x43cdffe000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000001dfb1079a0e82b1cfc47353f67ba1f169d501d6d00000000000000000000000000000000000000000000000000049e57d63540000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0b0332adbec1a84e1e264f308ae581fcda568400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a4f2b01a82e154440f1d6bf33f51d6dfe165045ace920f466bf9266f3e7bba12cf544f998f0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000003a4c0d91eaf000000000000000000000000b0bd5276015538255c8a25edbad477c35f10fa80000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003248479cc0f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000c9f0cc80c48ae03e9f2859cedb20d3fd78725dce00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001047f746eb40000000000000000000000001dfb1079a0e82b1cfc47353f67ba1f169d501d6d00000000000000000000000000000000000000000000000000000000000000001ed31ccaaca7e1c75a70c133514253acd19cf6e50a0a7cb140d859a2d033c7b000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000ef2e3f91209f88a3143e36be10d52502162426b300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000c9f0cc80c48ae03e9f2859cedb20d3fd78725dce000000000000000000000000000000000000000000000000000110d9316ec000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024b214faa528baead43dafab0a707f94596447d20a0926679bdfbb00c534cc210bdc25d3e40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064024f74a28419e839eda1f8810510d0b578872b1165326edcf6e8575613087bd6b77e351813eb643782d018c9cddc1a23367e88e4ac8a6c909385f7506f2aade99a7a61000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000943fabe0d1ae7130fc48cf2abc85f01fc987ec810000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004200448ea9dccf09dd15718efb1fa5048a6281612896d4dc56092cfef03d4c53b33b4975514c798853deec9098577669aa38ed212bd698d7147a7a274f20faa116791b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    const decoded = hexlinkInterface.decodeFunctionData("process", data);
    const deployop = decoded.ops[1];
    const {name, txData, proof} = hexlinkInterface.decodeFunctionData("deploy", deployop.callData);
    console.log(name);
    console.log(name);
    console.log(proof);

    const requestId = ethers.utils.keccak256(
        ethers.utils.defaultAbiCoder.encode(
          ["bytes4", "bytes", "address", "uint256", "uint256"],
          [
            hexlinkInterface.getSighash("deploy"),
            txData,
            "0x7e0B0332aDbEC1a84E1E264f308AE581fcda5684",
            421613,
            0
          ]
        )
    );
    const issuedAt = proof.issuedAt;
    const identityType = proof.identityType;
    const authType = proof.authType;
    const message = ethers.utils.keccak256(
      ethers.utils.defaultAbiCoder.encode(
        ["bytes32", "bytes32", "uint256", "bytes32", "bytes32"],
        [name, requestId, issuedAt, identityType, authType]
      )
    );
    console.log(message);
    console.log(proof.signature);

    const validator = new ethers.Wallet(process.env.HARDHAT_VALIDATOR);
    const signature = await validator.signMessage(
        ethers.utils.arrayify(message)
    );
    console.log("expected signature: ", signature);

    const accountIface = await iface("AccountSimple");
    const {owner, data: accountData} = accountIface.decodeFunctionData("init", txData);
    // console.log(owner);

    const {ops: userOps} = accountIface.decodeFunctionData("execBatch", accountData);
    const {callData} = userOps[0];
    const {callData: sponsorData} = userOps[1];
    
    const redpacketIface = await iface("HappyRedPacketImpl");
    const {pd} = redpacketIface.decodeFunctionData("create", callData);
    // console.log(pd);

    const {packetId} = redpacketIface.decodeFunctionData("deposit", sponsorData);
    // console.log(packetId);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});